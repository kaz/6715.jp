---
import type { MarkdownInstance } from "astro";

interface PostFrontmatter {
	title: string;
	date: string;
	tags: string[];
}
interface ExtenalPostFrontmatter extends PostFrontmatter {
	site: string;
	url: string;
}

const isExternalPost = (post: MarkdownInstance<PostFrontmatter>): post is MarkdownInstance<ExtenalPostFrontmatter> => {
	return "site" in post.frontmatter;
};

const [posts, externalPosts] = await Promise.all([
	Astro.glob<MarkdownInstance<PostFrontmatter>>("../pages/posts/*.{md,mdx}"),
	Astro.glob<ExtenalPostFrontmatter>("../externalPosts/*.md"),
]);

const entries = [...posts, ...externalPosts].sort(
	(a, b) => new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime(),
);
---

<style lang="scss">
	@import "../styles/mixins.scss";

	.posts {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;

		margin: 4rem 0;
	}
	.post {
		display: flex;
		@include mobile {
			flex-direction: column;
		}

		> time,
		> a {
			padding: 0.5rem 1rem;
			line-height: 1.4rem;
		}
		> time {
			flex: 0 0 auto;
			color: dimgray;

			@include mobile {
				padding: 1em 0 0 1em;
			}
		}
		> a {
			flex: 1 1 auto;
			color: royalblue;
			font-weight: 700;
			text-decoration: none;

			&:hover {
				background-color: ghostwhite;
			}
			> small {
				display: block;
				color: dimgray;
				font-weight: 400;
				font-size: 0.7rem;

				> span {
					text-transform: uppercase;
				}
			}
		}
	}
</style>
<div class="posts">
	{
		entries.map(entry => (
			<div class="post">
				<time>{entry.frontmatter.date.substring(0, 10)}</time>
				{isExternalPost(entry) ? (
					<a target="_blank" href={entry.frontmatter.url}>
						{entry.frontmatter.title}
						<small>
							<span>Published in</span> {entry.frontmatter.site}
						</small>
					</a>
				) : (
					<a href={entry.url}>{entry.frontmatter.title}</a>
				)}
			</div>
		))
	}
</div>
