{"pageProps":{"tag":"DApps","entries":[{"type":"article","slug":"26","body":"この記事は[CTF Advent Calendar 2018](https://adventar.org/calendars/3210)の23日目の記事です！\n\n[CTF Advent Calendar 2018](https://adventar.org/calendars/3210)\n\n本稿では、Ethereumスマートコントラクトを用いて、CTF（に限らず、様々なイベント）の賞金支払いをどう行うか？を検討してみます。\n\n## はじめに\n\n[**Capture The Flag**](https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%97%E3%83%81%E3%83%A3%E3%83%BC%E3%83%BB%E3%82%B6%E3%83%BB%E3%83%95%E3%83%A9%E3%83%83%E3%82%B0#%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3)においては、その上位者に賞金が支払われる大会がしばしば開催されている。\n\nこうしたCTFをはじめとする各種賞金付き大会において、その賞金の支払いを**DApps**を用いて行う事を考える。\n\n## DAppsを用いる意義\n\n- 確かに賞金が用意されていることを証明できる\n- 主催者が賞金を支払う意志があることをアピールできる\n- 入賞者自身が引き出しを行うので、支払いの手間がかからない\n\n# DAppsを用いた賞金付きCTF\n\n今回は簡単化のため、**優勝者のみに賞金が支払われ**、**問題数は1つ**（正解のFLAGが1つ）の単純な大会を想定とする。\nまた、優勝者は「FLAGを入手し、賞金支払い手続きを最も早く行った参加者」と定義する。\n\nDAppsやブロックチェーンなど、分散基盤上で「賞金支払い」を行う場合に、大きく問題となるのが**未受理トランザクション**の存在である。\n要は、未受理のままネットワーク（mempool）を漂っているトランザクションをコピーしてより高い手数料を付与すれば、最初にトランザクションを投入した参加者の賞金受け取り権利を横取りできてしまう、という話である。\n\n優勝者が**必ず、もしくは極めて高い確率で賞金を手にする**ことができるDAppsを考えてみよう。\n\n## 従来手法\n\n### [1]: [Bitcoinによる新しいCapture The Flag（CTF）](https://qiita.com/yyu/items/b6f367eb876dd28e759a)\n\n[Bitcoinによる新しいCapture The Flag（CTF）](https://qiita.com/yyu/items/b6f367eb876dd28e759a)\n\nこの手法では、FLAG検証に参加者固有の値を用いることで先述の問題を解決している。\nブロックチェーン上に**各参加者ごとに固有のFLAGハッシュ**を予め記憶しておくことで、検証を行う。\n\nチーム$T_i$はFLAG文字列$F$を入手すると、$h_i=H(F||i)$を含むトランザクションを提出する。$H$は適当なハッシュ関数である。\nこのトランザクションに対し、予め記録されている$ans_i=H(h_i)$と比較することで正しいFLAGを持っているか検証できる。\n仮にチーム$T_j$がこのトランザクションをコピーしても、チーム$T_j$に対する正解$ans_j$は$ans_i$と異なるため、正解とみなされない。\nまた、$h_i$を入手してもハッシュの原像計算困難性により、$F$は入手できない。\n\nEthereumを用いて実装した例もある。\n\n[Solidityで作るCapture The Flag](http://lotz84.hatenablog.com/entry/2018/01/02/134056)\n\nしかし、[1]では**予めCTFイベントへの参加者が確定している**必要があり、開始時刻以降は参加者を追加できない。\n開催中にイベントの存在を知ったユーザが新たに参加できず、ユーザビリティを欠いている。\n\n### [2]: [ERC20トークンを用いた宝探しゲーム(真)の提案](https://trap.jp/post/561/)\n\n[ERC20トークンを用いた宝探しゲーム(真)の提案](https://trap.jp/post/561/)\n\nこの手法では、テーマとして「宝探し」を取り扱っているが、秘密の文字列を何らかの手段によって入手した参加者に報奨を与えるという点で、\n**お宝**を**FLAG**に、**ERC20トークン**を**賞金**と読み替えれば、CTFにおける賞金支払いに応用可能である。\n\n基本的なアイデアは[1]とほぼ同等で、**各参加者ごとに固有のFLAGハッシュ**がスマートコントラクト上に記録されている。\n\n[1]と異なるの　は、後から参加者の追加を可能としている点である。\n[1]がBitcoinの`scriptPubKey`で記述されているのに対して、[2]ではEthereumスマートコントラクト上で実装しているため、より柔軟なDAppsが記述できている。\n\nしかしながら、[2]では参加者の追加をするために**主催者が手数料を支払う必要がある**。\n一度デプロイが完了した後にも、コントラクトの面倒を見続ける必要があるのは欠点であると言えよう。\n\n加えて、DoS攻撃の余地がある。\nEthereumのEOAアドレスは無コストで生成可能であるので、何度も参加要求を送り続けければ、主催者のEthereumが枯渇してしまう。\nこれを防ぐには、何らかのオフチェーン要素とアドレスを紐付けて個人を特定する、CTFへの参加に手数料を徴収する、などが考えられる。\nしかし、これらは主催者側の負担が大きい。到底De-centralized Appsとは呼べるものではない！\n\nさらに、[2]では**主催者がこっそり賞金を自分の懐に収める**可能性を排除できない。\n[1]では、予め参加者を確定させておくことでこの問題をうまく回避している。\n\n## 提案手法\n\n提案手法では、**後から参加者が追加可能であり、その際に手数料を必要としない**ことを目標とする。\nまた、DAppsプラットフォームとしては、Ethereumスマートコントラクトを想定している。\n\n## [N案]: コミットメントによる引き出し\n\n本手法では、予めFLAGハッシュをコントラクト上に乗せることなく、検証時には参加者ごとに異なるFLAGハッシュを用いて検証することを目指す。\nこれを可能とするのが**コミットメント方式**である。コミットメントについては、[Wikipediaの解説](https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%83%88%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%B3%E3%83%88)や[ブロックチェーンを利用した公平なガチャの提案](https://qiita.com/yyu/items/4eaa43693e39c60a8661)が詳しい。\n\nコントラクト上には、FLAG文字列$F$のハッシュ$F'=H(F)$を予め記録されている。$H$は適当なハッシュ関数である。\nまず、**commit**と**reveal**の2つの操作を定義する。\n\n**commit**は、言わば**賞金を引き出す権利の予約**である。\n参加者$T_i$は、FLAG文字列$F$を入手すると、自身のアドレス$A_i$を用いてコミット$C_i=H(F||A_i)$を送信する。\nコミット$C_i$は、コントラクト上に格納される。また、$C_i$は従来手法で予めコントラクト上に格納しておくものと等しい。\nこの時点では、トランザクションを観察しても$F$は復元困難である。これがコミットメント方式の**秘匿性**である。\n\n**reveal**は、**予約した権利が正当であることを証明**し、それを行使して**賞金を引き出す**操作である。\n参加者$T_i$は、FLAG文字列$F$を単に公開する。コントラクトは、$H(F)$を計算し、予め記録されている$F'$と比較して、FLAG文字列が正しいかを確認した後、\n$H(F||A_i)$を計算し、commit時に記録された$C_i$と比較を行うことで、**参加者はcommitの時点でこのFLAGを本当に所有していたのかを確認する**。\n以上で、commit時点で正しいことFLAGを所有していたことが確認されれば、直ちに賞金を支払う。\ncommit時に提出したFLAGは、reveal時に変更できない。これがコミットメント方式の**拘束性**である。\n\nコミットメント方式による賞金支払いでは、**revealした瞬間にFLAG文字列が全員に対して明らかになる**点に注意が必要である。\nそのため、検証を2段階に分けたとしても、誰かがrevealした瞬間に高手数料でcommitし、すぐにrevealすれば逆転可能性がある。\n\nこの手法のキモは、**commitから一定時間（ブロック高）が経過しないとrevealできない**ような制約を設けることにある。\nこれによって、revealトランザクションを投入した瞬間から一定時間内は、**攻撃者は絶対に引き出しができない**。\nしたがって、この一定時間内にrevealトランザクションが承認されれば良いため、極めて高い確率で**最も先にcommitした参加者に**賞金が支払われる。\n一定時間の遅延は、言わば攻撃者の賞金引き出し操作を遅延させるために存在するものと言える。\n\nSolidityによる実装例は以下。\n\n```js\npragma solidity ^0.5.0;\n\ncontract Prize {\n\tevent Commit(address sender, uint revealable);\n\n\tbytes32 private flagHash;\n\n\tmapping(address => bytes32) private commits;\n\tmapping(address => uint) private revealable;\n\n\tconstructor(bytes32 _flagHash) public payable {\n\t\tflagHash = _flagHash;\n\t}\n\n\tfunction commit(bytes32 commitment) external {\n\t\tcommits[msg.sender] = commitment;\n\t\temit Commit(msg.sender, revealable[msg.sender] = block.number + 128);\n\t}\n\tfunction reveal(bytes32 flag) external {\n\t\trequire(calcFlagHash(flag) == flagHash);\n\t\trequire(calcCommitment(flag, msg.sender) == commits[msg.sender]);\n\t\trequire(block.number >= revealable[msg.sender]);\n\t\tselfdestruct(msg.sender);\n\t}\n\n\tfunction calcFlagHash(bytes32 flag) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag));\n\t}\n\tfunction calcCommitment(bytes32 flag, address sender) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag, sender));\n\t}\n}\n```\n\n## [A案]: コミットメントによる権利移転\n\n[N案]では、要件を満たす賞金支払いDAppsを定義したが、この方式には1点課題が残る。\nそれは、**一定時間が経過しなくてもrevealできてしまう**点である。\n\nこの場合、正しく実装されたコントラクトでは、支払いは行われず、**FLAGが想定より早く公開されてしまう**。\n一定時間が経過する前にrevealした参加者は、我々が苦心して用意した権利保護期間を自ら捨て去ってしまったことになるのだ！\n\n[N案]を拡張し、こうした誤操作が起こりえない、言わばフールプルーフ的な構造を取り入れたのが[A案]である。\n\n**commit**と**reveal**の2つに加えて、新たに**withdraw**操作を定義する。\n\n**commit**では、[N案]の$C_i$に加えて、commitした時刻（ブロック高）を記録しておく。\n\n**reveal**では、[N案]と同様の検証を行った後に、**権利の移転**を行う。\n[A案]では、コントラクト上で「現在の引き出し権利者」（優勝者）を記憶している。\n権利の移転とは、現在の権利者がcommitした時刻よりも、早い時刻にcommitした参加者がrevealした際に、権利を移動する操作である。\n\nそして**withdraw**は、引き出し権利を行使して賞金を引き出すものである。\nこの権利行使を遅延させるのが[A案]である。遅延は、「commit時から一定時間後」でもいいし「権利取得時から一定時間後」でも良い。\ncommit時から一定時間後としたほうが、参加者の待ち時間は短くなり、ユーザビリティが向上するだろう。\n\nこれによって、commit後に即時revealしても損をすることがない。\nrevealトランザクションを見てすぐさま権利を横取りしたとしても、withdrawの遅延によってすぐに引き出せないし、その間に正当権利者がrevealすれば良い。（commitが最も早いものが最終的な権利を得る。）\n\nSolidityによる実装例は以下。\n\n```js\npragma solidity ^0.5.0;\n\ncontract Prize {\n\tevent Commit(address sender, uint withdrawable);\n\tevent Reveal(address sender, uint withdrawable);\n\n\tbytes32 private flagHash;\n\taddress payable private winner;\n\n\tmapping(address => bytes32) private commits;\n\tmapping(address => uint) private withdrawable;\n\n\tconstructor(bytes32 _flagHash) public payable {\n\t\tflagHash = _flagHash;\n\t}\n\n\tfunction commit(bytes32 commitment) external {\n\t\tcommits[msg.sender] = commitment;\n\t\temit Commit(msg.sender, withdrawable[msg.sender] = block.number + 128);\n\t}\n\tfunction reveal(bytes32 flag) external {\n\t\trequire(calcFlagHash(flag) == flagHash);\n\t\trequire(calcCommitment(flag, msg.sender) == commits[msg.sender]);\n\t\trequire(winner == 0 || withdrawable[msg.sender] < withdrawable[winner]);\n\t\temit Reveal(winner = msg.sender, withdrawable[msg.sender]);\n\t}\n\tfunction withdraw() external {\n\t\trequire(msg.sender == winner);\n\t\trequire(block.number >= withdrawable[msg.sender]);\n\t\tselfdestruct(msg.sender);\n\t}\n\n\tfunction calcFlagHash(bytes32 flag) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag));\n\t}\n\tfunction calcCommitment(bytes32 flag, address sender) public pure returns(bytes32) {\n\t\treturn keccak256(abi.encodePacked(flag, sender));\n\t}\n}\n```\n\n## 提案手法の課題\n\n### 主催者による賞金回収\n\n[2]の問題として上げた以下の点は、解決できていない。\n\n> **主催者がこっそり賞金を自分の懐に収める**可能性を排除できない。\n\nしかし、後から参加者の追加を許す場合では、この可能性を排除することは極めて難しい。\nこの問題についてはとりあえずは目をつむって、主催者は信頼に足る人間である、ということにしておこう……！\n\n### 暗号通貨に価値があることを前提としている\n\nまぁいいじゃん。\nアゼルバイジャン。\n\n## おわりに\n\nコミットメントの持つ秘匿性・束縛性を活用し、後から参加者が追加可能であり、その際に手数料を必要としない賞金支払いコントラクトを提案した。\n\n### 謝辞\n\n本稿は、[@42_0N](https://twitter.com/42_0N)氏との長時間に渡る議論を経て書き上げたものです。\nありがとナス！！！！！！！！\n\n----\n\nところで、最近公開したミニCTF:[NaruseJunCTF](https://we.are.participating.in.seccon.international/)はプレイして頂けましたか？\nなんと、全問正解者には賞金があります！（2018/12/23 現在 まだ賞金は残ってます）\n賞金支払いには[N案]コントラクトを用いていますヨ。DAppsによる賞金受け取りを是非体験してみてくださいネ。\n","title":"DAppsによる賞金付きCTF","image":null,"tags":["CTF","DApps","Ethereum","アドベントカレンダー","スマートコントラクト"],"date":"2018-12-23T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}