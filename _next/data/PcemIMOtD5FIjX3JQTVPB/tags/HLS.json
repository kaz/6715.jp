{"pageProps":{"tag":"HLS","entries":[{"type":"article","slug":"20","body":"HLSを使ったライブストリーミングを試してみます\n\n[前々回](/posts/18/)・[前回](/posts/19/)の続きです。\n\n<!--more-->\n\n# あらすじ\n\n前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n前回はAzureのWindowsServerにHTTPリクエストを送ってきりたん好きなコトを喋らせるサーバができたのでした。\n\n[クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～](/posts/19/)\n\n今回は、**HTTP Live Streaming**(HLS)を用いてきりたんボイスをライブ配信してみようと思います！\n\n![](kiritan.png)\n\n# HTTP Live Streaming\n\n**HTTP Live Streaming**とは、Appleが開発したHTTPベースのストリーミング配信プロトコルです。\n静的な動画ファイルのストリーミング配信はもちろん、ライブ配信(生放送)もできたり、\nアダプティブストリーミングと呼ばれる回線速度に応じて配信するビットレートを変更する技術も利用可能です。\n\n最近話題の[AbemaTV](https://abema.tv/)なんかでも、HLSで配信を行っています。\nちなみに、Twitterにアップされた動画もHLSで配信されています。\n\nストリーミング配信プロトコルと聞くと、複雑そうな気がしてきますが、HLSはHTTPベースで非常に単純です。\nザックリと説明を書いてみます。\n\n## HLSのしくみ\n\nHLSでの配信は、`.ts`ファイルと`.m3u8`ファイルによって行われます。\n\n### ts\n\n`.ts`ファイルは、**MPEG-2 TS**と呼ばれる形式で、配信される映像・音声そのものが格納されます。\n\n配信されるデータは一定の秒数ごとに分割し、このMPEG-2 TS形式で保存しておきます。\n分割された`.ts`ファイルは、HTTPでダウンロードできるようにしておきます。\n\nちなみに、日本のデジタルテレビ放送もこのMPEG-2 TSで配信されています。\n\n### m3u8\n\n`.m3u8`ファイルは、配信ファイルのインデックスです。\n先述した`.ts`に分割された映像・音声データのURLが列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=300000\n240/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=900000\n360/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1400000\n480/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2200000\n720/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n```\n\nこれはMaster Playlistと呼ばれるデータで、\n回線速度によって異なるビットレートでの配信を行うアダプティブストリーミングのためのファイルです。\n次に示すMedia PlaylistのURLと想定する回線速度が列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:6\n#EXT-X-MEDIA-SEQUENCE:4\n#EXT-X-DISCONTINUITY-SEQUENCE:1\n#EXT-X-KEY:METHOD=AES-128,URI=\"abematv://v2/abema-news/abema-news/DUjoiyL1pJGkADZotyiXDn5\",IV=0xaccca4b41de3d9afb029070eb564be40\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5BPWe1D8Hu9yCC8HaA3oHS.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5SphyMY1TTLvYkFo7B5JuM.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/2kxyGFo9sH9zUUfKj5USUk.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/Cz43TVWLgUgqskzvWBBnjA.ts\n```\n\nこれはMedia Playlistと呼ばれるデータで、\n配信されている映像・音声が格納された`.ts`ファイルのURLが列記されています。\n\n### 再生の方法\n\nクライアントは、まず`.m3u8`ファイルを取得します。\nそれがMaster Playlistであれば、回線速度によって適切な`.m3u8`を読みに行きます。\nそれがMedia Playlistであれば、`.ts`ファイルを取得して再生します。\n\nクライアントは、`.m3u8`内のタグと呼ばれるデータ(`#EXT`で始まる行)に従って、`.m3u8`を再読込します。\nライブ配信を行う場合は、クライアントが再読込した際に新しい配信データが追加されていれば良いわけです。\n\n以下に、主要なタグの説明を示します。\n\n#### EXT-X-TARGETDURATION\n\n分割された`.ts`の中で最大の長さに最も近い整数値を指定します。\nクライアントは、およそこの秒数ごとに`.m3u8`を再読込します。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n\n#### EXT-X-MEDIA-SEQUENCE\n\nその`.m3u8`にかかれている一番最初の`.ts`が、放送全体で何番目の`.ts`であるかの値を指定します。\nクライアントが分割された`.ts`を正しく連続再生する上で必要になります。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.2\n\n#### EXTINF\n\n分割された`.ts`１つの秒数。小数で指定できる。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.1\n\n# HLSを再生したい\n\nHLSはブラウザ上で再生できるのが強いです。\nhttps://caniuse.com/#search=HLS\n\nん？？？？？なんか赤いな……\n\n![](hls.png)\n\nFirefoxとChromeが対応してないやんけ！！！！！！！！！\n珍しくEdgeが優秀だ……\n\n悲しいですね。\nでも**Mesia Source Extensions**(MSE)という機能を使うとそれっぽくHLSを再生できるので安心です。\nhttps://caniuse.com/#search=MSE\n\nMSEを使ったHLS再生は、[Video.js](http://videojs.com/)とか[hls.js](https://github.com/video-dev/hls.js/tree/master)とかのライブラリを使うと簡単です。\n\nちなみに、AbemaTVは[THEOplayer](https://www.theoplayer.com/)という有償のプレーヤーを使ってるみたい。\n\n# HLSで生配信\n\nHLSをなんとな～くわかった気になったので、ライブ配信をやってみます。\n\nHLSで生配信をするにはどうすればよいのかというと、つまり\n\n- データをMPEG-2 TSにエンコードする\n- `.m3u8`に`.ts`へのリンクを追加する\n\nを繰り返すだけです。\n\n`.ts`へのを追加していくだけだとドンドン`.m3u8`がでっかくなってしまうので、\n過去の`.ts`へのリンクはある程度時間が立ったら消してしまいましょう。\n`.ts`へのリンクを消したら、`#EXT-X-MEDIA-SEQUENCE`を増やさないとクライアントが困ってしまうので注意です。\n\nとっても単純ですね！\nさて、先述したことをやるだけでライブ配信サーバが書けてしまいます。\n\n今回は、Twitterからタイムラインを取得して、ツイートをいい感じにきりたんに読んでもらい、\nHLSを用いてリアルタイムでその音声データを配信してみます。\n\n音声ファイルを分割してMPEG-2 TSにするのを自分で書くのは流石にしんどいので、\nFFMPEGさんにお願いしました。\nhttps://www.ffmpeg.org/ffmpeg-formats.html#hls-1\n\n## やること\n\n![](system.svg)\n\n### twitter.listen()\n\n- UserStreamでツイート取得\n- kiritan.pyにジョブを投げる\n- encoder.pyのキューに読み上げたWAVファイルを蓄積\n\n### encoder.livestreaming()\n\n- キューにファイルがなければ無音データをプレイリストに追加\n- キューにファイルがあればTSに分割してプレイリストに追加\n- プレイリストの先頭のTSの再生時間分だけ待って、プレイリストから削除\n\n## やりました\n\n方針が定まったら書くだけ……\n\n### コード\n\n全コード\n\nhttps://github.com/kaz/kiritan-server\n\nHLS関係の処理はたったコレだけです！\n```python\n# FFMPEGでファイルをMPEG-TSにエンコード（中身はMP3）\ndef ts(file):\n\tlogging.info(\"Encoding WAV to MPEG-TS\")\n\n\tdata = subprocess.run(\n\t\t[\n\t\t\t\"ffmpeg\",\n\t\t\t\"-i\", file, \"-vn\",\n\t\t\t\"-acodec\", \"libmp3lame\",\n\t\t\t\"-ab\", \"128k\",\n\t\t\t\"-ac\", \"2\",\n\t\t\t\"-ar\", \"44100\",\n\t\t\t\"-f\", \"hls\",\n\t\t\t\"-hls_time\", \"2\",\n\t\t\t\"-hls_list_size\", \"0\",\n\t\t\t\"-start_number\", str(int(time.time() * 1000)),\n\t\t\t\"-hls_segment_filename\", \"static/live%d.ts\",\n\t\t\t\"pipe:1.m3u8\"\n\t\t],\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.DEVNULL\n\t)\n\n\t# 出力されたプレイリストをパースして返す\n\tplaylist = data.stdout.decode(\"utf-8\")\n\tplaylist = playlist[playlist.rfind(\"#EXTM3U\"):]\n\n\t# Tuple (再生時間, ファイルパス)\n\treturn re.findall(r\"#EXTINF:([\\d.]+),\\s+(\\S+)\", playlist)\n\n# ライブストリーミングキューに追加\nque = []\ndef enqueue(f):\n\tque.append(f)\n\n# ライブプレイリストを更新\ntsl = []\nseq = 0\ndef __livecasting():\n\tglobal seq\n\n\twhile True:\n\t\ttry:\n\t\t\tif len(que) != 0:\n\t\t\t\t# キューにデータがあればプレイリストに追加\n\t\t\t\ttsl.extend(ts(que.pop(0)))\n\t\t\telse:\n\t\t\t\t# キューが空なら無音ファイルを配信\n\t\t\t\twhile len(tsl) < 3:\n\t\t\t\t\ttsl.append((\"2.04\", \"silent.ts\"))\n\n\t\t\t# TS 1つ分だけ休憩する\n\t\t\ttime.sleep(float(tsl[0][0]))\n\t\t\ttsl.pop(0)\n\t\t\tseq += 1\n\t\texcept:\n\t\t\tlogging.error(traceback.format_exc())\n\n# サーバ起動\ndef livecasting():\n\t# 古い配信データを削除\n\tfor f in glob.glob(\"static/live*\"):\n\t\tos.remove(f)\n\n\tthreading.Thread(target=__livecasting).start()\n\n# ライブプレイリストを生成\ndef playlist():\n\tpl = [\n\t\t\"#EXTM3U\",\n\t\t\"#EXT-X-VERSION:3\",\n\t\t\"#EXT-X-TARGETDURATION:3\",\n\t\t\"#EXT-X-MEDIA-SEQUENCE:%d\" % seq\n\t]\n\n\tfor ts in tsl[:5]:\n\t\tpl.append(\"#EXTINF:%s,\" % ts[0])\n\t\tpl.append(\"#EXT-X-DISCONTINUITY\")\n\t\tpl.append(\"/static/%s\" % ts[1])\n\n\treturn \"\\n\".join(pl)\n```\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`と`tweepy`です\n\n```sh\npip install pypiwin32 flask tweepy\n```\n\n## 動作検証\n\n大体のブラウザでhls.jsを介した再生ができました。\n\nネイティブでHLSに対応しているブラウザ(Safari, Edge, iOS Safari, Android Chrome)は、\n`.m3u8`に直接アクセスしても再生できました。\n\nなんかAndroidだとちょっとプツプツしちゃってるかも？？？\n\n## ハマりそうなポイント\n\n- TS1つの長さ、プレイリスト全体の長さ、`#EXT-X-TARGETDURATION`をうまく調整しないと再生されなかったりプツプツなったりする\n\t- このへんどうするのが最適なのかがわからないので今回は試行錯誤した\n- TSが切り替わる（別のメディアから生成したものになる）時に`#EXT-X-DISCONTINUITY`を付けないと再生が止まる\n\t- Appleのソフトウェアはうまくやってくれるけど、その他は上手く行かない\n- TwitterのUserStreamはPCの時計かズレてると認証失敗する\n\n# おしまい\n\nということで、AzureのWindowsServerでWin32APIを使ってVOICEROIDを操作してTwitterのTLを読み上げた音声をHLSでライブ配信できました！\n\nWin32APIとかHLSとか、まだわからないことがたくさんなので、それはおかしいだろ！って思ったら鉞おねがいします＞＜\n\nそれにしても、きりたんはかわいいですね！\n\nおしまい\n","title":"クラウド東北きりたん その3 ～HLSでライブストリーミング～","image":null,"tags":["HLS","VOICEROID","インフラ","ストリーミング","東北きりたん"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}