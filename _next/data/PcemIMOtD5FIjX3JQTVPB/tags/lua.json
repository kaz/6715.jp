{"pageProps":{"tag":"lua","entries":[{"type":"article","slug":"21","body":"備忘録！\n\n# 全自動HTTPS\n\n[Let's Encrypt](https://letsencrypt.org/)の登場でHTTPSがぐっと身近になりましたが、やっぱり証明書をホスト名毎に取得するのは結構面倒ですし、90日毎に更新しなきゃいけないのも大変です。\n\nhttps://letsencrypt.org/\n\nそこで、[OpenResty](https://openresty.org/en/)(nginxにいろいろ足したやつ)に[lua-nginx-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を入れて、全自動で証明書取得から更新までしてくれる環境を作りたいと思います。\n例によってArchLinuxでやります。\n\n## インストール\n\nOpenRestyを入れます。\nAURからPKGBUILDを落としてきてmakepkgでパッケージを作ってインストールします。\n```sh\ngit clone https://aur.archlinux.org/openresty.git\nmakepkg --syncdeps --install --skippgpcheck\n```\n\nlua-nginx-auto-sslのインストールにLuaRocksを使うので、同様にインストール。\n```sh\ngit clone https://aur.archlinux.org/openresty_luarocks.git\nmakepkg --syncdeps --install\n```\n\nLuaRocksでlua-nginx-auto-sslを入れる。\n```sh\n/opt/openresty/luajit/bin/luarocks install lua-resty-auto-ssl\n```\n\n## 設定\n\nArch公式リポジトリのnginxと同じ感じの操作感にするために、いろいろシンボリックリンクを貼ります。\n```sh\nln -s /opt/openresty/nginx/conf /etc/nginx\nln -s /opt/openresty/nginx/logs /var/log/nginx\nln -s /opt/openresty/bin/openresty /usr/bin/nginx\nln -s /usr/lib/systemd/system/openresty.service /usr/lib/systemd/system/nginx.service\n```\n\nlua-nginx-auto-sslで取得する証明書の鍵アルゴリズムとか、取得失敗時に使う自己署名証明書とかを用意。\n```sh\nmkdir -p /etc/nginx/ssl/letsencrypt/conf.d\nprintf 'KEY_ALGO=\"prime256v1\"\\nCONTACT_EMAIL=\"example@narusejun.com\"' > /etc/nginx/ssl/letsencrypt/conf.d/custom.sh\nopenssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout /etc/nginx/ssl/fallback_key.pem -out /etc/nginx/ssl/fallback_crt.pem -subj \"/CN=NaruseJun/\"\nchown -R http:http /etc/nginx/ssl\n```\n\n`/etc/nginx/ssl`は、lua-nginx-auto-sslが証明書を置いたりするのに使うディレクトリです。\n後ほど、nginxの設定でこのディレクトリを指定します。\n\nOpenRestyの実行ユーザ（Archのデフォルトは`http`）がこのディレクトリに書き込み出来ないと証明書の取得に失敗するので、chmodしています。\n\n### OpenSSL 1.0系を使う設定\n\nlua-nginx-auto-sslが内部て使っているletsencryptクライアントの**dehydrated**はバージョンが少々古くて、OpenSSL 1.1系に対応していません。\nArchLinuxはOpenSSL 1.1系なので、このまま運用すると**証明書が取得できているのにdehydratedが落ちて**しまいます。\nlua-nginx-auto-sslくんはアクセスが有るたびに証明書を取得しようとするので、あっという間にRateLimitに引っかかってしまいます……！\n\nということで、OpenSSL 1.0系を使ってくれるようにdehydratedをパッチします。\n\n```sh\npacman -Sy openssl-1.0\nsed -i \"2a shopt -s expand_aliases\\nalias openssl=openssl-1.0\\n\" /opt/openresty/luajit/bin/resty-auto-ssl/dehydrated\n```\n\n### nginxの設定\n\nlua-nginx-auto-ssl特有の設定をいろいろ入れないといけません。\n\n[lua-nginx-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)のドキュメントを読めば大体わかりますが、\nハマる可能性のあるポイントをいかにリストアップしておきます。\n\n- resolverを必ず設定する\n- ホスト毎に必ず`location /.well-known/acme-challenge/`の設定を入れる\n- `auto_ssl:set(\"allow_domain\", ...)`を必ず設定する\n\n全部設定したのがコレです。\n\nhttps://github.com/kaz/openresty-autossl-sample-setting\n\n## 動かす\n\n```sh\nsystemctl start nginx\nsystemctl enable nginx\n```\n\n初回アクセス時は、証明書の取得が完了するまでレスポンスが返ってこないので、ちょっと時間がかかります。\n途中で作った自己署名証明書が使われてしまう場合は、証明書の取得に失敗しています。\n`/var/log/nginx/error.log`にエラーメッセージが出力されているので、確認しましょう。\n\n# おわり\n\nこれで放っといても勝手に証明書を更新してくれたり、nginxの設定をコピーすれば新しいホストに対して証明書を発行してくれる環境ができました！\nlua-nginx-auto-sslを導入したので、このブログもSSL化してみました。\n\n## 余談\n\nLet's Encryptでワイルドカード証明書が発行できるようになるそうです。すごい。\n\nhttps://twitter.com/letsencrypt/status/882985570401701888\n\n## 追記\n\nワイルドカード証明書が発行できるようになりました。\n\n[ワイルドカード証明書](/posts/23/)\n","title":"lua-nginx-auto-sslで全自動HTTPS","image":null,"tags":["インフラ","自動化","SSL","nginx","lua","OpenResty"],"date":"2017-07-08T00:00:00.000Z","updated":"2021-01-08T10:53:56.000Z"}]},"__N_SSG":true}