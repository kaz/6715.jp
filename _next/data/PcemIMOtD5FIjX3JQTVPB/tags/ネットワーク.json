{"pageProps":{"tag":"ネットワーク","entries":[{"type":"article","slug":"29","body":"おうちネット、最近は楽天ひかりを契約してます。\n楽天モバイルとセットで申し込むと、ひかりも通信料1年間無料になって激アツです。\n\n[IQ1 Advent Calendar 2020](https://adventar.org/calendars/5197) - 16日目の記事です。\n\n[IQ1 Advent Calendar 2020](https://adventar.org/calendars/5197)\n\n## 自宅サーバ\n\n世はまさに大クラウド時代！\n**自宅サーバ**とかいう文字列を目にすることも、こころなしか少なくなったような気がします。\n\n普通の家庭向けインターネット接続サービスではIPv4アドレスが1つしか割当されないのに対して、宅内にはたくさんの端末がある……ので、NAPTでうまいことさばいているのが普通かと思います。\nこういう環境下で家にサーバを置くには、いわゆるポート開放[^1]、静的NAPTの設定が必要になるわけですね。\n\n[^1]: この言い方は好きじゃないですが、よく使われているのでコレで……\n\n## IPv4 over IPv6での自宅サーバ公開\n\n楽天ひかりはIPv4 over IPv6に対応しています。\nこのやりかたでIPv4ネットワークに接続すると、旧来のPPPoEによる接続と比較してパフォーマンスが良い、とされています。\n\nIPv4 over IPv6の実現する方式にはいくつか種類があって、楽天ひかりはXpass（クロスパス）と呼ばれる方式を利用しているとのこと。なんだかカッコいい名前がついていますが、一般的にはDS-Liteと呼ばれるやつですね。\n\nが、DS-Lite方式のIPv4 over IPv6では、いわゆるポート開放ができません。残念。\nでは自宅サーバは公開できないのか？というとそうでもなくて、依然として旧来のPPPoE接続はできるので、こっちを通るようにすれば良いです。\n\n## DS-LiteとPPPoEの併用\n\n家庭用のルータだとそもそもコレができる機種は限られています。\nここは課金ポイントです。業務用っぽいやつを買いましょう。\n\nボクはYAMAHAのNVR510を買いました。\n具体的な設定手順は省きますが、DS-LiteとPPPoEの両方でIPv4ネットワークに接続できたとしましょう。\n\n![](1.png)\n\n当然ですが、DS-Lite側とPPPoE側で別々のアドレス`X.X.X.X`と`Y.Y.Y.Y`を持っているような状態になっています。\n\n普段の通信は、パフォーマンスが良いとされているDS-Lite側(`tunnel 1`)を通したいです。\nなので、デフォルトゲートウェイはこっち側にします。\n\n```\nip route default gateway tunnel 1\n```\n\nこういう感じになっています。\n\n![](2.png)\n\n## 自宅サーバ宛の通信をPPPoE側で受け入れる\n\n今回はHTTPサーバを公開するということにして、PPPoE側のアドレスに来た`80/tcp`の通信をサーバが受け取れるように、静的NAPT[^2]エントリを追加します。\n\n[^2]: YAMAHA製品ではIPマスカレードという名称\n\n```\nnat descriptor type 1 masquerade\nnat descriptor masquerade static 1 100080 192.168.0.250 tcp www\npp select 1\n  ip pp nat descriptor 1\n```\n\nこれで、外の端末からの通信がサーバに到達できるようになりました。\nTCPだと、まず`SYN`パケットが送られてきますよね。\n\n![](3.png)\n\nで、サーバは`SYN/ACK`で応答するわけです。3-wayハンドシェイクというやつの2番目です。\nクライアント(`Z.Z.Z.Z`)がどこにいるなんて末端のサーバは知りません。なので、とりあえず家庭内のルータに丸投げします。当の家庭内ルータもその上位ルータへ投げるだけです。このとき、**デフォルトゲートウェイをDS-Lite側に設定**しているので、当然この`SYN/ACK`もそっち側に行ってしまいます。\n\n![](4.png)\n\nすると、クライアントからするとおかしな事が起こっているように見えるわけです。`Y.Y.Y.Y`に送った`SYN`の返答がなぜか`X.X.X.X`から帰ってくる……これではTCP接続は確立できません。\n返りの通信もPPPoEを通るようにしないとダメそう。\n\nちなみに、UDPならこの状態でも通信できる可能性があります。\n\n## 返りの通信もPPPoEを通す\n\nポリシーベースルーティング（PBR）[^3]をします。\nある条件に合致するような通信だけ、別の経路に流したりできる機能です。\nこれも業務用クラスのルーターじゃないと使えない場合が多そうです。\n\n[^3]: YAMAHA製品ではフィルタ型ルーティングに相当\n\n今回は、HTTPサーバを公開したいという状況なので、送信元が件の自宅サーバでかつポート番号が`80`のときだけ、PPPoE側(`pp 1`)にルーティングするようにします。\n\n```\nip filter 100080 pass 192.168.0.250 * tcp www *\nip route default gateway pp 1 filter 100080 gateway tunnel 1\n```\n\nこれで、こうなります。`SYN`のdstと`SYN/ACK`のsrcが一致して、クライアントは`ACK`を返してくれることでしょう……晴れて接続確立です。\n\n![](5.png)\n\n## おしまい\n\nおわりです。\nなんかもっといい方法ないのかな。\n\n### おまけ：パケットキャプチャ\n\nサーバ側はこう。`192.168.0.250`が宅内のサーバで、`133.130.113.115`は外にいるクライアント。\n`SYN/ACK`をめちゃ再送している。\nクライアントが再送した`SYN`もいっぱい来てる。\n\n![](server.png)\n\nクライアント側。\n`SYN`を再送してる。サーバが送った`SYN/ACK`はそもそも届いてない。\n途中の誰かが捨ててるのかな……（ここわからん）\n\n![](client.png)\n","title":"DS-Lite/PPPoE併用環境で自宅サーバの通信だけPPPoEを通す","image":null,"tags":["DS-Lite","PPPoE","アドベントカレンダー","インフラ","ネットワーク"],"date":"2020-12-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"17","body":"重い\n\n\n# CPCTF\n\nhttps://ctf-no.pro/\n\nこういうのをやりました。\n\n出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです）\n\nhttp://yuinore.net/2017/04/cpctf-writeup-1/\n\nhttp://yuinore.net/2017/04/cpctf-writeup-2/\n\nサーバ周りは全てボクが担当したんですが、ゴミクソ重くて申し訳なさがXDです。\n\n## 構成\n\n問題が60個とかそれくらいありました。多すぎる。\nで、この問題たちとスコアサーバを全て1台のサーバ(cpu:8Core mem:16GB)で動かしました。\n\n全てのアプリはDockerで環境が分離されています。\n自作のソフトウェア（Dockerのラッパみたいな何か）によって、PaaSみたいな使い心地で問題を更新できる仕組みにしてました。\n\n👆のお陰で、出題ミスが見つかっても更新が非常にスムーズでした。\n最終的に100アカウントくらいが登録されてましたが、サーバも落ちたりせずに概ね順調でした。\n\nが、HTTPでのアクセスがクッッッッッソ遅い問題にぶち当たって険しい感じでした。\nなんか変な感じの挙動で、一度繋がるとそれ以後数10分は快適に繋がるが、\n繋がらない人は永遠につながらない（HTTPレスポンスが帰ってこない）感じ。\n\nで、サーバ全体の負荷も大したことなかったし、ネットワーク帯域も余裕っぽかったので、謎かった。\n\n## 重い理由\n\nサーバが1台で、アプリが沢山乗ってる構成なので、HTTPリクエストを捌いてくれるリバースプロキシとして**OpenResty**さんを使っていて、\nHTTPS化を手っ取り早くやるために[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を採用していました。\n\nhttps://github.com/GUI/lua-resty-auto-ssl\n\n[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)は非常に優秀で、\n**正しく設定すれば**勝手にすべてのページをHTTPS化してくれて便利便利floatです。\n\nでまぁ、結論を言うと重いのはこの人が原因でした。\n\nこの人はOCSP Staplingもやってくれるんですが、コレを正しく動作させるためにはOpenRestyの`resolver`設定をしてあげないとダメです。\nどうダメかというと、遅くなります。おそらくDNSの問い合わせができずにそこでワーカーが止まってしまい永遠にレスポンスが帰ってこないのかな？\n\nエラーログにはOCSPが失敗したよ！っていうログがいっぱい出ていなので、コレが問題なのは間違いないんですが詳しい原因はコレ以上分からずです。\n一旦繋がると以後は素早く繋がるのは多分、一度OCSPで証明書の正当性が確認されるとしばらくは確認しないから……？\nでもOCSP Staplingってサーバ側が能動的に送ってるものな気がするし違うのでしょうか……\n\nそれと、[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)が内部で使ってるLetsencryptクライアントの\n[dehydrated](https://github.com/lukas2511/dehydrated)は、デフォルトだとRSA **4096bit**の証明書を作成します。\n4096bitは結構遅いです。適当に`ab`で計測したら4096bitは2048bitを比較してリクエスト完了まで10倍くらいの時間がかかってました。\n\n## Dockerの内部DNS\n\nさっきのOpenRestyはDockerコンテナ内で動かしてたんですが、\nDocker内部だとデフォルトゲートウェイがDockerネットワーク内でのホストのアドレスなので、\nDNSのについてもこの人がやってくれてるんだろうな〜〜って勝手に思って勝手にそう指定してたんですが、これが間違いでした。\n\nDockerネットワーク内でのDNSサーバは、`127.0.0.11`が正しいそうです。\nというか、resolve.confを見たらちゃんと書いてあったわ……\n\n## おわり\n\nわからないことが多いです。\n誰か鉞投げて欲しい。\n","title":"新入生向けCTF体験会のスコアサーバが重かった","image":null,"tags":["CTF","DNS","Docker","インフラ","ネットワーク","日記"],"date":"2017-05-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"12","body":"作ります\n\n## イーサネットコンバータ\n\n無線LANの電波を有線に変換するやつ（適当）\n\n公衆無線LANをイーサネットコンバータで有線ネットワークにつなげると嬉しいね、みたいな。\nてかこれルータじゃないか？\n\n## 準備\n\n突然ですがArchLinuxは神です。\nとりあえずRaspiにArchLinuxARMを入れます。\n\nx86_64の一般的なやつと比べるとインスコ難易度は低めです。\n\nここのInstallationをみましょう\n\nhttps://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3\n\nなんかmacOSでやろうとしたら詰んだので、Linux上でやることをオススメします。\nボクはArchLinux(x86_64) on VirtualBox on macOSでやったんですが、非常に闇だったのでおすすめしません。\nWindowsは知りません。ガンバッテ。\n\nちなみにx86_64版のインストールはこの記事がわかりやすいですね！！１１\n\nhttps://trap.jp/post/39/\n\n## 設定\n\n### IPを固定しよう\n\n先にLAN側をやりましょう。\n\n今回は`10.0.0.0/24`なネットワークを作ってみます。\nArchLinuxは神なので[netctl](https://wiki.archlinuxjp.org/index.php/Netctl)っていう神ツールが入っています。\n\nこの設定ファイル`/etc/netctl/eth0`を書いて、\n```\nInterface=eth0\nConnection=ethernet\nIP=static\nAddress=('10.0.0.1/24')\n```\n\n```sh\n# netctl start eth0\n# netctl enable eth0\n```\n\nこんなかんじ。\n自分のIPアドレスは`10.0.0.1`にしました。\n\n### DHCP/DNSサーバになろう\n\n市販のルーターにはだいたいついてるDHCP/DNS機能ですが、**dnsmasq**ってのがありまして、この人がこの2つを兼任してくれます。\n\nとりあえずインストール\n```sh\n# pacman -S dnsmasq\n```\n\nで、設定ファイル`/etc/dnsmasq.conf`に追記します。\n```\ninterface=eth0\nbind-interfaces\ndhcp-range=10.0.0.2,10.0.0.254,2h\ndhcp-option=option:netmask,255.255.255.0\ndhcp-option=option:router,10.0.0.1\ndhcp-option=option:dns-server,10.0.0.1\n```\n\nそしたらdnsmasqを起動します。\n```sh\n# systemctl start dnsmasq\n# systemctl enable dnsmasq\n```\n\nこれで、このRaspiがデフォルトゲートウェイと化したので、他の人がRaspiにガンガンパケットを送ってくるようになります。\nでもルーティングしてないから死ぬね。\n\n\n### インターネットに繋ごう\n\nそしたらWAN側をなんとかします。\nLAN側にeth0を向けてて、WAN側にはwlan0を使います。\n\nArchLinuxは神なので、**wifi-menu**っていう神ツールがはいってます。（たぶんnetctlの一部）\n\n```sh\n# wifi-menu -o\n```\n\nってやったら後はウィザード形式で設定できてしまいます。\n簡単！！！説明することがない！！\n\n再起動しても自動でつながるようにしておきます。\n```sh\n# netctl list\n* eth0\n* wlan0-Wi2_club\n  wlan0-TokyoTech\n\n# netctl enable wlan0-Wi2_club\n```\n\n今回は公衆無線LANのWi2に繋いでいます。\nnetctlを使えば場所によって手軽にプロファイルを切り替えられる！！便利だ！！！！\n\n### ルーティングしよう\n\nじゃあ、色んな所から届いてるパケットをうまく捌きましょう。\n\nまず、パケット転送を有効にします。\n```sh\n# sysctl net.ipv4.ip_forward=1\n```\n\n再起動後も有効になるように`/etc/sysctl.d/ipforward.conf`を作成します。\n```\nnet.ipv4.ip_forward=1\n```\n\nあとは**iptables**さんが優秀なので、例によって設定を書くだけです。\n\n`/etc/iptables/iptables.rules`を作成します。\n```\n*filter\n:INPUT ACCEPT [231:17979]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [150:14976]\n-A FORWARD -i eth0 -o wlan0 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nCOMMIT\n\n*nat\n:PREROUTING ACCEPT [10:734]\n:INPUT ACCEPT [4:314]\n:OUTPUT ACCEPT [2:134]\n:POSTROUTING ACCEPT [0:0]\n-A PREROUTING -d 10.0.0.1 -i eth0 -j ACCEPT\n-A POSTROUTING -s 10.0.0.0/24 -o wlan0 -j MASQUERADE\nCOMMIT\n```\n\n自分宛てのパケットは受け取って、それ以外はNAPT(IPマスカレード)でうまいこと書き換えて流します。\n\niptablesの設定を有効化します。\n```sh\n# systemctl start iptables\n# systemctl enable iptables\n```\n\n## できあがり！\n\n完成です。\nイーサネットコンバータもといルータと化したRaspberry Pi 3です。\n\nwlan0のMACアドレスをWi2とかの公衆無線LANに登録すれば、無制限に分配できるマンになれます。\n\neth0が100Mbpsまでしか通れないので、ちょっと大きいことをしようとするとかなり辛いです。\nギガビット対応のUSB接続LANアダプタつけたらちょっとだけ速くなります。\nでもUSB2.0なので最大転送速度は理論値480Mbpsくらいが限界です。かなしい。\n","title":"Raspberry Pi 3 で作るイーサネットコンバータというかルータ","image":null,"tags":["Raspberry Pi","ネットワーク"],"date":"2016-10-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}