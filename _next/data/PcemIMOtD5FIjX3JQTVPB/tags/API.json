{"pageProps":{"tag":"API","entries":[{"type":"article","slug":"25","body":"この記事は[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)の21日目の記事です！\n\n[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)\n\n# ConoHaの[DNS API](https://www.conoha.jp/docs/)は便利\n\nという話を[2年前](/posts/14/)にもしたのでした。\n\n[2年前の記事](/posts/14/)\n\n皆さん、ConoHaのDNS API使ってますか？\nLet's EncryptのDNS-01チャレンジの自動化にも使える！のでイケてますね。\n\n## APIクライアントについて\n\nさて、ではどうやってAPIを叩くか？\n先に紹介した記事の要旨は「ConoHa DNS用 APIクライアント 作った」なんですが、あまりにも使い辛いので無視します。\n\n### Designateクライントを使う\n\nConoHaのDNSは[OpenStack Designate](https://docs.openstack.org/designate/latest/)を使っているようです。多分。API体系がソレっぽいので。\n\nなので、[Designateのクライアント](https://docs.openstack.org/python-designateclient/latest/cli/index.html)が使えるかもしれない……？（未確認）\n\nしかし、ConoHaではdeprecatedなv1 APIのみ提供されているので、互換性の面で死ぬかもしれません。\n[一応v2も動いている](https://dns-service.tyo1.conoha.io/)ようですが、不完全なようですし、そもそもundocumentedです。\n\n### Lexiconを使う\n\n様々なDNSサービスを1つのCLIから使えるようにしたソフトウェアが[Lexicon](https://github.com/AnalogJ/lexicon)です。\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n便利なので使ってください。pipさえあればGetできます。\nこんな具合に使えるかと思います。\n\n```\n$ pip install dns-lexicon\n\n$ lexicon conoha\nusage: lexicon conoha [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                      [--priority PRIORITY] [--identifier IDENTIFIER]\n                      [--log_level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                      [--output {TABLE,TABLE-NO-HEADER,JSON,QUIET}]\n                      [--auth-region AUTH_REGION] [--auth-token AUTH_TOKEN]\n                      [--auth-username AUTH_USERNAME]\n                      [--auth-password AUTH_PASSWORD]\n                      [--auth-tenant-id AUTH_TENANT_ID]\n                      {create,list,update,delete} domain\n                      {A,AAAA,CNAME,MX,NS,SOA,TXT,SRV,LOC}\n\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef create narusejun.com A --name local --content 127.0.0.1\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef list narusejun.com A\nID                                   TYPE NAME                CONTENT   TTL\n------------------------------------ ---- ------------------- --------- ----\n42929801-5111-41d5-a115-9f67a1d07810 A    local.narusejun.com 127.0.0.1 3600\n```\n\n詳しくは[公式のドキュメント](https://github.com/AnalogJ/lexicon)を読んでください。\nLet's EncryptのDNS-01を自動化するやり方も紹介されていますよ！\n\n## Let's EncryptのDNS-01チャレンジを自動化する\n\nせっかくAPIでDNSレコードを操作できるわけですし、活用したいですね！\n\n最近[ワイルドカード証明書が取れるようになった](/posts/23/)Let's Encryptと連携してみましょう。\nちなみに、ワイルドカード証明書はDNS-01チャレンジでしか取得できません！\n\n### LexiconとDehydratedを使う\n\n先ほど紹介したlexiconと、ACMEクライアント[Dehydrated](https://github.com/lukas2511/dehydrated)を組み合わせるやり方がlexiconの作者さんによって紹介されています。\n\nhttps://blog.thesparktree.com/generating-intranet-and-private-network-ssl\n\n### Legoを使う\n\n2つのソフトウェアを連携させるのは面倒ですし、できればパパッとコマンド1つで証明書取りたいですよね？\nそこで、Go製のACMEクライアント[lego](https://github.com/xenolf/lego)を使いましょう！\nlegoでは、いろんなDNS-Providersが提供されていて、対応しているDNSサービスならすぐに証明書を発行できます。\n\n[lego](https://github.com/xenolf/lego)\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n[バイナリが入手可能](https://github.com/xenolf/lego/releases)なほか、goがインストールされているなら`go get`ですぐに入手できます。\nこういう感じで使います。とっても便利ですよ！\n\n```\n$ go get -u github.com/xenolf/lego/cmd/lego\n\n$ lego dnshelp\nCredentials for DNS providers must be passed through environment variables.\n\nValid providers and their associated credential environment variables:\n        conoha:         CONOHA_REGION, CONOHA_TENANT_ID, CONOHA_API_USERNAME, CONOHA_API_PASSWORD\n\nAdditional configuration environment variables:\n        conoha:         CONOHA_POLLING_INTERVAL, CONOHA_PROPAGATION_TIMEOUT, CONOHA_TTL, CONOHA_HTTP_TIMEOUT\n\n$ export CONOHA_REGION=tyo1\n$ export CONOHA_TENANT_ID=0123456789abcdef0123456789abcdef\n$ export CONOHA_API_USERNAME=gncu01234567\n$ export CONOHA_API_PASSWORD=xxxxxxxxxxx\n$ lego --dns conoha --server https://acme-staging-v02.api.letsencrypt.org/directory --email cert@narusejun.com --domains narusejun.com --domains *.narusejun.com run\n2018/12/21 02:44:58 [INFO] [narusejun.com, *.narusejun.com] acme: Obtaining bundled SAN certificate\n2018/12/21 02:44:59 [INFO] [*.narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/wcYZJB5aWmfi4WzGuwv2JlSaYjryGf67zqES8h8bmEg\n2018/12/21 02:44:59 [INFO] [narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/gwXBvxvuHk7TrUYbuu3MWp7heVoLTTle7Nh2ng98b74\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Authorization already valid; skipping challenge\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Preparing to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] acme: Trying to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] Checking DNS record propagation using [1.0.0.1:53]\n2018/12/21 02:45:00 [INFO] Wait [timeout: 1m0s, interval: 2s]\n2018/12/21 02:45:37 [INFO] [narusejun.com] The server validated our request\n2018/12/21 02:45:38 [INFO] [narusejun.com, *.narusejun.com] acme: Validations succeeded; requesting certificates\n2018/12/21 02:45:39 [INFO] [narusejun.com] Server responded with a certificate.\n\n$ openssl x509 -in ~/.lego/certificates/narusejun.com.crt -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            fa:78:5b:6e:73:74:37:e6:c4:36:54:82:02:04:d2:7e:bd:0b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN = Fake LE Intermediate X1\n        Validity\n            Not Before: Dec 20 16:45:40 2018 GMT\n            Not After : Mar 20 16:45:40 2019 GMT\n        Subject: CN = narusejun.com\n        X509v3 extensions:\n            X509v3 Subject Alternative Name:\n                DNS:*.narusejun.com, DNS:narusejun.com\n```\n\n……と、サクッとワイルドカード証明書が取れてしまいました。すごい！便利！\n\n上の例はstaging環境から証明書を取得しているので、マネする際はご注意ください！\n詳しくは、例によって[公式ドキュメント](https://github.com/xenolf/lego)をごらんください。\n\n### traefikを使う\n\n[traefik](https://docs.traefik.io/)は強いL7ロードバランサみたいなものです（ざっくりとした説明）。\nLet's Encryptから自動で証明書を取る機能がついてるんですが、この機能は内部で先述したlegoを利用しています。\n\n[traefik](https://docs.traefik.io/)\n\n……ということは、**ConoHa DNSに対応**しています！\n詳しい説明は省きますが、[公式ドキュメント](https://docs.traefik.io/configuration/acme/)を参考に設定してみてください。\nちゃんとConoHa DNSと連携して動作することを確認済みです。\n\n## おわりに\n\n紹介したソフトウェア以外にも、LexiconやLegoを内部で使ってる系ソフトが実はConoHaに対応してるパターンがいっぱいあるかもしれません。このソフトでもConoHa DNS使えたよ！とかあったら教えてください。\nちなみに、[Caddy](https://caddyserver.com/)というHTTPサーバが[Legoの全DNSプロバイダに対応しそう](https://caddy.community/t/poll-we-can-end-dns-provider-plugins-should-we/4887)だったりするので、そしたらConoHaも使えるようになりますね！\n\n----\n\nConoHaのDNS、めっちゃ便利なので使いましょう。\nAPIでレコードいじれるし、ゾーン数がいくつあっても無料ってマジ！？神じゃん。\n\nあっ、ボクのパソコン見てください。\n\nhttps://twitter.com/sekai67/status/1053444090757435392\n\nhttps://twitter.com/sekai67/status/1053598421414596608\n\nhttps://twitter.com/sekai67/status/1053441437126127616\n","title":"ConoHaのDNSをAPIから操作する話","image":null,"tags":["API","ConoHa","DNS","Let's Encrypt","アドベントカレンダー"],"date":"2018-12-21T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}