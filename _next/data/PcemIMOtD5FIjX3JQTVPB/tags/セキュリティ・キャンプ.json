{"pageProps":{"tag":"セキュリティ・キャンプ","entries":[{"type":"article","slug":"9","body":"行ってきました。\nセキュリティキャンプに応募した話もあります↓\n\n[セキュリティキャンプに応募した話](/posts/3/)\n\nなんか微妙に日が空いてしまったので最初の方とかもう空覚えなんですが、思い出しながら。\n\n# 一日目\n\n海浜幕張から5分位歩いてクロスウェーブ幕張に到着。\nなんかTwitterみてるとクソ早くに到着して付近散策してらっしゃる参加者さんもいましたが、\nまぁ普通に定刻に付けば大丈夫そう。\n\n![](1.jpg)\n\n会場入りしたら名刺交換タイムでした。\n強そうな人たちから次々と「名刺交換して頂けませんか」と声をかけられます＞＜\n\nhttps://twitter.com/security_camp/status/762848234498699264\n\nで、お昼を食べたり開講式でありがたいお言葉を頂いたりして、講義です。\n\n## セキュリティ基礎\n\nいきなりグループディスカッションです。自己紹介をしつつ、「セキュリティ・キャンプ応募フォームの問題点」を考えました。\n\nhttps://twitter.com/security_camp/status/762909216008867840\n\n## 特別講演「ZENIGATAになりたくて」\n\nめっちゃ面白かったです。\nCyberDefenceとICPOはなんで協力関係にあるのか？みたいな話から、\nICPOのサイバー部門の仕事について、そして「技術」とは何かみたいなお話。\nなんかこのお話を聞けただけでもキャンプに来た甲斐があった気がします。\n\n「CTFでBinaryができる人は大抵Webもできるが、逆はない」とおっしゃられていたのが刺さりました＞＜\n精進します。。。\n\nhttps://twitter.com/security_camp/status/762912661927407616\n\n## 特別講演「サイバー犯罪の実態とこれに対処するための取組」\n\nサイバー犯罪に対する警察の取組みについて。\nこういう分野に関して警察が何やってるのかって、なかなか表に出てこないので、目からウロコでした。\nあと間仁田さんの話し方が面白いです。\n\nhttps://twitter.com/security_camp/status/762928020537483264\n\n# 2日目\n\nいよいよ専門講座！\n\n## [1,2-E] TLS徹底演習\n\nTLSとは何か、TLSは何故必要なのか、といったお話から始まりました。\n**徹底**演習の名の如く、これ以上ないくらい詳しく解説して頂きました。\n\nで、TLSのハンドシェイクはどんな物なのかを一つ一つ見ながら、簡単な演習を行いました。\nペアになって手でTLSのハンドシェイクを作ってメッセージ交換したり、\n間に人を挟んで人力MITM攻撃をしてみたり、楽しかったです。\n\nこの講義は集中講義なので丸一日を使うのですが、\n午後に入った段階で漸く「TLSを理解する**準備**」に入るので、ちょっとビビりました。\nTLSは多くの要素技術を組み合わせてやっと成り立つものらしいので、徹底的に解説するには時間がかかるのも納得です。\n\n理解する準備が終わったら、実際にNode.jsで最新の暗号方式ChaCha20-Poly1305の実装を行いました。\nコレ、つい2ヶ月前に仕様化が完了したばかりの本当に最先端の技術なので、こんな講義を受けられる場所はここしかない！そうです。\n\n大津先生は「どうせ誰も演習を最後まで終えられないだろう」と仰っていましたが、\nボクはNode.jsがスキなので楽しくサクサク演習を進めて、あと1題(!)で終わるトコロまできたのですが、残念ながらタイムアップ。\n大津先生は何故か安堵されていました(笑)\n\nhttps://twitter.com/security_camp/status/763175036786049025\n\n講義の資料は先生がWebにアップしてくださっていますので、以下から見れます。\n\n[こちら](https://speakerdeck.com/shigeki/tlsche-di-yan-xi)\n\n## CTF\n\n待ちに待ったCTF！\nセキュリティに興味を持ったきっかけがCTFなので、もうコレが一番の楽しみでした。\n\nhttps://twitter.com/sekai67/status/763312140350480384\n\nボクらE4gleJumpもガンバるよ！\n\n19:00からの予定でしたが、機材トラブルで30分ほど遅れてのスタート。\nこういうイベントでは（特にネットワーク関係の）機材トラブルがあるあるですね。\n\nhttps://twitter.com/security_camp/status/763325426198466560\n\nこのCTF、「はいコレ、RaspberryPiで動いてるサーバね」ってIPアドレス渡されて放り出されます。\nなんか、この時点でもうだいぶ困惑してるチームもあったようです。\n\n幸いボクらのチームにはRaspiのプロ👏がいたので、\n彼が開始即ポートスキャンでSSHが空いてることを突き止め、\nRaspiのデフォルトユーザとパスワードで一瞬にしてFLAG入手キメててビビりました。\n（SSHでログインできないと次に進めないので、けっこうツラかったですね。）\n\nボクはまぁ、例によってWeb問をチマチマいじってました。\nベーシックなXSSと、PHPのプロトコルラッパーを悪用する問題を解きました。\n後で聞いたところ、どこかに任意コード実行の脆弱性が仕込まれてたようなんですが、全く分からず詰み。\n\nボクがWebで無駄に足掻いてる最中にも、チームのプロ👏各位によってPPCとかCryptoがバシバシ解かれて……\n\nhttps://twitter.com/security_camp/status/763353399806955525\n\n講師チームを除けば**1位**でした。\n（途中までは真に1位だったのに……あと1問解けば……ちょっと悔しいです）\n\nhttps://twitter.com/sekai67/status/763362094003609600\n\n賞状をいただきした。\n副賞としてNTTデータさんからQuoカードも頂きました。\n\nhttps://twitter.com/security_camp/status/763520642503151616\n\n# 3日目\n\n## [3-A] Webアプリケーションの脆弱性の評価と発見\n\n脆弱性を探すときにどんなトコロに注目すべきかを教えていただき、\nその後サイボウズオフィスの旧バージョンから実際に脆弱性を探してみるなどしました。\n見つけた脆弱性の評価方法なども、大変ためになりました。\n\nhttps://twitter.com/security_camp/status/763533821081899008\n\n## [4-C] オンラインゲーム アタック＆ディフェンスチャレンジ\n\n運営チームとプレイヤーチームに分かれて、運営はチート対策、プレイヤーはRMTをガンバる競技です。\n2試合あったのですが、事前アンケートでNodeそこそこ触ってますって回答したせいか1回目も2回目も運営でした。\n\nマップ上に湧くカエルを捕まえて経験値を稼いでレベルを上げるっていうシンプルなオンラインゲームです。\nレベルを上げてRMTするとプレイヤーの得点になります、ゲームを安定運用すると運営の得点になります。\n\n1回目はゲームに予め仕込まれていたバグの修正が遅れて、プレイヤーにやりたい放題されてしまいました。（かなしい）\n大差をつけられてしまったので、2回戦に向けて自動BANスクリプトを書くなどしていました。\n\n2回目、満を持して自動BANスクリプトを投入したのですが、どうも不調でRMTの疑いのないアカウントまでBANしてしまい大幅減点を食らう。（ごめんさない）\n仕方がないので、プレイヤーの自動化スクリプトを阻止すべく全ての動作に1秒の遅延を入れてレベルアップ効率を大幅に下げる作戦に出ました。\nコレが功を奏してRMTは減速、見かけ上安定した運営がなされて結果勝てたんですけど、プレイヤーからめっちゃ叩かれました。\n（現実のオンラインゲームでも運営はしばしばプレイヤーに叩かれてますよね……）\n\nチームで協力して問題を対処していく感じがとても楽しかったですね！\n\nhttps://twitter.com/security_camp/status/763629287173873664\n\n## [5-A] サーバ運用におけるパスワード管理\n\nディスカッションが主でした。\n大学のサークルが所有するサーバを管理したりしてるので、いろいろ勉強になりました。\nディスカッションって苦手なのですけど、自分が思いもしなかったような見方があったりして、いろいろ発見があります。\n\nhttps://twitter.com/security_camp/status/763690313210736640\n\n# 4日目\n\n## [6,7-E] インフラセキュリティブートキャンプ\n\nTerraformを使ってAWS上にシステムを構築してみる演習です。\nAWSはEC2とS2くらいしか使ったことがなかったんですが、VPCを使ったりELBを使ったり……途中めちゃめちゃ詰まりましたがなんとか構築できました。\nTerraformはJSONでシステムの構成を記述してコマンド一発で構築しちゃおうってノリのソフトなんですが、（使いこなせれば）めっちゃ強いなと思いました。\n\nコレも集中講義なんですが、午後はちょっと趣向を変えてDockerでいろんなOSSを走らせてみたりだとか、\nAWS Lambdaを使ってサーバレスアーキテクチャを体験してみたりだとか。\n\n手を動かす部分が多くて楽しかったです。\n\nhttps://twitter.com/security_camp/status/763927629346906112\n\n## グループワークの準備\n\n**闇 of 闇**\n\n一応グループワークの準備時間が毎日1～2時間くらいあったんですが、\n足りるはずもなく毎年恒例（らしい）徹夜進捗会に突入です。\n\nhttps://twitter.com/sekai67/status/764074021973471232\n\nなんかうちのグループは深夜4時位まで議論してました。\n議論し過ぎて話が広がりすぎて全員が分けわからなくなった結果、まとまりのない感じの主張になってしまいました……（反省）\n\n# 5日目\n\n## 起床トラック\n\n毎日ちょこちょこチューターさんに起こされる参加者さんがいたそうですが、\nボクは大丈夫ですよ！もちろん5日目を恥を晒すようなことはしていません！寝てないからね！（白目）\n\n## グループワーク発表\n\nみなさんクオリティが高い＞＜\n個人的に一番おもしろいなぁと思ったのは「一対三」さんのYouTuberの話です。\n\nhttps://twitter.com/security_camp/status/764280337169981440\n\n## 成果発表\n\nいきなり指名されたのでかなりキョドりました。（すみません）\nTLS徹底演習について簡単に説明したのですが、あの講義のスゴさを1割も伝えられなかった……\n\nhttps://twitter.com/security_camp/status/765064661205004290\n\n## おわり\n\n閉講式で修了証書をもらって、記念撮影をしておしまいです。\n5日間、あっという間でした。\n\n記念撮影の掛け声が「がんばるぞい！」だったの、一体なんなんでしょうね（すっとぼけ）\n\nhttps://twitter.com/security_camp/status/764694544092794881\n\n閉講式後、技術書がたくさんもらえます。\n魅力的な本がたくさんあったのですが、受け取る順番を決めるクジで**最下位**を引いたために、残念ながら欲しい本を手に入れることができず。\nロビーでもらったばかりの本を持ち寄ってサイン会が開かれているのを遠目に見てました……。\n\nhttps://twitter.com/security_camp/status/764662954834796544\n\nあ、キャンプ中は飲料水のペットボトルが（ほぼ）無限に配布され、至る所に転がっているんですが、\nボクはその余りをバックに入る限り詰め込んで持ち帰ってきました。（害悪）\n\n# 振り返って\n\nなかなか他ではできない経験ができましたし、参加できて良かったです。\n\nセキュキャンはいいぞ\n\n## もらったもの一覧\n\n![](2.jpg)\n","title":"セキュリティ・キャンプ全国大会2016に行った","image":null,"tags":["CTF","セキュリティ","セキュリティ・キャンプ","参加記"],"date":"2016-08-17T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"3","body":"しました。\n\n# セキュリティ・キャンプ\n\nわりと昔から知ってたんですけど、セキュリテイに特段興味があったわけじゃなかったので、ふーんってカンジだったんですけど、\n去年の末にCTFを始めてから、セキュリティ興味あるある！ってなったので、今年はじめて応募してみた次第です。\n\n# 結果\n\nhttps://twitter.com/sekai67/status/742559409730027521\n\nなんか微妙な気持ち。\n他の参加者さんを見てると、知識や気概が自分よりはるかにあって、スゴイなーって。\nわりと軽いキモチで応募した自分なんかが入って良いのだろーか、みたいな。\n\nそんなことを言ってますが、なんだかんだ言って嬉しいです。\nせっかくセキュキャンに行くからには、**ガチ**でガンバリます。\n↓の応募用紙を見直してて勉強不足を痛感しましたし、精進します。\n\nということで、末席に名を連ねる運びと相成りましたが、どうぞよろしくお願い致します。\n\n# 応募用紙\n\nどんなことを書いたのか、晒します。（恥ずかしい。。。）\n\n## 共通問題1\n\n1. あなたが今まで作ってきたものにはどのようなものがありますか？いくつでもいいので、ありったけ自慢してください。\n2. それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\n3. 開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\n\nそのまま書くとアレなので、抜粋。\n\n- プログラミングはゲームを作りたくて始めたよ\n  - ゲームたくさん作ったよ\n  - HSPプロコンで入賞したりしたよ\n- U-20プロコンで賞をもらったよ\n- ソシャゲの情報を勝手に収集して公開するWebサービスを作ったよ\n  - クローラはJava、DBはMySQL、フロントはPHPだよ\n  - 月間15万PVくらいあるよ\n- 大学のサークル向けのクローズドなSNSを作ったよ\n  - サーバはnode.jsでSocket.ioで通信するよ\n  - SAML IdPになって他のサービスと連携できるようになってるよ\n  - クライアントはHTML/JSで書いて、いわゆるハイブリットアプリにてラクしたよ\n- OSSプロジェクトにちょっとだけコード投げてるよ\n\nみたいな事を書いた。\n\n## 共通問題2\n\n1. あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？(例えば、C言語プログラムを複数ファイルに分割する方法)\n2. また、その壁を乗り越えるために取った解決法を具体的に教えてください。 (例えば、知人に勧められた「〇〇」という書籍を読んだ)\n3. その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\n\n抜粋。\n\n- ドキュメントが充実してないライブラリ的なを使うのが辛かった\n- ググっても情報が手に入らないし、もう全部ソース読むわ\n  - ソース読んだら中身がメッチャよくわかるし神（それはそう）\n- 困ったらソース読もう\n  - ソース読んだらそのプロジェクトにContributeもできる！！！楽しい！！！！！\n\n## 共通問題3\n\nこれ、自分が思うに **一番大事な設問** な気がします。\n_強いけど学ぶ意欲が見られない人_ と _強くはないけどメッチャやる気のある人_ だったら、後者が通るだろうなぁ、って。\nその学ぶ意欲的なものをアピールするのがココなので。。。\n\nかく言う自分の書いたヤツ、微妙。。。\nなんか他の人が上げてるヤツ、ヤバい。まず分量が桁違い。\nなんでボク通ったんだろうか。\n\n### (1)あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？(複数可) そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\n\n> 「クラウドセキュリティ基礎」や「サーバ運用におけるパスワード管理」を初めとする、ネットワーク、Web系の講義に最も興味があります。\n> 先に述べたような、Webアプリケーションを作ったり、CTFコンテストに参加したりして、脆弱な実装は本当に怖いということを身を持って感じました。\n> そこで、セキュアなアプリケーションを作れるように、どのような攻撃手法が存在し、防ぐにはどうすればよいかを詳しく知っておきたいです。\n> また、「ID連携基礎」にも興味があります。実際に複数のアプリケーションでID連携をするソフトウェアを制作したのですが、\n> 直接パスワードなどを扱う部分であるため、本当に気をつけて実装しなければならないと感じ、認証技術についてより詳しく知らなければならないと思いました。\n> また、「人工知能とセキュリティ」にも興味があります。私は人工知能の研究にも興味があったのですが、それとセキュリティを関連付けて考えたことがありませんでした。\n> そのため、人工知能とセキュリティについて、知ることができれば、今後人工知能を扱うときに参考になるかと思いました。\n> また、「オンラインゲームアタック＆ディフェンスチャレンジ」や「スマートフォン向けゲームのセキュリティ」にも興味があります。\n> 私はこういったゲームでよく遊ぶのですが、こうしたゲームで散見されるチート行為、それがどのように行われ、運営者はそれをどのように見つけているのか、ずっと疑問に思っていました。\n> また私は大学のサークルでゲーム制作をしているので、オンラインのゲームを作る際に不正をどうやって取り締まればよいのか知っておきたいと思いました。\n\n\n### (2)あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？(複数可) 自由に答えてください。\n\n> 「今少し知っている」知識を深めることもそうですが、「今ほとんど知らない」分野の知識についても、出来る限り獲得したいと思っています。\n> セキュリティの分野で活躍するには、ある特定の分野にだけ長けているのでは対応しきれないと思っていて、\n> もちろん自分の得意な分野を極めるのもそうですが、様々な関連分野の知識を持ち、\n> そうした広い分野についての知識を持っておくことで、何をするにしても広く視野を持つことができるような人間になりたいと思います。\n> セキュリティ・キャンプに参加することで、そうしたセキュリティのエキスパートへの第一歩を踏み出せればと思います。\n> また、同じ分野に興味を持つ同年代の人と知り合える数少ない機会であるので、人脈を作ることもできればと思っています。\n\n### 選択問題2\n\n    Googleは、自社のサービスのセキュリティを高めるために様々なことを行っています。\n    ブラウザからGoogleの検索サービス( https://www.google.co.jp/ )にアクセスを行い、どのようなセキュリティ施策が行われているかを見つけなさい。\n    ブラウザは任意のもので構いません。ブラウザのどういった点からどういった施策を行っていると判断できるのか、その理由も含めてできるだけ多くの項目を回答してください。\n    拡張機能を利用しても構いませんが、ブラウザ以外の方法でアクセスしてはいけません。\n\n間違ってそう。\n\n> Chromeでアクセスするとまず目につくのは、アドレスバーに表示される緑色の鍵マークです。\n> クリックして詳細を表示すると、「安全なTLS接続」と表示されますが、\n> これはTLSを用いた接続を行っており、通信が正しく暗号化されていることを示しています。\n> また同時に「有効な証明書」と表示されますが、これはサーバー証明書の検証に成功し、\n> このコンテンツは確かにGoogle社のサーバーから提供されたものであることを示しています。\n> またスマートフォン版のChromeから見ると、「証明書の透明書に関する有効な情報がサーバーから提供されました」と表示され、\n> これはCertificateTransparencyという技術で、これはGoogleのサーバが提示した証明書が不正な証明書でないことを表しています。\n> また、「ECDHE_ECDSA」が鍵交換に使用されている旨が表示されますが、\n> ECDHEには前方秘匿性があり、サーバの持つ秘密鍵が万が一流出したとしても、過去の通信記録からその内容が暴かれることがなくなります。\n> またECDSAは、一般的なRSAと比べると同じセキュティレベルを得るために必要な鍵の長さが短いとされており、より安全性が高いと考えられます。\n> FirefoxでTLS証明書を見ると、署名アルゴリズムに「SHA-256」を利用しており、これは古い方式SHA-1に比べハッシュ衝突に対する高い耐性を持ちます。\n> また、Firebugなどの拡張機能を用いて通信を見ると、「X-Frame-Options: SAMEORIGIN」ヘッダが送信されているのがわかり、\n> これによって、フレームを利用しててこのページを別のサイトに組み込むことが出来ず、クリックジャッキングを防ぐことが出来ます。\n> また「X-XSS-Protection: 1; mode=block」ヘッダが送信されており、これによってブラウザのXSS対策機能を有効化しており、これによりある程度のXSSを防止することが出来ます。\n> また「Content-Type: text/html; charset=UTF-8」のようなヘッダで文字コードが指定されており、レガシーなブラウザを標的としたUTF-7 XSS攻撃も対策されています。\n> HTMLソースを表示すると、埋め込まれたJSコードも含め、圧縮（難読化）されているのがわかり、攻撃者にページ構造を理解させない措置とも見ることが出来ます。\n\n### 選択問題4\n\n    突然だが、RH Protocolで用いられるRHパケットのフォーマットを以下に示す。なおRH Protocolは実在しないプロトコルであり、その内容について特に意味は無い。\n    (略)\n    添付するバイナリは、とあるRHストリームのうち片方向のみを抽出したものである。\n    このバイナリストリームを読み込み、1つのRHパケットが以下の条件のすべてにマッチするときに標準出力に文字列\"PASS\"、 それ以外の場合は\"REJECTED\"と表示するCもしくはC++のプログラムを記述し、実行結果と共に提出せよ。\n    また、マッチングにかかるCPUサイクル及びメモリ使用量を計測し記載した場合、評価に加味する。\n    (略)\n\nごちうさ。\n\nなんかボクの書いたやつ、ミスってる気がする。\n応募用紙上げてる人の出力結果と一致してない……オワタ……ってなってた。\n（結局わからず）\n\n```C\n#include <iostream>\n#include <string>\nusing namespace std;\n\n/* データの長さ */\n#define MAGIC_LENGTH 2\n#define SRC_LENGTH   20\n#define DST_LENGTH   20\n\n/* RH Packet 構造体 */\ntypedef struct {\n    string Magic;\n    string Source;\n    string Destination;\n    int DataLength;\n    string Data;\n} Packet;\n\n/* 文字列を小文字に */\nstring toLower(string in){\n    for(int i = 0; i < in.length(); i++){\n        in[i] += ('A' <= in[i] && in[i] <= 'Z' ? 32 : 0);\n    }\n    return in;\n}\n/* 16進数のcharを１０進数のintに */\nint hexToDec(char a){\n    return '0' <= a && a <= '9' ? a - '0' : a - 'a' + 10;\n}\n/* ストリームから1byte分のデータを読む */\nchar readByte(){\n    char buf, buf2;\n    while(cin >> buf){\n        if(('0' <= buf && buf <= '9') || ('a' <= buf && buf <= 'f')){\n            cin >> buf2;\n            return 16 * hexToDec(buf) + hexToDec(buf2);\n        }\n    }\n    return -1;\n}\n/* ストリームからintを読む */\nint readInt(){\n    int val;\n    for(int i = 3; i >= 0; i--){\n        char byte = readByte();\n        if(byte == -1){\n            return -1; /* 標準入力が終端に達しているとき-1を返す */\n        }\n        ((char*) &val)[i] = byte;\n    }\n    return val;\n}\n/* ストリームから文字列を読む */\nstring readString(int length){\n    char bytes[length + 1];\n    for(int i = 0; i < length; i++){\n        bytes[i] = readByte();\n    }\n    bytes[length] = '\\0';\n    return bytes;\n}\n/* ストリームからパケットを読む */\nPacket readPacket(){\n    Packet p;\n    p.Magic = readString(MAGIC_LENGTH);\n    p.Source = readString(SRC_LENGTH);\n    p.Destination = readString(DST_LENGTH);\n    p.DataLength = readInt();\n    p.Data = readString(p.DataLength);\n    return p;\n}\n\n/* パケットの正当性確認 */\nbool checkPacket(Packet p){\n    return\n    /* Condition 1 */\n    ( p.Magic == \"RH\" ) &&\n    /* Condition 2 */\n    ( toLower(p.Source) == \"rise-san\" ||\n      toLower(p.Source) == \"cocoa-san\" ) &&\n    /* Condition 3 */\n    ( toLower(p.Destination) == \"chino-chan\" ||\n      toLower(p.Destination) == \"chino\" ) &&\n    /* Condition 4 */\n    ( toLower(p.Source) != \"cocoa-san\" ||\n      toLower(p.Destination) != \"chino\" ) &&\n    /* Condition 5 */\n    ( p.Data.find(\"BlueMountain\") != string::npos ||\n      p.Data.find(\"Columbia\") != string::npos ||\n      p.Data.find(\"OriginalBlend\") != string::npos ) &&\n    /* Condition 6 */\n    ( p.Data.find(\"DandySoda\") == string::npos &&\n      p.Data.find(\"FrozenEvergreen\") == string::npos ) ;\n}\n\nint main(){\n    while(!cin.eof()){\n        Packet p = readPacket(); /* 1パケットを読む */\n        if(p.DataLength == -1){\n            break; /* 読み込みができていないとき */\n        }\n        cout << (checkPacket(p) ? \"PASS\" : \"REJECTED\") << endl; /* パケットを確認 */\n    }\n    return 0;\n}\n```\n\n出力結果\n>PASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\n\n### 選択問題6\n\n    IDとパスワードを入力したユーザの認証を行うWebアプリがあります。\n    あなたがこのアプリに対してセキュリティテストを行う場合、まず、どのようなテストをしますか？\n    なぜそのテストを選択したのか、その背景や技術的根拠と共に記載してください。\n    アプリの内部で使われている技術やシステム構成に、前提を置いても構いません。\n\nなんか応募する直前にksnctfをやってたので、ksnctfの問題にあった脆弱性をてきとうに挙げました(ﾉ≧ڡ≦)\n（ひどい）\n\n> まず、適当なURL、「./user.db」「./accouts.sqlite3」などにアクセスを試みます。\n> SQLite3を使用したシステムの場合、このようなデータベースファイルへ外部からアクセスできるようになっている場合、ユーザーの情報が簡単に盗まれてしまいます。\n>\n> 次に、ログインフォームに「'」や「\"」といった文字列を入力し挙動を見たり、、パスワードに「' OR '' = '」のような文字列を入力してログイン出来ないか調査します。\n> サーバーがデータの格納にSQLを使用しており、SQLで意味のある文字を適切にエスケープしていない場合、このようなSQLをインジェクション攻撃によって、\n> 不正にデータを書き換えたり、秘匿なデータを盗み出したり、パスワードを知らずともログインできたり、パスワードがハッシュ化されていても平文を求めることができてしまいます。\n>\n> 次に、スクリプトを用いて高頻度のログインリクエストを送信します。\n> 高頻度のリクエストに対して、Captchaのような画像認証をはじめとするBOT対策がなされていないと、ブルートフォース攻撃に晒される可能性があります。\n>\n> 次に、「password」のようなパラメータ名が設定されているフォームに対し、「password[]」のようなパラメータでリクエストを送信します。\n> サーバがPHPで実装されており、strcmpのような関数と曖昧な比較演算子(==)でパスワード比較がされていると、これでパスワード認証を突破される可能性があります。\n>\n> 次に、ユーザの入力したデータが再び表示されるようになっていないかを確認します。（パスワードが間違っていた場合、ユーザー名が予め入力されているなど）\n> このような機能がある場合、&lt;script&gt;タグでコードを埋め込めるようになっていないかを確認します。\n> 適切にエスケープされていない場合、XSS攻撃でCookieなどを盗まれる可能性があります。\n>\n> 次に、セッション情報のCookieがどのような形で渡されているのかを確認します。\n> Cookieにユーザー識別情報が乗せられていて、MD5のような脆弱なハッシュ関数で署名されていた場合、書き換えられる可能性があります。\n> また、署名の作り方によっては、LengthExtension攻撃などによって認証を突破される可能性があるので、この攻撃も試行します。\n\n### 選択問題11\n\n    2015 年に発行された CVEの内、あなたが興味を持った\"サーバに存在した\"脆弱性について１つ提示してください。\n    その脆弱性を悪用した攻撃を検知する方法について詳細に記述してください。また、興味を持った理由を記述してください。\n    CVE番号:CVE-2015-◯◯◯◯\n\n\n> 私が興味を持ったのは、CVE-2015-8669です。\n> この脆弱性は、phpMyAdminの古いバージョンに存在し、/libraries/config/messages.inc.phpという、\n> UI文字列情報が格納され、他のphpファイルからインクルードされることを想定したファイルに直接アクセスすることで引き起こされます。\n> このファイルに直接アクセスすることによって、本来は別のphpファイルで定義されるはずの関数が定義されておらず、\n> それを呼び出してしまうことで、スクリプトのフルパス情報を含むエラーメッセージを出力してしまうというものです。\n>\n> [攻撃を検知する方法]\\\n> HTTPサーバのアクセスログを確認することによって、容易に検知することが出来ます。\n> 攻撃を受けた場合、/libraries/config/messages.inc.phpへのアクセスが記録されます。\n> また、エラーログには実際に攻撃者に表示されたものと同じメッセージが記録されており、ここからも検知が出来ます。\n>\n> 実際のログ\\\n> 127.0.0.1 - - [30/May/2016:00:51:02 +0900] \"GET /phpmyadmin/libraries/config/messages.inc.php HTTP/1.1\" 200 266 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\"\\\n> [Mon May 30 00:51:02.871439 2016] [:error] [pid 8968:tid 1836] [client 127.0.0.1:52477] PHP Fatal error:  Uncaught Error: Call to undefined function PMA_fatalError() in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php:14\\nStack trace:\\n#0 {main}\\n  thrown in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php on line 14\\\n>\n> [興味を持った理由]\\\n> まず、phpMyAdminは自分がよく利用するプロダクトの一つであったからです。\n> 次に、この脆弱性では、（サーバの設定によっては）ブラウザから当該のURLにリクエストを送るだけで成立してしまうなど、比較的簡単に攻撃が成立するのが面白いと思いました\n> また、これはベンダの発表文書でも述べられていたことですが、PHPの設定自体が適切にされていれば攻撃は成立せず、\n> この設定（display_errors = off）はテスト用サーバー以外では普通は設定されるものであり、\n> また仮に攻撃が成立したとしても、その被害はさほど大きなものでなく（phpMyAdminが設置されるパスが漏れるだけ）、\n> 私は一瞬「大した脆弱性ではないのではないか」と思ってしまいましたが、\n> こうして大々的に記録されているところを見て、このようにどんな小さな脆弱性であっても、それが大きな攻撃の糸口とならないよう、\n> 常に注意していくべきなのだなと、考えを改めさせられました。\n> このように、自分のセキュリティに対する意識にも関わるものであったため、このCVEに興味を持ちました。\n","title":"セキュリティ・キャンプ2016に応募した","image":null,"tags":["日記","セキュリティ・キャンプ","セキュリティ"],"date":"2016-06-15T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}