{"pageProps":{"tag":"ISUCON","entries":[{"type":"article","slug":"30","body":"NaruseJunチームでISUCON11予選に出ました。\n\n- チームメンバー[^team]\n\t- [@to_hutohu](https://twitter.com/to_hutohu)\n\t- [@takashi_trap](https://twitter.com/takashi_trap)\n\t- [@sekai67](https://twitter.com/sekai67)\n- 結果\n\t- スコア: [919720](https://isucon.net/archives/56021246.html)\n\t- 本戦に行ける！🎉🎉\n\t\t- ココ最近のNaruseJunチームは追試失敗率が高く[^fail]て、2年間本戦に行けていませんでした。悲願達成感があります。\n\n[^team]: 全員が今年出題の[東京工業大学デジタル創作同好会traP](https://trap.jp/)のOBです。\n[^fail]: 運営サイドにも[定評のある](https://twitter.com/sora_h/status/1429334456616189957)失敗率。\n\n## やったこと\n\n- NaruseJunチームは基本的に個々人が勝手に改善を突っ込んていくスタイル\n\t- 担当範囲などはあえて決めておらず、全員アプリを触るしインフラもいじる\n\t- ミドルウェアの設定、アプリコード、デプロイスクリプトが全部入った[リポジトリ](https://github.com/narusejun/isucon11-qualify)を使った\n\t\t- それぞれローカルで作業、ブランチを切ってリモートにプッシュ、サーバ上でプルしてデプロイ、といった動き\n\t\t\t- ローカルではテストしない（環境まわりでハマるのは時間の無駄なので）\n\t\t\t- 3人で別々に動いているので、声掛けでサーバの占有権を取ってベンチを投げ、それで動作確認する感じ\n- 初動だけは担当作業を決めていた\n\t- to_hutohu: マニュアル読み込み\n\t- takashi_trap: リポジトリ、デプロイスクリプト周りの準備\n\t- sekai67: 環境立ち上げ、計測ツール類準備\n\t\t- 細かいツールの導入などはすべてansibleで行う\n\t\t\t- [最初の変更](https://github.com/narusejun/isucon11-qualify/commit/6b74fb20740ca5fa31070d7763437d3867e6f063)をリポジトリに入れてデプロイするまで **17分**\n\t\t\t\t- 最初の動きをよく詰めておいたので、スムーズに改善へ移れた\n- 計測結果を元に改善ポイントを見つけた\n\t- **「推測するな、計測せよ」**\n\t- pprof, [fgprof](https://github.com/felixge/fgprof), [alp](https://github.com/tkuchiki/alp), [pt-query-digest](https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html), [netdata](https://github.com/netdata/netdata) を見ていた\n\t\t- pprofは基本的にFlame Graphだけ見れば大体わかる\n\t- [pprotein](https://github.com/kaz/pprotein)というツールを作って、使った\n\t\t- pprof, alp, pt-query-digestのデータをサーバから収集し、Webブラウザ上で表示できるようにしたもの\n\t\t\t- 過去の計測結果を見れたり、チーム内で計測結果を見ながら相談できたりするので便利\n\t\t- こういうツールを作るのが最近流行ってそう\n\t\t\t- https://twitter.com/_tsuzu_/status/1429064558203731973\n\t\t\t- https://diary.hatenablog.jp/entry/2021/08/22/175403\n\t\t- pproteinはいまのところオープンソースなので、ご活用ください\n\t\t\t- ただしREADMEは書いてない\n- 以下2点の理由から、15時過ぎから新たな改善を入れるのをほぼストップし、追試対策など安全に通過するための戦略に切り替えた（前年の反省）\n\t- 80万点に到達した15時時点で、次点は10万点代、大多数が10万点未達という状況であったこと\n\t- 特定の状況下（http2のGOAWAYハンドリングミス[^goaway]）でベンチマーカーがエラーになり、場合によってはスコアなしになる可能性が残っていたこと\n\t\t- 競技中、これがこちら側のミスであるか、運営側のミスであるかを判断できなかった[^clar]ため、念の為修正を行う判断に至ったが、結果としては不要だった\n\n[^goaway]: 詳細については[予選結果](https://isucon.net/archives/56021237.html)の「不具合について」を参照。\n[^clar]: 競技中に質問を行い「ベンチマーカーのバグである」との回答を頂いてはいましたが、チーム内での議論の結果、必ずしもそうとは言えないのではないかという結論になりました。\n\n### こぼれ話\n\n- 14:30〜15:10まで、コミットするたびに点数が指数関数的に増加した\n\t- あまりにも上がるし、自分たちの想像以上に上がるので、けっこう驚いていた\n\t\t- 運営さんもかなり驚いたたようで、「ベンチマーカーの実装がバグっている可能性がある」として個別で改善方法を確認されました\n\t\t\t- 結果としてバグではなかったのでハッピーエンド\n\t\t- 点数が上がるたびにバグの疑念が強まり、[ベンチマーカー実装担当](https://twitter.com/ryoha000/status/1429097219391574024)の顔がどんどん曇っていったらしい\n\n![](score.png)\n\n### 具体的な改善内容\n\n- だいたい時系列順\n- 初期スコア: 2000くらい\n\t- 改善後スコアは必ずしも当該の改善のみが寄与しているわけではないので注意\n\n#### `isu_condition` テーブルにインデックスを貼る\n\n- 時間: 10:40\n- スコア: 19000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895\n- 根拠\n\t- pt-query-digest結果から。この時点での合計クエリ時間上位2つがこれだった\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp` desc limit ?\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by timestamp desc\n\t```\n\n#### `/api/trend` で返すデータを 0.5 秒ごとに作るようにする\n\n- 時間: 11:10\n- スコア: 26000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0\n- 根拠:\n\t- pprofのFlame Graphから。getTrendで発行してるSELECTに時間がかかっている[^pprof]。\n\n[![](fg1.png)](fg1.png)\n\n[^pprof]: 次項のFlame Graphと見比べるとgetTrendがすっかり見えなくなっていることがわかります。\n\n#### `isu_condition` テーブルを水平分割 + ログを出さない\n\n- 時間: 12:20\n- スコア: 42000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765\n\t\t- UUIDを使って振り分け先のサーバを決定して、そのサーバから読み書きする。\n\t\t- トランザクションが邪魔なので、消す。よく読むと、トランザクションなしでも正常に処理できることが分かる。\n- 根拠\n\t- alpから。POST `^/api/condition/.+$`の合計時間が大きい。GETもそこそこ大きい。\n\t- pprofのFlame Graphから。getIsuConditions/postIsuConditionsが重い。\n\n[![](fg1.png)](fg1.png)\n\n#### iconをDBにつっこむのをやめてファイルに書き出す\n\n- 時間: 12:50\n- スコア: 52000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4\n\n#### 微調整\n\n- 時間: 13:30\n- スコア: 64000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca\n\t\t- あえてtrendを返すのを遅くして、ユーザー数の増加を抑える。\n\t- https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30\n\t\t- DBを3台から2台に減らして、appへよりCPU時間を配分する。\n- 根拠\n\t- netdata等から。appとDBが同居しているサーバでCPU使用率がほぼ100%なのに対して、DBのみが動くサーバではまだ余裕があったため。\n\n#### backendを複数台に\n\n- 時間: 14:00\n- スコア: 72000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7\n\t\t- appを3台にして、postIsuConditionのみを複数台で処理させる。\n- 根拠\n\t- netdata等から。appサーバからDBを剥がしてもまだCPU使用率が100%だったため。\n\n#### getIsuConditionsFromDBの高速化\n\n- 時間: 14:30\n- スコア: 107000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564\n\t\t- Generated Column追加、SQLでLIMITする。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t  ```\n\t  select * from `isu_condition` where `jia_isu_uuid` = ? and `timestamp` < ? order by `timestamp` desc\n\t  ```\n\t- pprofのFlame Graphから。getIsuConditionsFromDBの圧倒的存在感。。。\n\n[![](fg3.png)](fg3.png)\n\n#### `postIsuCondition` バルクインサート + postIsuCondition全受理\n\n- 時間: 14:40\n- スコア: 158000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680\n\t- https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3\n\n#### nginx調整\n\n- 時間: 14:50\n- スコア: 295000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a\n\t\t- getIsuGraphを3台処理に変更、nginx-backend間通信のkeepalive化。\n- 根拠\n\t- netdata等から。1台目のappサーバがキツそうだったのと、その割にほか2つがヒマそうだったので。\n\n#### getTrend調整\n\n- 時間: 15:00\n- スコア: 346000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52\n\t\t- 意図的にtrendを返すのを遅くしていたところを少しだけ早くしてユーザー数を増やす。\n\n#### グラフ作成時の取得データ量を減らす\n\n- 時間: 15:00\n- スコア: 631000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686\n\t\t- WHERE句にtimestampの範囲で絞る条件を追加。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp`\n\t```\n\n#### nginx調整\n\n- 時間: 15:10\n- スコア: 836000〜932000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a\n\t\t- nginxとappが同居してる場合はnginx-app間通信をunix domain socket経由に\n\t- https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41\n\t\t- nginx-app間のkeepaliveコネクション数調整\n\n#### 微調整\n\n- 時間: 16:00〜17:00\n- スコア: 1010000〜1173984(ベストスコア)\n- パラメータをいろいろ調整してた\n\t- MySQL設定\n\t- nginx設定\n\t- getTrend待ち時間\n\n#### 最終\n\n- 時間: 17:00〜\n- スコア: 988417(最終スコア)\n- http2のGOAWAY問題[^goaway]でベンチマークがまれに失敗する問題の対応\n\t- 安全に追試をパスできるように少し性能を落とした\n\n## おわり\n\n運営の皆さんありがとうございました。\n","title":"ISUCON11予選に参加した","image":null,"tags":["ISUCON","インフラ","参加記"],"date":"2021-08-23T00:00:00.000Z","updated":"2021-08-22T19:00:52.000Z"},{"type":"article","slug":"28","body":"ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。\n\nボク、[@sekai67](https://twitter.com/sekai67)はNaruseJunチームの一員として出場しました。結果はこう。\n\n- 予選では、本選出場圏内の点数を取って余裕をカマしていましたが、追試をパスできずに予選落ち。\n- 本選では、[本選ライブ](http://isucon.net/archives/55063136.html)の企画で、並行チームとして問題に取り組ませてもらう。\n\t- 競技中最高得点 **52567** を記録するものの、追試をパスできず記録なし。伝統芸能\n\nこれは記念写真です。\n\n![](score.png)\n\nまあ追試で落ちてるんですけどね！\n\n参加記はチームメイトの[@to_hutohu](https://twitter.com/to_hutohu)と[@takashi_trap](https://twitter.com/takashi_trap)が書いてくれると信じて、ボクはちょっとしたこぼれ話を書いていきます。\n\n## やらかしリスト\n\n予選、本選どちらにおいても、思い返すとまあいろいろやらかしたんですが、今回は興味深かった2つを抜粋して掘り下げます。\n\n- 予選時、再起動試験を5回ぐらいして、追試落ちは絶対ない状態まで持っていったのに無事追試落ちした話\n- 本選開始後、初手でサーバの1台を使い物にならなくしてチームメイトを困惑させた話\n\n## 予選の追試で落ちた\n\n### 経緯\n\n予選では、チームメイトの2人がわりとギリギリまでアプリ実装のバグ取りを詰めていたので、ボクが1人で再起動試験や後片付けを担当することになりました。\n去年も再起動後に正しく動作させることができずに予選落ちしていますので、今年こそは！と念入りに何度も行っていました。\n\n5回ほど再起動してもOK、再起動後にもデータも正しく引き継がれている。絶対落ちないだろコレは！！！\nと自信満々で競技を終えたわけですが、結果発表でチーム名が呼ばれることはありませんでした……\n\n夜中、凹みつつも競技で使ったサーバの様子を見に行ってみると……\nDBサーバが落ちてるやんけ！！！！！なんで？？！？！？？！？？！！！\n\n### 理由\n\napparmorのポリシー(mysql-serverパッケージに入ってる`/etc/apparmor.d/usr.sbin.mysqld`)が生きていて、systemdがmariadbの起動を検知できておらず、`systemctl stop`相当の処理がかかったため。\n\nUbuntuで、最初にmysqlが動いている状態から、これをmariadbに置き換えると起動しなくなるという事例があります。\nこちらの記事が詳しいです。\n\n[Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない](/posts/24/)\n\n## 疑問1: mariadbに入れ替えたときにto-hutohuが`aa-remove-unknown`でポリシーを消したのでは？\n\n先ほど紹介した記事を書いたのはボクです。ですので、もちろんこの挙動については知っていました。\n上記記事で紹介されている対策法をもちろん講じています。\n\nが、これはそもそも恒久対応ではありませんでした……！\nわかりにくい書き方でゴメンナサイ。\n\n先の記事で言及している、\n\n> /etc/apparmor.d/usr.sbin.mysqldは空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。\n> また、systemctl reload apparmorしても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。\n\nここの理解が曖昧、あるいは間違っています。\n\nポリシーがOSを再起動しても消えない原因は、apparmorのポリシーキャッシュのせいで、`/etc/apparmor.d/cache/usr.sbin.mysqld`が存在して、かつ`/etc/apparmor.d/usr.sbin.mysqld`よりタイムスタンプが新しい場合、キャッシュのほうが読み込まれるという挙動をします。\n\n- `/etc/apparmor.d/cache/usr.sbin.mysqld`が作成されるのは、mysql-serverインストール時。\n\t- つまりタイムスタンプは → `Sep 11 11:34`\n- `/etc/apparmor.d/usr.sbin.mysqld`のタイムスタンプは、mariadbパッケージが作成された時。\n\t- つまりタイムスタンプは → `Jul 20 10:50`\n\nですので、`/etc/apparmor.d/usr.sbin.mysqld`が更新されたにも関わらず、キャッシュのほうがずっと読み込まれ続けてしまうのでした……！\n\n正しい対応は、`systemctl reload apparmor`でした。\nこれでキャッシュのflushが走り、正しくmariadbに起動するようになります。\n\n例の記事については、そのうち書き換えておきますね……\n\n### 疑問2: sekaiが再起動試験を行ったときにうまく動作していたのは何故？\n\n再起動後15分以内にのみ試験していたからです。\n\nAppArmorのせいでmariadbに起動に失敗するというのは、厳密に言うと、 **mariadbは起動に成功しているんだけどsystemdがそれを検知できていない** ということ。\nsystemdは一定時間（デフォルトで15分）以内にサービスの起動を確認できないと、ご丁寧にExecStopを走らせてくれるのです……！\n\nsekaiが再起動したのは **11:39:26 UTC** ごろ。\n\n```\n-- Reboot --\nSep 12 11:39:26 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 11:39:32 s2 mysqld[1244]: 2020-09-12 11:39:32 139768179551360 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1244 ...\nSep 12 11:45:11 s2 systemd[1]: Stopped MariaDB 10.1.44 database server.\n-- Reboot --\n```\n\n11:45:11にStopしてるのは、このあともう一度再起動試験したためです。\n\nこの付近のkern.logは以下。\n\n```\nSep 12 11:39:35 s2 kernel: [   42.180656] audit: type=1400 audit(1599910775.956:18): apparmor=\"DENIED\" operation=\"sendmsg\" info=\"Failed name lookup - disconnected path\" error=-13 profile=\"/usr/sbin/mysqld\" name=\"run/systemd/notify\" pid=1244 comm=\"mysqld\" requested_mask=\"w\" denied_mask=\"w\" fsuid=111 ouid=0\n```\n\nsd-notify失敗してるので、この時点でもAppArmorのポリシーが生きています。\nsystemdはこのときずっとmariadbが上がってくるのを待っている状態です。\nただし、mariadb自体は起動しているので、アプリへのリクエストは通る状態です。\n（sekaiのこの状態でずっと再起動試験をしていたわけです。バカですねえ。）\n\n一方で、運営による再起動が行われたと思われる時刻(14:20:38 UTC つまり 23:20:38 JST)付近のログは以下のとおり。\n\n```\n-- Reboot --\nSep 12 14:20:38 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 14:20:42 s2 mysqld[1100]: 2020-09-12 14:20:42 140238334753920 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1100 ...\nSep 12 14:35:41 s2 systemd[1]: mariadb.service: Start operation timed out. Terminating.\nSep 12 14:35:43 s2 systemd[1]: mariadb.service: Failed with result 'timeout'.\nSep 12 14:35:43 s2 systemd[1]: Failed to start MariaDB 10.1.44 database server.\n```\n\n15分立ったのでmariadbがshutdownされたと思われます。\n以下は`/var/lib/mysql/error.log`です。\n\n```\n2020-09-12 14:35:41 140238333712128 [Note] /usr/sbin/mysqld: Normal shutdown\n2020-09-12 14:35:41 140238333712128 [Note] Event Scheduler: Purging the queue. 0 events\n2020-09-12 14:35:41 140236692629248 [Note] InnoDB: FTS optimize thread exiting.\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Starting shutdown...\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool\n2020-09-12 14:35:43 140238333712128 [Note] InnoDB: Shutdown completed; log sequence number 3710056674\n2020-09-12 14:35:43 140238333712128 [Note] /usr/sbin/mysqld: Shutdown complete\n```\n\n実際にアプリにリクエストが来たのは、15:03:13 UTCでした。\n\n```\nSep 12 14:20:45 s1 isuumo[903]: ⇨ http server started on [::]:1323\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\n```\n\nこのとき、もうmariadbはshutdown済みなので、当然アプリは動かないわけですね……\n\n## 開始後即サーバを破壊\n\n### 経緯\n\n本選始まって直後の話。\n\nNaruseJunチームでは、Makefileをタスクランナー的に使っていて、[ここ](https://github.com/narusejun/isucon10-final/blob/master/Makefile)にデプロイコマンドを書いていました。\nsekaiがアプリにpprofを埋め込んだコードをプッシュし、サーバ上にデプロイしようとして`make deploy`を叩いたところ、なぜか途中で`sh: Command not found`のエラーが出てmakeが終了しました。\n\nアレ？`sh`って存在しないんだっけと思い、今度は`ls -l /usr/bin/sh`を実行してみると、今度は`bash: /usr/bin/ls: No such file or directory`が……\nここで全てを悟ります。これ、シェル組み込みのコマンド以外、全て使えなくなってるな……？\n\n心当たりがないわけではありませんでした。3人共、ある会話が頭をよぎりました……\nあれは予選時のことです――――\n\n> sekai「ミドルウェアの設定ファイルなども、リポジトリに含めてしまって、デプロイ時にrsyncで配置するようにしませんか？」\\\n> takashi「rsyncですか？どうやってやるんですか」\\\n> sekai「コマンド一発でできますよ。[こう](https://github.com/narusejun/isucon10-qualify/blob/master/Makefile#L50)ですね」\n\n```\n$ ls files\netc/       home/      lib/\n$ sudo rsync -r files/ /\n```\n\n> takashi「**これってもともとサーバ上にあるファイルが消えたりしませんか？**」←ここフラグ\\\n> sekai「大丈夫ですよ。ほら、追加したファイルだけ更新されてるでしょ？」\n\n予選では確かに、このコマンドでうまくデプロイできていました。\nですので、本選でも同じように設定ファイル類を配置しようとしていました。\n\nしかしながら、事実、サーバが壊れました。何故でしょう……\nこのときのログはこうでした。\n\n```\n〜〜〜略〜〜〜\nmake[1]: Leaving directory '/home/isucon/isucon10-final/app/webapp/golang'\nsudo rsync -v -r s1/ /\nsending incremental file list\ndeploy.sh\nskipping non-regular file \"etc/mysql/my.cnf\"\netc/envoy/config.yaml\netc/mysql/debian-start\netc/mysql/debian.cnf\netc/mysql/my.cnf.fallback\netc/mysql/mysql.cnf\netc/mysql/conf.d/mysql.cnf\netc/mysql/conf.d/mysqldump.cnf\netc/mysql/mysql.conf.d/mysql.cnf\netc/mysql/mysql.conf.d/mysqld.cnf\netc/systemd/system/envoy.service\netc/systemd/system/xsuportal-api-golang.service\netc/systemd/system/xsuportal-web-golang.service\nhome/isucon/env\nlib/\nlib/systemd/\nlib/systemd/system/\nlib/systemd/system/mysql.servicesent 11,952 bytes  received 375 bytes  24,654.00 bytes/sec\ntotal size is 10,449  speedup is 0.85\nsh s1/deploy.sh\nmake: sh: Command not found\nmake: *** [Makefile:54: start] Error 127\n```\n\nう〜ん、`--delete`オプションも付けてないし、このログを見ても特におかしくないしなあ。\n本選時はそう思っていました。\n\nここを詳しく調査する時間がもったいないので、運営にサーバをリセットしてもらい（ご迷惑おかけしました……）、とりあえず危険なMakefileは使用禁止として競技に戻りました。\n\n### その後\n\n競技は無事(?)終了し、翌日。ちゃんと調査しました。\n\nさて、件のログをよ〜く見ると、なんだかヤバそうなところが見つかりますね！？\n\n正解は`lib/`とだけ書いてある行です。\nこれは、rsyncによって`lib/`というディレクトリ、今回は宛先が`/`なので、要は`/lib`が作成されたという意味です。\nんん？？それはマズくないか？？？？？\n\nマズいです。コマンドがほぼ使えなくなったのは、間違いなく`/lib`にある共有ライブラリなどが消滅したからでしょう。\n\nでも、予選時はちゃんと動いていたんです。じゃあなんで？？？\n\n答えは、Ubuntuのバージョン違いにありました。\n予選では18.04、本選では20.04です。各バージョンでのルートディレクトリがどうなっているかと言うと……\n\n18.04では、こう。\n\n```\n# ls -l /\ntotal 64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:17 bin\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 home\ndrwxr-xr-x   8 root root 4096 May 23  2017 lib\ndrwxr-xr-x   2 root root 4096 Sep 21 17:16 lib64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 media\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 mnt\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 opt\ndr-xr-xr-x 174 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 21 17:17 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 run\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 sbin\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 21 17:17 tmp\ndrwxr-xr-x   1 root root 4096 Sep 21 17:14 usr\ndrwxr-xr-x   1 root root 4096 Sep 21 17:17 var\n```\n\n一方で20.04では……？\n\n```\n# ls -l /\ntotal 48\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 home\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root   10 Sep 25 01:20 libx32 -> usr/libx32\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 media\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 mnt\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 opt\ndr-xr-xr-x 171 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 25 01:23 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:34 run\nlrwxrwxrwx   1 root root    8 Sep 25 01:20 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 25 01:23 tmp\ndrwxr-xr-x   1 root root 4096 Sep 25 01:20 usr\ndrwxr-xr-x   1 root root 4096 Sep 25 01:23 var\n```\n\nアッ……（完全に理解）\n\nUbuntu 20.04では、`/lib`は通常のディレクトリではなく、`/usr/lib`へのシンボリックリンクでした！\nrsyncでは、デフォルトではシンボリックリンクの先がディレクトリであっても、それを辿ってその先にコピーをしたりしません。\nソース側のディレクトリでそのまま上書きして、もとのリンクは消してしまうんですね……！\n\n### 教訓\n\nこの悲劇を回避するには、rsyncの`--keep-dirlinks`というオプションを使うべきでした。\n以下、`man rsync`より引用です。\n\n> -K, --keep-dirlinks\n>     This option causes the receiving side to treat a symlink to a directory as though it were a real directory, but only if it matches a real directory from the sender. Without this option, the receiver's symlink would be deleted and replaced with a real directory.\n>     For example, suppose you transfer a directory lqfoorq that contains a file lqfilerq, but lqfoorq is a symlink to directory lqbarrq on the receiver. Without --keep-dirlinks, the receiver deletes symlink lqfoorq, recreates it as a directory, and receives the file into the new directory. With --keep-dirlinks, the receiver keeps the symlink and lqfilerq ends up in lqbarrq.\n\nちょうどボクが踏んだ罠について言及されています。\nrsyncは気をつけて使います……\n\n## おしまい\n\nISUCONは学びが多い。\n\nあと、予選で雑にmysqlの全テーブルをMEMORYストレージエンジンにしたらメモリが完売してSSHできなくなって焦るなどの事件もありました。\n（運営に再起動してもらって事なきを得ました。）\n","title":"ISUCON10 やらかしリスト","image":null,"tags":["AppArmor","ISUCON","systemd","インフラ","参加記"],"date":"2020-10-04T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"}]},"__N_SSG":true}