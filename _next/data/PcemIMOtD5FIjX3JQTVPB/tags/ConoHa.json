{"pageProps":{"tag":"ConoHa","entries":[{"type":"external","url":"https://qiita.com/sekai/items/b5e5e05da2dfe6ff1bf3","publisher":"Qiita","title":"Name Service SwitchでConoHaインスタンスのIPアドレスを引く","tags":["Qiita","アドベントカレンダー","ConoHa","NSS","インフラ"],"date":"2019-12-19T22:00:46.000Z"},{"type":"article","slug":"25","body":"この記事は[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)の21日目の記事です！\n\n[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)\n\n# ConoHaの[DNS API](https://www.conoha.jp/docs/)は便利\n\nという話を[2年前](/posts/14/)にもしたのでした。\n\n[2年前の記事](/posts/14/)\n\n皆さん、ConoHaのDNS API使ってますか？\nLet's EncryptのDNS-01チャレンジの自動化にも使える！のでイケてますね。\n\n## APIクライアントについて\n\nさて、ではどうやってAPIを叩くか？\n先に紹介した記事の要旨は「ConoHa DNS用 APIクライアント 作った」なんですが、あまりにも使い辛いので無視します。\n\n### Designateクライントを使う\n\nConoHaのDNSは[OpenStack Designate](https://docs.openstack.org/designate/latest/)を使っているようです。多分。API体系がソレっぽいので。\n\nなので、[Designateのクライアント](https://docs.openstack.org/python-designateclient/latest/cli/index.html)が使えるかもしれない……？（未確認）\n\nしかし、ConoHaではdeprecatedなv1 APIのみ提供されているので、互換性の面で死ぬかもしれません。\n[一応v2も動いている](https://dns-service.tyo1.conoha.io/)ようですが、不完全なようですし、そもそもundocumentedです。\n\n### Lexiconを使う\n\n様々なDNSサービスを1つのCLIから使えるようにしたソフトウェアが[Lexicon](https://github.com/AnalogJ/lexicon)です。\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n便利なので使ってください。pipさえあればGetできます。\nこんな具合に使えるかと思います。\n\n```\n$ pip install dns-lexicon\n\n$ lexicon conoha\nusage: lexicon conoha [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                      [--priority PRIORITY] [--identifier IDENTIFIER]\n                      [--log_level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                      [--output {TABLE,TABLE-NO-HEADER,JSON,QUIET}]\n                      [--auth-region AUTH_REGION] [--auth-token AUTH_TOKEN]\n                      [--auth-username AUTH_USERNAME]\n                      [--auth-password AUTH_PASSWORD]\n                      [--auth-tenant-id AUTH_TENANT_ID]\n                      {create,list,update,delete} domain\n                      {A,AAAA,CNAME,MX,NS,SOA,TXT,SRV,LOC}\n\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef create narusejun.com A --name local --content 127.0.0.1\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef list narusejun.com A\nID                                   TYPE NAME                CONTENT   TTL\n------------------------------------ ---- ------------------- --------- ----\n42929801-5111-41d5-a115-9f67a1d07810 A    local.narusejun.com 127.0.0.1 3600\n```\n\n詳しくは[公式のドキュメント](https://github.com/AnalogJ/lexicon)を読んでください。\nLet's EncryptのDNS-01を自動化するやり方も紹介されていますよ！\n\n## Let's EncryptのDNS-01チャレンジを自動化する\n\nせっかくAPIでDNSレコードを操作できるわけですし、活用したいですね！\n\n最近[ワイルドカード証明書が取れるようになった](/posts/23/)Let's Encryptと連携してみましょう。\nちなみに、ワイルドカード証明書はDNS-01チャレンジでしか取得できません！\n\n### LexiconとDehydratedを使う\n\n先ほど紹介したlexiconと、ACMEクライアント[Dehydrated](https://github.com/lukas2511/dehydrated)を組み合わせるやり方がlexiconの作者さんによって紹介されています。\n\nhttps://blog.thesparktree.com/generating-intranet-and-private-network-ssl\n\n### Legoを使う\n\n2つのソフトウェアを連携させるのは面倒ですし、できればパパッとコマンド1つで証明書取りたいですよね？\nそこで、Go製のACMEクライアント[lego](https://github.com/xenolf/lego)を使いましょう！\nlegoでは、いろんなDNS-Providersが提供されていて、対応しているDNSサービスならすぐに証明書を発行できます。\n\n[lego](https://github.com/xenolf/lego)\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n[バイナリが入手可能](https://github.com/xenolf/lego/releases)なほか、goがインストールされているなら`go get`ですぐに入手できます。\nこういう感じで使います。とっても便利ですよ！\n\n```\n$ go get -u github.com/xenolf/lego/cmd/lego\n\n$ lego dnshelp\nCredentials for DNS providers must be passed through environment variables.\n\nValid providers and their associated credential environment variables:\n        conoha:         CONOHA_REGION, CONOHA_TENANT_ID, CONOHA_API_USERNAME, CONOHA_API_PASSWORD\n\nAdditional configuration environment variables:\n        conoha:         CONOHA_POLLING_INTERVAL, CONOHA_PROPAGATION_TIMEOUT, CONOHA_TTL, CONOHA_HTTP_TIMEOUT\n\n$ export CONOHA_REGION=tyo1\n$ export CONOHA_TENANT_ID=0123456789abcdef0123456789abcdef\n$ export CONOHA_API_USERNAME=gncu01234567\n$ export CONOHA_API_PASSWORD=xxxxxxxxxxx\n$ lego --dns conoha --server https://acme-staging-v02.api.letsencrypt.org/directory --email cert@narusejun.com --domains narusejun.com --domains *.narusejun.com run\n2018/12/21 02:44:58 [INFO] [narusejun.com, *.narusejun.com] acme: Obtaining bundled SAN certificate\n2018/12/21 02:44:59 [INFO] [*.narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/wcYZJB5aWmfi4WzGuwv2JlSaYjryGf67zqES8h8bmEg\n2018/12/21 02:44:59 [INFO] [narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/gwXBvxvuHk7TrUYbuu3MWp7heVoLTTle7Nh2ng98b74\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Authorization already valid; skipping challenge\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Preparing to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] acme: Trying to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] Checking DNS record propagation using [1.0.0.1:53]\n2018/12/21 02:45:00 [INFO] Wait [timeout: 1m0s, interval: 2s]\n2018/12/21 02:45:37 [INFO] [narusejun.com] The server validated our request\n2018/12/21 02:45:38 [INFO] [narusejun.com, *.narusejun.com] acme: Validations succeeded; requesting certificates\n2018/12/21 02:45:39 [INFO] [narusejun.com] Server responded with a certificate.\n\n$ openssl x509 -in ~/.lego/certificates/narusejun.com.crt -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            fa:78:5b:6e:73:74:37:e6:c4:36:54:82:02:04:d2:7e:bd:0b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN = Fake LE Intermediate X1\n        Validity\n            Not Before: Dec 20 16:45:40 2018 GMT\n            Not After : Mar 20 16:45:40 2019 GMT\n        Subject: CN = narusejun.com\n        X509v3 extensions:\n            X509v3 Subject Alternative Name:\n                DNS:*.narusejun.com, DNS:narusejun.com\n```\n\n……と、サクッとワイルドカード証明書が取れてしまいました。すごい！便利！\n\n上の例はstaging環境から証明書を取得しているので、マネする際はご注意ください！\n詳しくは、例によって[公式ドキュメント](https://github.com/xenolf/lego)をごらんください。\n\n### traefikを使う\n\n[traefik](https://docs.traefik.io/)は強いL7ロードバランサみたいなものです（ざっくりとした説明）。\nLet's Encryptから自動で証明書を取る機能がついてるんですが、この機能は内部で先述したlegoを利用しています。\n\n[traefik](https://docs.traefik.io/)\n\n……ということは、**ConoHa DNSに対応**しています！\n詳しい説明は省きますが、[公式ドキュメント](https://docs.traefik.io/configuration/acme/)を参考に設定してみてください。\nちゃんとConoHa DNSと連携して動作することを確認済みです。\n\n## おわりに\n\n紹介したソフトウェア以外にも、LexiconやLegoを内部で使ってる系ソフトが実はConoHaに対応してるパターンがいっぱいあるかもしれません。このソフトでもConoHa DNS使えたよ！とかあったら教えてください。\nちなみに、[Caddy](https://caddyserver.com/)というHTTPサーバが[Legoの全DNSプロバイダに対応しそう](https://caddy.community/t/poll-we-can-end-dns-provider-plugins-should-we/4887)だったりするので、そしたらConoHaも使えるようになりますね！\n\n----\n\nConoHaのDNS、めっちゃ便利なので使いましょう。\nAPIでレコードいじれるし、ゾーン数がいくつあっても無料ってマジ！？神じゃん。\n\nあっ、ボクのパソコン見てください。\n\nhttps://twitter.com/sekai67/status/1053444090757435392\n\nhttps://twitter.com/sekai67/status/1053598421414596608\n\nhttps://twitter.com/sekai67/status/1053441437126127616\n","title":"ConoHaのDNSをAPIから操作する話","image":null,"tags":["API","ConoHa","DNS","Let's Encrypt","アドベントカレンダー"],"date":"2018-12-21T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/334/","publisher":"東京工業大学デジタル創作同好会traP","title":"PrometheusでConoHa APIからメトリクスを取得してみる","tags":["traP","アドベントカレンダー","インフラ","ConoHa","監視","Prometheus"],"date":"2017-12-24T00:00:00.000Z"},{"type":"article","slug":"14","body":"作りました\n\n[ConoHa Advent Calendar 2016](http://qiita.com/advent-calendar/2016/conoha) 24日目の記事です。\n\n[ConoHa Advent Calendar 2016](http://qiita.com/advent-calendar/2016/conoha)\n\n# ConoHaのDNS\n\n[ConoHa](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)には無料で使えるDNS機能が用意されています。\nなぜか[機能一覧](https://www.conoha.jp/function/)には乗ってません。見落としてるだけだろうか。GeoDNSは書いてある。\n[料金](https://www.conoha.jp/pricing/)ページには**「ドメインのレコードを登録して使うことができるDNS機能を無料提供。」**って書いてありますね。\n\n# 使ってみる\n\n登録がまだの人は急いで登録しましょう。\n[ココ](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)から登録するとクーポンもらえますよ。\n**電話認証**を選択するのを忘れずに。\n\nとりあえず、ConoHaにログインしたらまず右上のメールアドレスをクリックしてメニューを開き、「アカウント設定 > 表示設定 > モード設定」で**”このはモード”**を選択します。\n\n![](1.png)\nあぁ＾〜\n\n左のメニューから「DNS」を開けば、こんなカンジでDNSが使えます。\n\n![](2.png)\n\nもちろん、ドメインのレジストラの方でネームサーバをConoHaの`ns-a*.conoha.io`にしないとダメですよ。\n\nそれだけ。\n\n# DNS API\n\nコレだけだとまぁわざわざConoHaのDNSを使わなくてもレジストラ標準のDNSでいいじゃん！ってなるんですが、\nConoHaのDNSの強みは**APIから設定を操作できる**点にあります。\n\nCLIクライアントの[python-designateclient](http://docs.openstack.org/developer/python-designateclient/)があるのでそれを使いましょう。\n\n……だと終わってしまうので、自分が使いやすいように作った[conoha-dns](https://github.com/kaz/conoha-dns)を紹介します。\n\n# conoha-dns\n\nnodejsからDNS APIを叩くために書いたコードの副産物的に作りました。\n\nObjectStorageのCLIクライアント[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)をリスペクトして\n- 認証情報をファイルに保存\n- シングルバイナリで動作\nするようになってます。\n\nAdC用に急ぎで作ったのでだいぶ作りが荒いです。\n問題が起きても責任は取れませんが、よかったら使ってください。\n\n[conoha-dns](https://github.com/kaz/conoha-dns)\n\n## 動作風景\n\nこういうかんじです。\n詳しい説明は[conoha-dns](https://github.com/kaz/conoha-dns)を見てね。\n\n```\n$ conoha-dns auth\nTenant ID: mytenantid\nAPI User: myusername\nPassword:\nOK\n\n$ conoha-dns add wataraijun.com\nid                                    name             ttl\n------------------------------------  ---------------  ----\nc8f8677e-742c-4ed6-9a53-de80d76571aa  wataraijun.com.  3600\n\n$ conoha-dns add www.wataraijun.com -t CNAME -d www.narusejun.com\nid                                    name                 type   ttl   data                priority\n------------------------------------  -------------------  -----  ----  ------------------  --------\nbb02410c-2761-4080-9b70-da7445fc714c  www.wataraijun.com.  CNAME  3600  www.narusejun.com.  null\n```\n\n## 感想\n\n- 見通しを立ててコード書くの難しい\n   - あとからいろいろ変えたらわけわからん設計になった\n- 同じコマンドで別のAPIを叩いてるのが気持ち悪いかもしれない\n   - python-swiftclientやconoha-ojsみたいに、`list`単体だとコンテナを一覧表示、`list hoge`だとコンテナの中身を一覧表示……みたいなイメージだったんだけど\n- Goはシングルバイナリで配布できる！とか持て囃されてるけどnodejsでもできるから！\n   - [nexe](https://github.com/nexe/nexe)というものを使います\n   - 一部動かないコードがあったり、nodeをまるごとコンパイルするのでクソ時間かかったりしますが……\n   - nodejs最高\n- ConoHaちゃんかわいい\n\n# 以上\n\nこのはちゃんが可愛すぎることを差し置いてもConoHaはめっちゃ良いサービスです。\nConoHa最高。\n\nサークルのブログにもConoHa関係の記事があります。\n[ConoHaでArchLinuxを動かすまで](https://trap.jp/post/39/)\n\n# 宣伝\n\n今年の冬コミ(C91)に技術系の合同誌を出します。\n\nトピックは\n- SQLインジェクション ([@N4RU5E](https://twitter.com/N4RU5E))\n- シェーダー(GLSL) ([@sobaya007](https://twitter.com/sobaya007))\n- 巡回セールスマン問題 ([@_n_ari](https://twitter.com/_n_ari))\n- LLVM ([@long_long_float](https://twitter.com/long_long_float))\n- ディープラーニング ([@to_huothu](https://twitter.com/to_huothu))\n\nの5つで200ページとなっております。\n角で殴られたら致命傷なカンジな厚さになってます。\n1000円です。\n\n**木曜日(1日目) 西地区“み”ブロック－18b**\n**「揚羽高校情報処理部」**\n\nでお待ちしています。よろしくお願いします！\n\n## 目次\n\n![](book1.png)\n![](book2.png)\n![](book3.png)\n","title":"ConoHaのDNS APIをCLIから叩くやつを作った","image":null,"tags":["アドベントカレンダー","ConoHa","DNS"],"date":"2016-12-24T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"8","body":"このはちゃんかわいい\n\nownCloud、便利なんですがファイルをVPS上に記録してるとConoHaはデフォで50GBしか使えないので辛い。\n\n増量しても良いんですけど、どうせなら容量単価の安いオブジェクトストレージに乗せられないか？というお話です。\n\n乗せられないか？というか、乗るんですけど。\n\n## ownCloudのインストール\n\n[公式](https://owncloud.org/install/)から落として設置してアクセスすれば初期設定画面になってあとはノリでなんとかなるので、\n特に書くこともないんですが、nginxを使ってる場合はキチンと設定しないとダメなので、そこだけ注意です。\n\n参考：[Nginx Configuration for the ownCloud 9.x Branches](https://doc.owncloud.org/server/9.1/admin_manual/installation/nginx_owncloud_9x.html?highlight=nginx)\n\n## オブジェクトストレージ上にファイルを置く\n\n[無制限ストレージ with 新しいConoHa Object Storage and ownCloud](http://qiita.com/ukitiyan/items/aaa1a2f3fe6e820007c0)\n\n↑みたいな、オブジェクトストレージをExternalStorageとして接続する方法もありますが、\nこれだとExternalStorageフォルダ外に置いたファイルが普通にローカルに記録されちゃうので、ちょっと微妙。\n\n全てのユーザがどこにファイルを置いてもオブジェクトストレージに置かれる方が好ましいです。\nということで、オブジェクトストレージをPrimaryStorageとして設定しましょう。\n\nConoHaのオブジェクトストレージの正体はOpenStack Swiftなので、ownCloudに最初から入ってる機能でなんとかなります。\n\nまず、予めコンテナを作成しておく必要があるのですが、ConoHaのオブジェクトストレージにはGUIがないので、コマンドラインツールでなんとかしましょう。\nとりえあず、pipを使える環境にしてから、\n\n```bash\n$ pip install python-swiftclient python-keystoneclient\n$ export OS_AUTH_URL=\"https://identity.tyo1.conoha.io/v2.0\"\n$ export OS_TENANT_NAME=\"[テナント名]\"\n$ export OS_USERNAME=\"[APIユーザ名]\"\n$ export OS_PASSWORD=\"[APIユーザPW]\"\n$ swift post \"[作成するコンテナ名]\"\n$ swift list\n```\n\nこんなかんじで、作成したコンテナ名が表示されればOKです。\n\nownCloudの初期設定を終えると、`config/config.php`が作成されるハズなので、このファイルに設定を追記します。\n\n```php\n$CONFIG = array (\n  ...\n\n  'objectstore' =>\n  array (\n    'class' => 'OC\\\\Files\\\\ObjectStore\\\\Swift',\n    'arguments' =>\n    array (\n      'serviceName' => 'Object Storage Service',\n      'url' => 'https://identity.tyo1.conoha.io/v2.0',\n      'region' => 'tyo1',\n      'tenantName' => '[テナント名]',\n      'username' => '[APIユーザ名]',\n      'password' => '[APIユーザPW]',\n      'container' => '[作成したコンテナ名]',\n    ),\n  ),\n\n  ...\n);\n```\n\nこれでOK。\n見た目はなんにも変わってないので設定できてるのか不安になりますが、\n適当なファイルをアップロードしてみてから、\n\n```bash\n$ swift list [作成したコンテナ名]\n```\n\nとやって`urn:oid:***`みたいなファイルが作成されていればOKです。\n\nこれで、ownCloud上の全てのファイルがオブジェクトストレージに置かれるようになります。\nこの設定をすると、今までローカルに保存していたファイルは参照できなくなってしまう（開こうとするとエラーになる）ので、\n運用中に切り替えるのは避けて、インストールした直後に設定を行うのがベターです。\n\n\n## かくして\n\n格安で大量のファイルを保存できる環境が手に入りました。やった！\n\nちなみに、CUIからオブジェクトストレージを操作するツールはOpenStack公式のpython-swiftclient以外にも、\nConoHaの中の人が作成されている[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)もあります。\n\n[conoha-ojs](https://github.com/hironobu-s/conoha-ojs)\n","title":"ownCloudをConoHaのオブジェクトストレージに乗せる","image":null,"tags":["ConoHa","OpenStack Swift","ownCloud"],"date":"2016-07-27T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"external","url":"https://trap.jp/post/39/","publisher":"東京工業大学デジタル創作同好会traP","title":"ConoHaでArchLinuxを動かすまで","tags":["traP","インフラ","ConoHa"],"date":"2016-02-25T00:00:00.000Z"}]},"__N_SSG":true}