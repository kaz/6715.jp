{"pageProps":{"tag":"クラウド","entries":[{"type":"article","slug":"19","body":"AzureのWindowsServerでVOICEROIDを動かします\n\n[前回](/posts/18/)の続きです。\n\n# あらすじ\n\n前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n今回は、クラウドサービス上（というか適当なサーバ）できりたんに働いてもらおうと思います。\n\n![](kiritan.png)\n\n# Microsoft Azure\n\nMicrosoft AzureのVirtual Machinesでは、WindowsServerのインスタンスを立ち上げることが出来ます。\nそのへんのWindows VPSサービスを比べるとちょっと割高な感じはします。（それはそう）\n\nなんかAzureではWindows Client（普通のWindows 10とか）も使えるっぽいんですが、\nMSDNサブスクリプションが必要とかでアレなので、今回はWindowsServerで行きます。\n\nぶっちゃけKVMベースのVPSサービスならWindowsが普通にインストールできるような気がしますが、\n契約関係で怖い人から怒られるので避けるのが無難です。\n\n~~学生なら、Microsoft Imagine(旧Dreamspark)からWindows Sever 2016のライセンスがタダでもらえるので、コレを使って自宅鯖を建てるのもアリかと思います。~~[^imagine]\n\n[^imagine]: Microsoft Imagineは終了したらしいです。\n\n## インスタンス作成\n\nAzure Portalから適当にインスタンスを作ります。\nインスタンスのサイズですが、メモリ0.75GBだとかなり厳しさがあるので1.75GBが最低ラインな感じがあります。\n\nあと、デフォルトだと鬼高いサイズしか表示されなくて焦るんですが、\n**サポートされるディスクの種類**を**SSD**にして、**全て表示**を押すとお手頃サイズが出てきます。\n\n![](1.png)\n\nボクは無料試用クレジットを使い切るために強めのインスタンスを建てました。\n\nインスタンスを作成したときに勝手に**ネットワークセキュリティグループ**というリソースが作成されており、\nこの設定を変えてポートを開けないとリモートデスクトップ接続(RDP)ができません。\n\n対象のネットワークセキュリティグループを開いて、**受信セキュリティ規則 → 追加**で設定画面を開き、\nサービスから**RDP**を選択して許可します。\n\n![](2.png)\n![](3.png)\n\nこのあとHTTPも使うので、ついでにHTTPを許可する設定も追加しておきましょう。\n先程と同様にして設定画面を開き、サービスから**HTTP**を選択して許可します。\n\n# サーバ設定\n\nWindowsServerを使う場合は、いろいろ設定が必要になります。\n普通のWindowsを使う場合は不要なものも多いので、軽く目を通す程度で。\n\n## RDP\n\nリモートデスクトップ接続(RDP)を使ったほうが色々便利なので、そうします。\nAzureだと、勝手にONになっているのでこの設定は不要です。\n\nサーバマネージャを起動して、**ローカルサーバ → リモートデスクトップ → このコンピュータへのリモート接続を許可する**にチェックを入れてOKを押します。\n\n![](4.png)\n\n## .NET Framework\n\n普通のWindowsだと必要になったときにダイアログが出てきて簡単にインストールできますが、\nWindowsServerだとそうはいきません。\n\nサーバマネージャを起動して、**管理 → 役割と機能の追加 → .NET Framework 3.5 Features**にチェックを入れてインストールします。\n\n![](5.png)\n\n## ファイアウォール\n\nこのあとHTTPをきりたんと通信するインタフェースとして使うので、`80/tcp`を開放します。\n\nサーバマネージャを起動して、**ローカルサーバ → Windowsファイアウォール → 詳細設定 → 受信の規則 → 新しい規則**\nで出てくるダイアログに従って、80番ポートを開放します。\n\n![](6.png)\n\n## IEの制限解除\n\nWindowsServerではデフォルトでIEが機能制限されているので、解除します。\nこの後Pythonをインストールしたりするときに問題があるためです。\n\nサーバマネージャを起動して、**ローカルサーバ → IEセキュティ強化の構成 → Administratorsグループ → オフ**にチェックを入れてOKを押します。\n今回はいろいろラクをするためにAdministratorで進めていきますが、一般ユーザで行う場合はUsersグループのセキュティ強化の構成をオフにしてください。\n\n![](7.png)\n\n# VOICEROIDのインストール\n\n普通にインストーラからインストールできます。\n1ライセンスで1PCにしかインストール出来ないので、注意しましょう。\n\n## ライセンス認証\n\nサーバ起動後、一度でもRDPで接続していると**ライセンス認証に失敗**するようになります。\n多分、ライセンス認証ドライバ（Sentinel LDK License Manager）がRDPを検知して爆発してるからです。\nRDPで繋ぐような環境で使うな！！！ってことっぽいのでちょっとグレーかもしれません……\n\n回避策として、RDPで繋ぐ前にきりたんを起動してしまいます。\n\n- 起動時に自動ログインさせる\n- ログイン時にきりたんを自動起動する\n\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`に以下の3つのキーを作成します。\n\n- AutoAdminLogon\n\t- DWORDで値は`1`\n- DefaultUserName\n\t- ログインするユーザ名\n- DefaultPassword\n\t- ログインユーザのパスワード\n\n![](8.png)\n\nこれで、起動時に勝手にログインするようになります。\n\n次に、スタートメニューを出して`gpedit.msc`を入力してエンターし、\n**ユーザの構成 → Windowsの設定 → スクリプト → ログオン**を開き、\nVOICEROIDのEXEファイルを指定します。\n\n![](9.png)\n\nこれで、ログイン後に自動でVOICEROIDが起動します。\n\nこれによって、サーバ起動時に勝手にログインしてきりたんが立ち上がります。\nかなり筋肉ソリューション感が強いですが、仕方がない＞＜\n\n## 起動時のエラー\n\nAzure上だとサウンドデバイスがないので、起動時にエラーが表示され、再生ボタンが押せなくなります。\n音声保存はできるので、今回は問題ありません。\n\n# PythonでVOICEROIDをサーバ化\n\n[前回](/posts/18/)PythonからVOICEROIDを操作できるようになったので、\nあとはHTTPからリクエストを受けて音声ファイルを返すようにするだけです。\n\nサーバへPythonとFFMPEGをインストールしておきましょう。\nGUIがあるので普通にやるだけです。かんたん。\n\n## やりました\n\n方針が定まったら書くだけ……\nflaskを使って書きました。\n\nVOICEROID操作のコードは[前回](/posts/18/)の記事を参照してください。\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`です\n\n```sh\npip install pypiwin32 flask\n```\n\n### コード\n\nhttps://github.com/kaz/kiritan-server/blob/aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448/server.py\n\n```python\n# coding: UTF-8\n\nimport flask\nimport subprocess\n\napp = flask.Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef get():\n\tr = flask.request\n\ttext = r.form['text'] if r.method == \"POST\" else r.args.get('text', None)\n\n\tif text == None:\n\t\treturn 'plz specify `text`'\n\n\tcompleted = subprocess.run(\n\t\t['python', 'talk.py', text],\n\t\tencoding='ascii',\n\t\tstdout=subprocess.PIPE,\n\t\ttimeout=30\n\t)\n\n\treturn flask.send_from_directory('./', completed.stdout.strip())\n\nif __name__ == '__main__':\n\tapp.debug = True\n\tapp.run(host='0.0.0.0', port=80)\n```\n\n## 注意\n\n一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。\n保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、\nスクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。\n\n手抜きです……\n\n# 次回予告\n\nということで、HTTPで好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。\nコレでブラウザさえあればきりたんボイスが聴けてしまうわけです。ああ＾～きりたんかわいい！！！！\n\n次回は、コイツを更に改造してきりたんボイスをライブストリーミングしてみる実験です。\n\n[クラウド東北きりたん その3 ～HLSでライブストリーミング～](/posts/20/)\n","title":"クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～","image":null,"tags":["VOICEROID","東北きりたん","クラウド","Azure","WindowsServer"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}