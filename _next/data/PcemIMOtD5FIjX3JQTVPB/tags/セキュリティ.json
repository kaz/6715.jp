{"pageProps":{"tag":"セキュリティ","entries":[{"type":"article","slug":"23","body":"Let's Encryptでワイルドカード証明書を発行してみました。\n\n# ワイルドカード証明書\n\n遂に……遂に来ましたね。\nLet's Encryptの**ワイルドカード証明書**が。\n\n[ACME v2 and Wildcard Certificate Support is Live](https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579)\n\n非常におめでたいです🎉\n\nこれで、サブドメインをたくさん切って運用してるサービスなんかの証明書の管理がグッとラクになりますね。\n\n# 早速取得してみる\n\n注意点としては、\n\n- ワイルドカード証明書はACMEv2エンドポイントからのみ発行できる\n- ワイルドカード証明書はDNS-01チャレンジでのみ発行できる\n\n公式の**Certbot**は0.22.0からACMEv2に対応しており、DNS-01チャレンジにも対応してます。\nDNS-01では、`_acme-challenge.example.com`のようなTXTレコードを作成してドメインの所有を確認します。\n\n## 手順\n\n適当にCertbot(certbot-auto)をインストールしたら、以下のようなコマンドを実行します。\n明示的にACMEv2エンドポイントとDNS-01チャレンジを指定する必要がります。\n\n```sh\ncertbot certonly \\\n--manual \\\n--preferred-challenges dns-01 \\\n--server https://acme-v02.api.letsencrypt.org/directory \\\n--domain *.kiritan.com\n```\n\nすると、以下のように「IP記録するけどいい？」って確認されます。\nDNS-01は、実際に証明書を使うサーバー以外からも発行が要求できるんですが、要求元のIPアドレスが記憶されるみたいです。\n\n```\n-------------------------------------------------------------------------------\nNOTE: The IP of this machine will be publicly logged as having requested this\ncertificate. If you're running certbot in manual mode on a machine that is not\nyour server, please ensure you're okay with that.\n\nAre you OK with your IP being logged?\n-------------------------------------------------------------------------------\n(Y)es/(N)o:\n```\n\n進むと、以下のようなレコードを設定しろと言われるので、設定します。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.kiritan.com with the following value:\n\nf4WTOGBdEhZF7aAx9mZof8X9072JVUKDR7FhmUlKiYo\n\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\n```\n\nボクは[ConoHa](https://www.conoha.jp/referral/?token=sp928CCbwhPZeu0SLEbeVyIhGOsIchLSzaun2yUbKWaR.q89860-OPA)のDNSを使っています。\n普通にWebブラウザからレコードを設定するのはもちろん、API経由で設定もできるので非常に便利です。\nあと、DNSサービス自体は無料です。ふとっばらですね。\n\nついでに宣伝↓\n\n[ConoHaのDNS APIをCLIから叩くやつを作った](/posts/14/)\n\nあと、AWSのRoute53みたいな有名サービスなら、プラグインが存在するので手軽にDNS-01による確認ができるみたいです。\n\n[Certbot Docs » User Guide » DNS Plugins](https://certbot.eff.org/docs/using.html#dns-plugins)\n\n今度ConoHaのDNSでも簡単に証明書がとれるDNS-01プラグインを書いてみようかな？？？\n\n適切にTXTレコードを設定したら、エンターキーを押せば終わり！\n\n![](0.png)\n\n```\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/kiritan.com/fullchain.pem\n```\n\n簡単ですね！\nあとは、HTTPサーバに設定してあげれば夢のワイルドカード証明書によるHTTPS化が完了です！\n\n![](1.png)\n![](2.png)\n\nうわ〜〜ワイルドカードだ〜〜うれしい〜〜\n\n# おわり\n\nTXTレコードを設定するところが自動化できるなら、本当に証明書管理の手間が少なくなると思います。\n\n別のアプローチで管理の手間をなくす記事もあります。見てね。\n\n[lua-nginx-auto-sslで全自動HTTPS](/posts/21/)\n","title":"Let's Encryptのワイルドカード証明書を早速発行してもらう","image":null,"tags":["Let's Encrypt","SSL","セキュリティ","自動化"],"date":"2018-03-14T00:00:00.000Z","updated":"2021-01-08T10:53:56.000Z"},{"type":"external","url":"https://trap.jp/post/158/","publisher":"東京工業大学デジタル創作同好会traP","title":"署名付きクッキー / Omniauth Strategyを書く / GitLabで独自認証","tags":["traP","アドベントカレンダー","認証","セキュリティ"],"date":"2016-12-25T00:00:00.000Z"},{"type":"external","url":"https://trap.jp/post/78/","publisher":"東京工業大学デジタル創作同好会traP","title":"TWCTF 2016 writeup","tags":["traP","CTF","セキュリティ","参加記"],"date":"2016-09-06T00:00:00.000Z"},{"type":"article","slug":"10","body":"行きました。\n\n# SANS Netwars とは\n\n米国SANSの強い講師の方による強い講義を受けて、\n翌日CTFでさっそく学んだことを活かそう！！！みたいなイベントです。\n\nタダでハイクオリティな講義が受けられてしかもいろいろグッズが貰える！！！神か！！！\n\n## 講義\n\n英語なのでツラみがある。\nでも同時通訳がついてるので安心！日本語で質問もできるよ！！\n\n詳しい内容を書いてしまうとめっちゃ怒られてしまうので、とても良かったよ、とだけ。\n\n## 懇親感\n\n1日目の夜には懇親会があります。\n食事がスゴイ豪華な上にお酒まで飲めます。NRI Secureの財力を感じる……！\n\nボクは交流そっちのけでタダ飯を食って、人に心配されるレベルまでタダ酒を飲んでました（クズ）\n\n## CTF\n\nCTFがやりたくて参加したみたいなところがある。\nこれも詳細を喋ると消されるので、楽しかったよ、とだけ。\n\nスコアボードが常にスクリーンに映しだされてて、順位の入れ替えがビュンビュン表示されててめっちゃカッコいいです。\nFLAGをsubmitして、自分の順位がグーンって上がるのを見るのがめちゃめちゃ楽しいです。\n\n最終結果\n\nhttps://twitter.com/TimMedin/status/766901031003299841\n\nボクは2位でした。\n\nhttps://twitter.com/sekai67/status/766905677621047296\n\n# 楽しかった！！！！\n\nNRI SecureとSANSは神\n\nみんな参加しよう！！！\n","title":"SANS Netwars 2016に行った","image":null,"tags":["CTF","SANS Netwars","セキュリティ","参加記"],"date":"2016-08-22T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"9","body":"行ってきました。\nセキュリティキャンプに応募した話もあります↓\n\n[セキュリティキャンプに応募した話](/posts/3/)\n\nなんか微妙に日が空いてしまったので最初の方とかもう空覚えなんですが、思い出しながら。\n\n# 一日目\n\n海浜幕張から5分位歩いてクロスウェーブ幕張に到着。\nなんかTwitterみてるとクソ早くに到着して付近散策してらっしゃる参加者さんもいましたが、\nまぁ普通に定刻に付けば大丈夫そう。\n\n![](1.jpg)\n\n会場入りしたら名刺交換タイムでした。\n強そうな人たちから次々と「名刺交換して頂けませんか」と声をかけられます＞＜\n\nhttps://twitter.com/security_camp/status/762848234498699264\n\nで、お昼を食べたり開講式でありがたいお言葉を頂いたりして、講義です。\n\n## セキュリティ基礎\n\nいきなりグループディスカッションです。自己紹介をしつつ、「セキュリティ・キャンプ応募フォームの問題点」を考えました。\n\nhttps://twitter.com/security_camp/status/762909216008867840\n\n## 特別講演「ZENIGATAになりたくて」\n\nめっちゃ面白かったです。\nCyberDefenceとICPOはなんで協力関係にあるのか？みたいな話から、\nICPOのサイバー部門の仕事について、そして「技術」とは何かみたいなお話。\nなんかこのお話を聞けただけでもキャンプに来た甲斐があった気がします。\n\n「CTFでBinaryができる人は大抵Webもできるが、逆はない」とおっしゃられていたのが刺さりました＞＜\n精進します。。。\n\nhttps://twitter.com/security_camp/status/762912661927407616\n\n## 特別講演「サイバー犯罪の実態とこれに対処するための取組」\n\nサイバー犯罪に対する警察の取組みについて。\nこういう分野に関して警察が何やってるのかって、なかなか表に出てこないので、目からウロコでした。\nあと間仁田さんの話し方が面白いです。\n\nhttps://twitter.com/security_camp/status/762928020537483264\n\n# 2日目\n\nいよいよ専門講座！\n\n## [1,2-E] TLS徹底演習\n\nTLSとは何か、TLSは何故必要なのか、といったお話から始まりました。\n**徹底**演習の名の如く、これ以上ないくらい詳しく解説して頂きました。\n\nで、TLSのハンドシェイクはどんな物なのかを一つ一つ見ながら、簡単な演習を行いました。\nペアになって手でTLSのハンドシェイクを作ってメッセージ交換したり、\n間に人を挟んで人力MITM攻撃をしてみたり、楽しかったです。\n\nこの講義は集中講義なので丸一日を使うのですが、\n午後に入った段階で漸く「TLSを理解する**準備**」に入るので、ちょっとビビりました。\nTLSは多くの要素技術を組み合わせてやっと成り立つものらしいので、徹底的に解説するには時間がかかるのも納得です。\n\n理解する準備が終わったら、実際にNode.jsで最新の暗号方式ChaCha20-Poly1305の実装を行いました。\nコレ、つい2ヶ月前に仕様化が完了したばかりの本当に最先端の技術なので、こんな講義を受けられる場所はここしかない！そうです。\n\n大津先生は「どうせ誰も演習を最後まで終えられないだろう」と仰っていましたが、\nボクはNode.jsがスキなので楽しくサクサク演習を進めて、あと1題(!)で終わるトコロまできたのですが、残念ながらタイムアップ。\n大津先生は何故か安堵されていました(笑)\n\nhttps://twitter.com/security_camp/status/763175036786049025\n\n講義の資料は先生がWebにアップしてくださっていますので、以下から見れます。\n\n[こちら](https://speakerdeck.com/shigeki/tlsche-di-yan-xi)\n\n## CTF\n\n待ちに待ったCTF！\nセキュリティに興味を持ったきっかけがCTFなので、もうコレが一番の楽しみでした。\n\nhttps://twitter.com/sekai67/status/763312140350480384\n\nボクらE4gleJumpもガンバるよ！\n\n19:00からの予定でしたが、機材トラブルで30分ほど遅れてのスタート。\nこういうイベントでは（特にネットワーク関係の）機材トラブルがあるあるですね。\n\nhttps://twitter.com/security_camp/status/763325426198466560\n\nこのCTF、「はいコレ、RaspberryPiで動いてるサーバね」ってIPアドレス渡されて放り出されます。\nなんか、この時点でもうだいぶ困惑してるチームもあったようです。\n\n幸いボクらのチームにはRaspiのプロ👏がいたので、\n彼が開始即ポートスキャンでSSHが空いてることを突き止め、\nRaspiのデフォルトユーザとパスワードで一瞬にしてFLAG入手キメててビビりました。\n（SSHでログインできないと次に進めないので、けっこうツラかったですね。）\n\nボクはまぁ、例によってWeb問をチマチマいじってました。\nベーシックなXSSと、PHPのプロトコルラッパーを悪用する問題を解きました。\n後で聞いたところ、どこかに任意コード実行の脆弱性が仕込まれてたようなんですが、全く分からず詰み。\n\nボクがWebで無駄に足掻いてる最中にも、チームのプロ👏各位によってPPCとかCryptoがバシバシ解かれて……\n\nhttps://twitter.com/security_camp/status/763353399806955525\n\n講師チームを除けば**1位**でした。\n（途中までは真に1位だったのに……あと1問解けば……ちょっと悔しいです）\n\nhttps://twitter.com/sekai67/status/763362094003609600\n\n賞状をいただきした。\n副賞としてNTTデータさんからQuoカードも頂きました。\n\nhttps://twitter.com/security_camp/status/763520642503151616\n\n# 3日目\n\n## [3-A] Webアプリケーションの脆弱性の評価と発見\n\n脆弱性を探すときにどんなトコロに注目すべきかを教えていただき、\nその後サイボウズオフィスの旧バージョンから実際に脆弱性を探してみるなどしました。\n見つけた脆弱性の評価方法なども、大変ためになりました。\n\nhttps://twitter.com/security_camp/status/763533821081899008\n\n## [4-C] オンラインゲーム アタック＆ディフェンスチャレンジ\n\n運営チームとプレイヤーチームに分かれて、運営はチート対策、プレイヤーはRMTをガンバる競技です。\n2試合あったのですが、事前アンケートでNodeそこそこ触ってますって回答したせいか1回目も2回目も運営でした。\n\nマップ上に湧くカエルを捕まえて経験値を稼いでレベルを上げるっていうシンプルなオンラインゲームです。\nレベルを上げてRMTするとプレイヤーの得点になります、ゲームを安定運用すると運営の得点になります。\n\n1回目はゲームに予め仕込まれていたバグの修正が遅れて、プレイヤーにやりたい放題されてしまいました。（かなしい）\n大差をつけられてしまったので、2回戦に向けて自動BANスクリプトを書くなどしていました。\n\n2回目、満を持して自動BANスクリプトを投入したのですが、どうも不調でRMTの疑いのないアカウントまでBANしてしまい大幅減点を食らう。（ごめんさない）\n仕方がないので、プレイヤーの自動化スクリプトを阻止すべく全ての動作に1秒の遅延を入れてレベルアップ効率を大幅に下げる作戦に出ました。\nコレが功を奏してRMTは減速、見かけ上安定した運営がなされて結果勝てたんですけど、プレイヤーからめっちゃ叩かれました。\n（現実のオンラインゲームでも運営はしばしばプレイヤーに叩かれてますよね……）\n\nチームで協力して問題を対処していく感じがとても楽しかったですね！\n\nhttps://twitter.com/security_camp/status/763629287173873664\n\n## [5-A] サーバ運用におけるパスワード管理\n\nディスカッションが主でした。\n大学のサークルが所有するサーバを管理したりしてるので、いろいろ勉強になりました。\nディスカッションって苦手なのですけど、自分が思いもしなかったような見方があったりして、いろいろ発見があります。\n\nhttps://twitter.com/security_camp/status/763690313210736640\n\n# 4日目\n\n## [6,7-E] インフラセキュリティブートキャンプ\n\nTerraformを使ってAWS上にシステムを構築してみる演習です。\nAWSはEC2とS2くらいしか使ったことがなかったんですが、VPCを使ったりELBを使ったり……途中めちゃめちゃ詰まりましたがなんとか構築できました。\nTerraformはJSONでシステムの構成を記述してコマンド一発で構築しちゃおうってノリのソフトなんですが、（使いこなせれば）めっちゃ強いなと思いました。\n\nコレも集中講義なんですが、午後はちょっと趣向を変えてDockerでいろんなOSSを走らせてみたりだとか、\nAWS Lambdaを使ってサーバレスアーキテクチャを体験してみたりだとか。\n\n手を動かす部分が多くて楽しかったです。\n\nhttps://twitter.com/security_camp/status/763927629346906112\n\n## グループワークの準備\n\n**闇 of 闇**\n\n一応グループワークの準備時間が毎日1～2時間くらいあったんですが、\n足りるはずもなく毎年恒例（らしい）徹夜進捗会に突入です。\n\nhttps://twitter.com/sekai67/status/764074021973471232\n\nなんかうちのグループは深夜4時位まで議論してました。\n議論し過ぎて話が広がりすぎて全員が分けわからなくなった結果、まとまりのない感じの主張になってしまいました……（反省）\n\n# 5日目\n\n## 起床トラック\n\n毎日ちょこちょこチューターさんに起こされる参加者さんがいたそうですが、\nボクは大丈夫ですよ！もちろん5日目を恥を晒すようなことはしていません！寝てないからね！（白目）\n\n## グループワーク発表\n\nみなさんクオリティが高い＞＜\n個人的に一番おもしろいなぁと思ったのは「一対三」さんのYouTuberの話です。\n\nhttps://twitter.com/security_camp/status/764280337169981440\n\n## 成果発表\n\nいきなり指名されたのでかなりキョドりました。（すみません）\nTLS徹底演習について簡単に説明したのですが、あの講義のスゴさを1割も伝えられなかった……\n\nhttps://twitter.com/security_camp/status/765064661205004290\n\n## おわり\n\n閉講式で修了証書をもらって、記念撮影をしておしまいです。\n5日間、あっという間でした。\n\n記念撮影の掛け声が「がんばるぞい！」だったの、一体なんなんでしょうね（すっとぼけ）\n\nhttps://twitter.com/security_camp/status/764694544092794881\n\n閉講式後、技術書がたくさんもらえます。\n魅力的な本がたくさんあったのですが、受け取る順番を決めるクジで**最下位**を引いたために、残念ながら欲しい本を手に入れることができず。\nロビーでもらったばかりの本を持ち寄ってサイン会が開かれているのを遠目に見てました……。\n\nhttps://twitter.com/security_camp/status/764662954834796544\n\nあ、キャンプ中は飲料水のペットボトルが（ほぼ）無限に配布され、至る所に転がっているんですが、\nボクはその余りをバックに入る限り詰め込んで持ち帰ってきました。（害悪）\n\n# 振り返って\n\nなかなか他ではできない経験ができましたし、参加できて良かったです。\n\nセキュキャンはいいぞ\n\n## もらったもの一覧\n\n![](2.jpg)\n","title":"セキュリティ・キャンプ全国大会2016に行った","image":null,"tags":["CTF","セキュリティ","セキュリティ・キャンプ","参加記"],"date":"2016-08-17T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"6","body":"メルセンヌ・ツイスタの性質を理解したい。\n\nこの記事は前回の続きです。\n\n[メルセンヌ・ツイスタをわかった気になる](/posts/5/)\n\n## 今日のテーマ\n\n今日のテーマは、メルセンヌ・ツイスタ(MT)の性質についてです。\n\nMTの生成する乱数列は、以下の線形漸化式で表わされるのでした。\n\n$$\n\\begin{array}{c}\n\t\\mathbf{x}_{k+n} \\, = \\, \\mathbf{x}_{k+m} \\oplus ( \\mathbf{x}^u_k \\: | \\: \\mathbf{x}^l_{k+1} ) A \\\\\n\t(k = 0,1, \\cdots)\n\\end{array}\n$$\n\n漸化式で表わされるということは、連続した生成された乱数をいくつか集めれば、その次に現れる数値が予測可能じゃないか！？！？！？？\nまた逆に、今まで生成された乱数値も復元できるんじゃないか！？！？？？！\n\nワクワクしますね！\n\n# 打倒Tempering\n\nさて、さっそく……といいたいところですが、そういえば乱数値はTemperingとかいう操作をしてから出力していましたね。\n乱数を予測するには、コイツをどうにかしなければなりません。\n\n前回はTempering行う行列$T$は正則だから逆行列が求まるよね？みたいな話をして終わりました。\n\n以下の様な謎のビット演算が$T$を右から掛けることに相当する、というお話でしたが\nこの$T$がどんな行列なのかを調べることにしましょう。\n\n$$\n\\begin{array}{l}\n\t\\mathbf{y}_1 = \\mathbf{x} \\oplus (\\mathbf{x} \\gg u) \\\\\n\t\\mathbf{y}_2 = \\mathbf{y}_1 \\oplus ((\\mathbf{y}_1 \\ll s) \\: \\& \\: \\mathbf{b}) \\\\\n\t\\mathbf{y}_3 = \\mathbf{y}_2 \\oplus ((\\mathbf{y}_2 \\ll t) \\: \\& \\: \\mathbf{c}) \\\\\n\t\\mathbf{y}_4 = \\mathbf{y}_3 \\oplus (\\mathbf{y}_3 \\gg l)\n\\end{array}\n$$\n\nそういえば前回、何の脈絡もなく整数を各ビットで分けて行ベクトルとしていましたが、\nなんで行ベクトルを考えるのかというと、計算上都合がいいからです。\n例えば、XOR演算はベクトル同士の加算で表現できますし、ビットシフトは適当な正方行列との積で表現できます。\n\nあっ！じゃあ↑の式も一つ一つのビット演算が行列として表せるじゃん！！！\n\n## ビットシフトの行列表現\n\nこれはすぐに思いつきそうです。\n単純に各要素をずらすだけなので、単位行列を列ベクトル分解して、それをずらしたものを掛ければよさそう。\n\n例えば、8ビット整数について2ビットの右シフトを表す行列は以下になります。\n\n$$\nS_8 = \\left(\n\t\\begin{array}{ccccc}\n\t\t0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\t\\end{array}\n\\right)\n$$\n\nこの記事中では、$S_n$をビットシフトを表す行列とします\nただし、$n < 0$のとき$|n|$ビット左シフトを、$n > 0$のとき$n$ビット右シフトを表すとします。\n\n## ANDの行列表現\n\nこれは対角成分がAND演算する整数の各ビットの値になった正方行列を考えれば良いです。\n例えば、8ビット整数について`178 = 0b10110010`とのANDを表す行列は以下のように書けます。\n\n$$\nD_{178} = \\left(\n\t\\begin{array}{ccccc}\n\t\t1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\t\\end{array}\n\\right)\n$$\n\n対角に`10110010`が現れています。\nなんでコレがAND演算を表すのかは、左から適当な行ベクトルを掛けて、手で計算してみればすぐにわかるはずです。\n\nこの記事中では、$D_n$を$n$とのAND演算を表す行列とします。\n\n## XORの行列表現\n\n`A = 0b1001, B = 0b1001`としたとき、`A xor B`を考えてみます。\n\n| A | B | A xor B |\n|:-:|:-:|:-------:|\n| 1 | 0 |    1    |\n| 0 | 1 |    1    |\n| 0 | 0 |    0    |\n| 1 | 1 |    0    |\n\n各ビットについて見ると、1ビット同士の加算になっています。（桁があふれた分は無視です。）\nということはどうやら、2つの整数のXOR演算は、それら整数を表す行ベクトルを単純に加算するだけで良さそうです。\n\n## Temperingの逆演算\n\nさて、材料は揃いました。\nさっそく、Temperingの逆演算を表す行列を求めるとしましょう。\n\n例のビット演算で書かれた式を行列で表してみます。\n\n$$\n\\begin{array}{l}\n\t\\mathbf{y}_1 = \\mathbf{x} + \\mathbf{x} S_u = \\mathbf{x} (I + S_u) \\\\\n\t\\mathbf{y}_2 = \\mathbf{y}_1  + \\mathbf{y}_1 S_{-s} D_b = \\mathbf{y}_1 ( I + S_{-s} D_b ) \\\\\n\t\\mathbf{y}_3 = \\mathbf{y}_2  + \\mathbf{y}_2 S_{-t} D_c = \\mathbf{y}_2 ( I + S_{-t} D_c ) \\\\\n\t\\mathbf{y}_4 = \\mathbf{y}_3 + \\mathbf{y}_3 S_l = \\mathbf{y}_3 ( I + S_l )\n\\end{array}\n$$\n\nで、式が4本もあると面倒ですし、1つにまとめてしまいましょう。\n\n$$\n\\mathbf{y} = \\mathbf{x} (I + S_u) ( I + S_{-s} D_b ) ( I + S_{-t} D_c ) ( I + S_l )\n\n$$\n\nということで、ようやく$T$の本性が分かりました。\n\n$$\nT = (I + S_u) ( I + S_{-s} D_b ) ( I + S_{-t} D_c ) ( I + S_l )\n\n$$\n\nで、コイツの逆行列$T^{-1}$を求めれば、それがTemperingの逆演算を表す行列です。\n\n# 乱数を予想する\n\nさて、Temperingの逆演算ができれば、話は早いですね！\n\n前回作ったプログラムの _MT内部状態_ を表す配列を、先ほどの手順で復元した値N個で埋めてやれば、\nあとは前回説明した計算方法に従って次に出現する乱数を計算することが出来ます。やった！\n\n# 乱数を復元する\n\nじゃあ、今まで作られたであろう乱数を復元するには？\n\nとりあえず内部状態$\\mathbf{x}$をまず復元しなければならないワケですが、\nMTの漸化式を見ると、$x_k$の上位ビットが$x_{k+n}$の、下位ビットが$x_{k+n-1}$の計算に使われてるなーって気が付くとおもいます。\n\nじゃあ、その計算の逆をやれば、$x_k$が復元できるネ！っていうお話です。\n幸い、漸化式中に現れる演算はさっきやったXOR演算と、既に中身が分かっている行列$A$の乗算だけです！\n\nAはこんな行列なのでした。\n\n$$\nA = \\left(\n\t\\begin{array}{ccccc}\n\t\t0 & 1 & 0 & 0 & 0 \\\\\n\t\t0 & 0 & 1 & 0 & 0 \\\\\n\t\t0 & 0 & 0 & \\ddots & 0 \\\\\n\t\t0 & 0 & 0 & 0 & 1 \\\\\n\t\ta_{w-1} & a_{w-2} & \\cdots & \\cdots & a_0\n\t\\end{array}\n\\right)\n$$\n\nこの定義を見ると、$a_{w-1} \\ne 0$ならば明らかに正則ですねコレ。\nMT19937では↑を満たしますし、逆行列も求まりますね！\n\n元の[論文](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.pdf)には、高速に計算するためにこの形にするって書いてあるんですけど、\nコレ正則じゃなくても良いのかな？そうだとすると逆演算ができない？？？（知らない）\n\n# やってみよう！\n\n早速やりましょう。\nとりあえず、前回作ったプログラムで生成した乱数をファイルに書き出して、それを入力して、その部分乱数列から全体を復元しましょう。\n\nはい、やり方はさっきまでさんざん書いたとおりなので、サクッと実装します。\n今回もRubyです。\n\n```ruby\nrequire \"matrix\"\n\n# MT19937\nW = 32\nN = 624\nM = 397\nR = 31\nU = 11\nS = 7\nT = 15\nL = 18\nA = 0x9908B0DF\nB = 0x9D2C5680\nC = 0xEFC60000\n\n# ビットマスク用\nWHOLE_MASK = (\"1\" * W).to_i(2)\nUPPER_MASK = (\"1\" * (W - R) + \"0\" * R).to_i(2)\nLOWER_MASK = (\"0\" * (W - R) + \"1\" * R).to_i(2)\n\n# ビット行列\nclass BitMat < Matrix\n\t# 行ベクトルを整数に\n\tdef to_i\n\t\t# mod 2 しないとダメ\n\t\tself.row(0).to_a.map{|i| i.to_i.abs % 2 }.join.to_i(2)\n\tend\n\t# 整数を行ベクトルに\n\tdef self.from_i(i)\n\t\tself[format(\"%.\" + W.to_s + \"b\", i).split(\"\").map(&:to_i)]\n\tend\n\n\t# kだけビットシフトする演算を表す行列を生成 (k > 0 : 右シフト, k < 0 : 左シフト)\n\tdef self.Shift(k)\n\t\tself[ *(1..W).map{|i| (1..W).map{|j| j == i+k ? 1 : 0 } } ]\n\tend\n\t# kとのAND演算を表す行列を生成\n\tdef self.And(k)\n\t\tself.diagonal(*self.from_i(k).row(0).to_a)\n\tend\n\n\t# r行目を行ベクトルvで置き換え\n\tdef []=(r, v)\n\t\t@rows[r] = v.row(0).to_a\n\tend\nend\n\n########################################\n\n# 行列T\nt = (\n\t(BitMat.I(W) + BitMat.Shift( U)) *\n\t(BitMat.I(W) + BitMat.Shift(-S) * BitMat.And(B)) *\n\t(BitMat.I(W) + BitMat.Shift(-T) * BitMat.And(C)) *\n\t(BitMat.I(W) + BitMat.Shift( L))\n)\n# Tの逆行列\nt_inv = t ** -1\n\n# 行列A\na = BitMat.Shift(1)\na[W-1] = BitMat.from_i(A)\n# Aの逆行列\na_inv = a ** -1\n\n# 乱数列を読み込む\ninput = []\nwhile line = gets\n\tinput.push($1.to_i) if /^\\d+: (\\d+)$/ =~ line\nend\n\n# E番目からN個だけの乱数を使う\nE = input.length / 3\n\nprint \"USE: \" + E.to_s + \" -> \" + (E + N - 1).to_s + \"\\n\";\n\n# E番目～E+N-1番目の乱数を取得し、Temperingの逆演算をする\nxr = input[E, N].map{|e| (BitMat.from_i(e) * t_inv).to_i }\n\n# 内部状態\nx = xr.dup\n\n# E+N番目から順に乱数列を復元\n(E + N).upto(input.length - 1) do |k|\n\ti = (k - E) % N\n\n\t# 乱数を計算\n\tz = x[i] & UPPER_MASK | x[(i + 1) % N] & LOWER_MASK\n\tx[i] = x[(i + M) % N] ^ (BitMat.from_i(z) * a).to_i\n\n\t# Temperingして一致するか確認\n\ty = (BitMat.from_i(x[i]) * t).to_i\n\tif y != input[k]\n\t\tabort \"FAIL: \" + k.to_s + \"\\n\";\n\tend\nend\n\nprint \"RETRIEVED: \" + (E + N).to_s + \" -> \", input.length - 1,\"\\n\";\n\n# 内部状態\nx = xr.dup\n\n# E-1番目から順に0番目までの乱数列を復元\n(E - 1).downto(0) do |k|\n\ti = (k - E) % N\n\n\t# z_i を復元\n\tz = (BitMat.from_i(x[i] ^ x[(i + M) % N]) * a_inv).to_i\n\n\t# z_{i-1} を復元\n\tzp = (BitMat.from_i(x[(i - 1 + N) % N] ^ x[(i - 1 + M) % N]) * a_inv).to_i\n\n\t# z_i, z_{i-1} から x[i] を復元\n\tx[i] = z & UPPER_MASK | zp & LOWER_MASK\n\n\t# Temperingして一致するか確認\n\ty = (BitMat.from_i(x[i]) * t).to_i\n\tif y != input[k]\n\t\tabort \"FAIL: \" + k.to_s + \"\\n\";\n\tend\nend\n\nprint \"RETRIEVED: 0 -> \" + (E - 1).to_s + \"\\n\";\n```\n\n今回は、MTで乱数を生成する際にも行列を用いて計算してみました。なのでとても遅いですね。\n\nちなみに、わざわざ行列を使わなくてもTemperingの逆演算をビット演算で高速に行うことも出来ます。\n\n[メルセンヌ・ツイスタのtemperingの逆関数に関する考察 - Plus Le Blog](http://plusletool.hatenablog.jp/entry/2014/10/24/213816)\n\n# MTはダメ？\n\n_わー！MTで作った乱数は予想・復元されちゃう！危ない！_\n\nというわけではなく、要は適材適所、その性質をよく理解して使うべき、ということでした。\n決して暗号用途に使っちゃダメですよ。（そういうCTF問題がどこかにありましたね……！）\n\n次は **xorshift** を調べてみようかな？\n","title":"メルセンヌ・ツイスタを倒す","image":null,"tags":["CTF","セキュリティ","メルセンヌ・ツイスタ","乱数"],"date":"2016-06-30T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"3","body":"しました。\n\n# セキュリティ・キャンプ\n\nわりと昔から知ってたんですけど、セキュリテイに特段興味があったわけじゃなかったので、ふーんってカンジだったんですけど、\n去年の末にCTFを始めてから、セキュリティ興味あるある！ってなったので、今年はじめて応募してみた次第です。\n\n# 結果\n\nhttps://twitter.com/sekai67/status/742559409730027521\n\nなんか微妙な気持ち。\n他の参加者さんを見てると、知識や気概が自分よりはるかにあって、スゴイなーって。\nわりと軽いキモチで応募した自分なんかが入って良いのだろーか、みたいな。\n\nそんなことを言ってますが、なんだかんだ言って嬉しいです。\nせっかくセキュキャンに行くからには、**ガチ**でガンバリます。\n↓の応募用紙を見直してて勉強不足を痛感しましたし、精進します。\n\nということで、末席に名を連ねる運びと相成りましたが、どうぞよろしくお願い致します。\n\n# 応募用紙\n\nどんなことを書いたのか、晒します。（恥ずかしい。。。）\n\n## 共通問題1\n\n1. あなたが今まで作ってきたものにはどのようなものがありますか？いくつでもいいので、ありったけ自慢してください。\n2. それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\n3. 開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\n\nそのまま書くとアレなので、抜粋。\n\n- プログラミングはゲームを作りたくて始めたよ\n  - ゲームたくさん作ったよ\n  - HSPプロコンで入賞したりしたよ\n- U-20プロコンで賞をもらったよ\n- ソシャゲの情報を勝手に収集して公開するWebサービスを作ったよ\n  - クローラはJava、DBはMySQL、フロントはPHPだよ\n  - 月間15万PVくらいあるよ\n- 大学のサークル向けのクローズドなSNSを作ったよ\n  - サーバはnode.jsでSocket.ioで通信するよ\n  - SAML IdPになって他のサービスと連携できるようになってるよ\n  - クライアントはHTML/JSで書いて、いわゆるハイブリットアプリにてラクしたよ\n- OSSプロジェクトにちょっとだけコード投げてるよ\n\nみたいな事を書いた。\n\n## 共通問題2\n\n1. あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？(例えば、C言語プログラムを複数ファイルに分割する方法)\n2. また、その壁を乗り越えるために取った解決法を具体的に教えてください。 (例えば、知人に勧められた「〇〇」という書籍を読んだ)\n3. その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\n\n抜粋。\n\n- ドキュメントが充実してないライブラリ的なを使うのが辛かった\n- ググっても情報が手に入らないし、もう全部ソース読むわ\n  - ソース読んだら中身がメッチャよくわかるし神（それはそう）\n- 困ったらソース読もう\n  - ソース読んだらそのプロジェクトにContributeもできる！！！楽しい！！！！！\n\n## 共通問題3\n\nこれ、自分が思うに **一番大事な設問** な気がします。\n_強いけど学ぶ意欲が見られない人_ と _強くはないけどメッチャやる気のある人_ だったら、後者が通るだろうなぁ、って。\nその学ぶ意欲的なものをアピールするのがココなので。。。\n\nかく言う自分の書いたヤツ、微妙。。。\nなんか他の人が上げてるヤツ、ヤバい。まず分量が桁違い。\nなんでボク通ったんだろうか。\n\n### (1)あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？(複数可) そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\n\n> 「クラウドセキュリティ基礎」や「サーバ運用におけるパスワード管理」を初めとする、ネットワーク、Web系の講義に最も興味があります。\n> 先に述べたような、Webアプリケーションを作ったり、CTFコンテストに参加したりして、脆弱な実装は本当に怖いということを身を持って感じました。\n> そこで、セキュアなアプリケーションを作れるように、どのような攻撃手法が存在し、防ぐにはどうすればよいかを詳しく知っておきたいです。\n> また、「ID連携基礎」にも興味があります。実際に複数のアプリケーションでID連携をするソフトウェアを制作したのですが、\n> 直接パスワードなどを扱う部分であるため、本当に気をつけて実装しなければならないと感じ、認証技術についてより詳しく知らなければならないと思いました。\n> また、「人工知能とセキュリティ」にも興味があります。私は人工知能の研究にも興味があったのですが、それとセキュリティを関連付けて考えたことがありませんでした。\n> そのため、人工知能とセキュリティについて、知ることができれば、今後人工知能を扱うときに参考になるかと思いました。\n> また、「オンラインゲームアタック＆ディフェンスチャレンジ」や「スマートフォン向けゲームのセキュリティ」にも興味があります。\n> 私はこういったゲームでよく遊ぶのですが、こうしたゲームで散見されるチート行為、それがどのように行われ、運営者はそれをどのように見つけているのか、ずっと疑問に思っていました。\n> また私は大学のサークルでゲーム制作をしているので、オンラインのゲームを作る際に不正をどうやって取り締まればよいのか知っておきたいと思いました。\n\n\n### (2)あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？(複数可) 自由に答えてください。\n\n> 「今少し知っている」知識を深めることもそうですが、「今ほとんど知らない」分野の知識についても、出来る限り獲得したいと思っています。\n> セキュリティの分野で活躍するには、ある特定の分野にだけ長けているのでは対応しきれないと思っていて、\n> もちろん自分の得意な分野を極めるのもそうですが、様々な関連分野の知識を持ち、\n> そうした広い分野についての知識を持っておくことで、何をするにしても広く視野を持つことができるような人間になりたいと思います。\n> セキュリティ・キャンプに参加することで、そうしたセキュリティのエキスパートへの第一歩を踏み出せればと思います。\n> また、同じ分野に興味を持つ同年代の人と知り合える数少ない機会であるので、人脈を作ることもできればと思っています。\n\n### 選択問題2\n\n    Googleは、自社のサービスのセキュリティを高めるために様々なことを行っています。\n    ブラウザからGoogleの検索サービス( https://www.google.co.jp/ )にアクセスを行い、どのようなセキュリティ施策が行われているかを見つけなさい。\n    ブラウザは任意のもので構いません。ブラウザのどういった点からどういった施策を行っていると判断できるのか、その理由も含めてできるだけ多くの項目を回答してください。\n    拡張機能を利用しても構いませんが、ブラウザ以外の方法でアクセスしてはいけません。\n\n間違ってそう。\n\n> Chromeでアクセスするとまず目につくのは、アドレスバーに表示される緑色の鍵マークです。\n> クリックして詳細を表示すると、「安全なTLS接続」と表示されますが、\n> これはTLSを用いた接続を行っており、通信が正しく暗号化されていることを示しています。\n> また同時に「有効な証明書」と表示されますが、これはサーバー証明書の検証に成功し、\n> このコンテンツは確かにGoogle社のサーバーから提供されたものであることを示しています。\n> またスマートフォン版のChromeから見ると、「証明書の透明書に関する有効な情報がサーバーから提供されました」と表示され、\n> これはCertificateTransparencyという技術で、これはGoogleのサーバが提示した証明書が不正な証明書でないことを表しています。\n> また、「ECDHE_ECDSA」が鍵交換に使用されている旨が表示されますが、\n> ECDHEには前方秘匿性があり、サーバの持つ秘密鍵が万が一流出したとしても、過去の通信記録からその内容が暴かれることがなくなります。\n> またECDSAは、一般的なRSAと比べると同じセキュティレベルを得るために必要な鍵の長さが短いとされており、より安全性が高いと考えられます。\n> FirefoxでTLS証明書を見ると、署名アルゴリズムに「SHA-256」を利用しており、これは古い方式SHA-1に比べハッシュ衝突に対する高い耐性を持ちます。\n> また、Firebugなどの拡張機能を用いて通信を見ると、「X-Frame-Options: SAMEORIGIN」ヘッダが送信されているのがわかり、\n> これによって、フレームを利用しててこのページを別のサイトに組み込むことが出来ず、クリックジャッキングを防ぐことが出来ます。\n> また「X-XSS-Protection: 1; mode=block」ヘッダが送信されており、これによってブラウザのXSS対策機能を有効化しており、これによりある程度のXSSを防止することが出来ます。\n> また「Content-Type: text/html; charset=UTF-8」のようなヘッダで文字コードが指定されており、レガシーなブラウザを標的としたUTF-7 XSS攻撃も対策されています。\n> HTMLソースを表示すると、埋め込まれたJSコードも含め、圧縮（難読化）されているのがわかり、攻撃者にページ構造を理解させない措置とも見ることが出来ます。\n\n### 選択問題4\n\n    突然だが、RH Protocolで用いられるRHパケットのフォーマットを以下に示す。なおRH Protocolは実在しないプロトコルであり、その内容について特に意味は無い。\n    (略)\n    添付するバイナリは、とあるRHストリームのうち片方向のみを抽出したものである。\n    このバイナリストリームを読み込み、1つのRHパケットが以下の条件のすべてにマッチするときに標準出力に文字列\"PASS\"、 それ以外の場合は\"REJECTED\"と表示するCもしくはC++のプログラムを記述し、実行結果と共に提出せよ。\n    また、マッチングにかかるCPUサイクル及びメモリ使用量を計測し記載した場合、評価に加味する。\n    (略)\n\nごちうさ。\n\nなんかボクの書いたやつ、ミスってる気がする。\n応募用紙上げてる人の出力結果と一致してない……オワタ……ってなってた。\n（結局わからず）\n\n```C\n#include <iostream>\n#include <string>\nusing namespace std;\n\n/* データの長さ */\n#define MAGIC_LENGTH 2\n#define SRC_LENGTH   20\n#define DST_LENGTH   20\n\n/* RH Packet 構造体 */\ntypedef struct {\n    string Magic;\n    string Source;\n    string Destination;\n    int DataLength;\n    string Data;\n} Packet;\n\n/* 文字列を小文字に */\nstring toLower(string in){\n    for(int i = 0; i < in.length(); i++){\n        in[i] += ('A' <= in[i] && in[i] <= 'Z' ? 32 : 0);\n    }\n    return in;\n}\n/* 16進数のcharを１０進数のintに */\nint hexToDec(char a){\n    return '0' <= a && a <= '9' ? a - '0' : a - 'a' + 10;\n}\n/* ストリームから1byte分のデータを読む */\nchar readByte(){\n    char buf, buf2;\n    while(cin >> buf){\n        if(('0' <= buf && buf <= '9') || ('a' <= buf && buf <= 'f')){\n            cin >> buf2;\n            return 16 * hexToDec(buf) + hexToDec(buf2);\n        }\n    }\n    return -1;\n}\n/* ストリームからintを読む */\nint readInt(){\n    int val;\n    for(int i = 3; i >= 0; i--){\n        char byte = readByte();\n        if(byte == -1){\n            return -1; /* 標準入力が終端に達しているとき-1を返す */\n        }\n        ((char*) &val)[i] = byte;\n    }\n    return val;\n}\n/* ストリームから文字列を読む */\nstring readString(int length){\n    char bytes[length + 1];\n    for(int i = 0; i < length; i++){\n        bytes[i] = readByte();\n    }\n    bytes[length] = '\\0';\n    return bytes;\n}\n/* ストリームからパケットを読む */\nPacket readPacket(){\n    Packet p;\n    p.Magic = readString(MAGIC_LENGTH);\n    p.Source = readString(SRC_LENGTH);\n    p.Destination = readString(DST_LENGTH);\n    p.DataLength = readInt();\n    p.Data = readString(p.DataLength);\n    return p;\n}\n\n/* パケットの正当性確認 */\nbool checkPacket(Packet p){\n    return\n    /* Condition 1 */\n    ( p.Magic == \"RH\" ) &&\n    /* Condition 2 */\n    ( toLower(p.Source) == \"rise-san\" ||\n      toLower(p.Source) == \"cocoa-san\" ) &&\n    /* Condition 3 */\n    ( toLower(p.Destination) == \"chino-chan\" ||\n      toLower(p.Destination) == \"chino\" ) &&\n    /* Condition 4 */\n    ( toLower(p.Source) != \"cocoa-san\" ||\n      toLower(p.Destination) != \"chino\" ) &&\n    /* Condition 5 */\n    ( p.Data.find(\"BlueMountain\") != string::npos ||\n      p.Data.find(\"Columbia\") != string::npos ||\n      p.Data.find(\"OriginalBlend\") != string::npos ) &&\n    /* Condition 6 */\n    ( p.Data.find(\"DandySoda\") == string::npos &&\n      p.Data.find(\"FrozenEvergreen\") == string::npos ) ;\n}\n\nint main(){\n    while(!cin.eof()){\n        Packet p = readPacket(); /* 1パケットを読む */\n        if(p.DataLength == -1){\n            break; /* 読み込みができていないとき */\n        }\n        cout << (checkPacket(p) ? \"PASS\" : \"REJECTED\") << endl; /* パケットを確認 */\n    }\n    return 0;\n}\n```\n\n出力結果\n>PASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\n\n### 選択問題6\n\n    IDとパスワードを入力したユーザの認証を行うWebアプリがあります。\n    あなたがこのアプリに対してセキュリティテストを行う場合、まず、どのようなテストをしますか？\n    なぜそのテストを選択したのか、その背景や技術的根拠と共に記載してください。\n    アプリの内部で使われている技術やシステム構成に、前提を置いても構いません。\n\nなんか応募する直前にksnctfをやってたので、ksnctfの問題にあった脆弱性をてきとうに挙げました(ﾉ≧ڡ≦)\n（ひどい）\n\n> まず、適当なURL、「./user.db」「./accouts.sqlite3」などにアクセスを試みます。\n> SQLite3を使用したシステムの場合、このようなデータベースファイルへ外部からアクセスできるようになっている場合、ユーザーの情報が簡単に盗まれてしまいます。\n>\n> 次に、ログインフォームに「'」や「\"」といった文字列を入力し挙動を見たり、、パスワードに「' OR '' = '」のような文字列を入力してログイン出来ないか調査します。\n> サーバーがデータの格納にSQLを使用しており、SQLで意味のある文字を適切にエスケープしていない場合、このようなSQLをインジェクション攻撃によって、\n> 不正にデータを書き換えたり、秘匿なデータを盗み出したり、パスワードを知らずともログインできたり、パスワードがハッシュ化されていても平文を求めることができてしまいます。\n>\n> 次に、スクリプトを用いて高頻度のログインリクエストを送信します。\n> 高頻度のリクエストに対して、Captchaのような画像認証をはじめとするBOT対策がなされていないと、ブルートフォース攻撃に晒される可能性があります。\n>\n> 次に、「password」のようなパラメータ名が設定されているフォームに対し、「password[]」のようなパラメータでリクエストを送信します。\n> サーバがPHPで実装されており、strcmpのような関数と曖昧な比較演算子(==)でパスワード比較がされていると、これでパスワード認証を突破される可能性があります。\n>\n> 次に、ユーザの入力したデータが再び表示されるようになっていないかを確認します。（パスワードが間違っていた場合、ユーザー名が予め入力されているなど）\n> このような機能がある場合、&lt;script&gt;タグでコードを埋め込めるようになっていないかを確認します。\n> 適切にエスケープされていない場合、XSS攻撃でCookieなどを盗まれる可能性があります。\n>\n> 次に、セッション情報のCookieがどのような形で渡されているのかを確認します。\n> Cookieにユーザー識別情報が乗せられていて、MD5のような脆弱なハッシュ関数で署名されていた場合、書き換えられる可能性があります。\n> また、署名の作り方によっては、LengthExtension攻撃などによって認証を突破される可能性があるので、この攻撃も試行します。\n\n### 選択問題11\n\n    2015 年に発行された CVEの内、あなたが興味を持った\"サーバに存在した\"脆弱性について１つ提示してください。\n    その脆弱性を悪用した攻撃を検知する方法について詳細に記述してください。また、興味を持った理由を記述してください。\n    CVE番号:CVE-2015-◯◯◯◯\n\n\n> 私が興味を持ったのは、CVE-2015-8669です。\n> この脆弱性は、phpMyAdminの古いバージョンに存在し、/libraries/config/messages.inc.phpという、\n> UI文字列情報が格納され、他のphpファイルからインクルードされることを想定したファイルに直接アクセスすることで引き起こされます。\n> このファイルに直接アクセスすることによって、本来は別のphpファイルで定義されるはずの関数が定義されておらず、\n> それを呼び出してしまうことで、スクリプトのフルパス情報を含むエラーメッセージを出力してしまうというものです。\n>\n> [攻撃を検知する方法]\\\n> HTTPサーバのアクセスログを確認することによって、容易に検知することが出来ます。\n> 攻撃を受けた場合、/libraries/config/messages.inc.phpへのアクセスが記録されます。\n> また、エラーログには実際に攻撃者に表示されたものと同じメッセージが記録されており、ここからも検知が出来ます。\n>\n> 実際のログ\\\n> 127.0.0.1 - - [30/May/2016:00:51:02 +0900] \"GET /phpmyadmin/libraries/config/messages.inc.php HTTP/1.1\" 200 266 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\"\\\n> [Mon May 30 00:51:02.871439 2016] [:error] [pid 8968:tid 1836] [client 127.0.0.1:52477] PHP Fatal error:  Uncaught Error: Call to undefined function PMA_fatalError() in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php:14\\nStack trace:\\n#0 {main}\\n  thrown in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php on line 14\\\n>\n> [興味を持った理由]\\\n> まず、phpMyAdminは自分がよく利用するプロダクトの一つであったからです。\n> 次に、この脆弱性では、（サーバの設定によっては）ブラウザから当該のURLにリクエストを送るだけで成立してしまうなど、比較的簡単に攻撃が成立するのが面白いと思いました\n> また、これはベンダの発表文書でも述べられていたことですが、PHPの設定自体が適切にされていれば攻撃は成立せず、\n> この設定（display_errors = off）はテスト用サーバー以外では普通は設定されるものであり、\n> また仮に攻撃が成立したとしても、その被害はさほど大きなものでなく（phpMyAdminが設置されるパスが漏れるだけ）、\n> 私は一瞬「大した脆弱性ではないのではないか」と思ってしまいましたが、\n> こうして大々的に記録されているところを見て、このようにどんな小さな脆弱性であっても、それが大きな攻撃の糸口とならないよう、\n> 常に注意していくべきなのだなと、考えを改めさせられました。\n> このように、自分のセキュリティに対する意識にも関わるものであったため、このCVEに興味を持ちました。\n","title":"セキュリティ・キャンプ2016に応募した","image":null,"tags":["日記","セキュリティ・キャンプ","セキュリティ"],"date":"2016-06-15T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"2","body":"最近にCTFにハマっています。\n\n# CTFってなに\n\n_CTF (Capture the Flag): 旗取り合戦_\n\nここではコンピュータセキュリティ競技のこと。\n\n「各チームにコンピュータが与えられてそれぞれのコンピュータの中の情報を奪い合う」攻防戦形式と、\n「複数に渡る分野の問題が出題される」クイズ形式(Jeopardy)がある。\n\nらしいです。（[traP](https://trap.jp/)部内CTF勉強会資料から引用）\n\n要は世間一般の人が _ハッカー_ って聞いて思い浮かべるようなアレを競うやつですね。\n\nまぁとにかく、 **楽しい** です。\n\nとっても勉強になるし、パズルみたいに頭を使うし、（答えを見ずに）解けた時には得も言われぬ達成感があります。\nさっきのザックリした説明を読んで興味を持った人はぜひぜひやりましょう。\n\n# CTFやろう\n\nCTFはたまーにデカい大会が催されるんですが、\nそれ以外にも常設のCTFサイトがいくつかあって、\nそこで問題にチャレンジできます。\n\n## オススメ常設CTF\n- [OverTheWire Bandit](http://overthewire.org/wargames/bandit/)\n  - 基礎中の基礎みたいなかんじ。初めての人にメッチャおすすめ。英語だけど。。。\n- [OverTheWire Natas](http://overthewire.org/wargames/natas/)\n  - Web系の問題。Web系はとっつきやすい（感じがする）ので、Banditが終わったらおすすめ。\n- [ksnctf](http://ksnctf.sweetduet.info/)\n  - 日本の有名なCTFサイト。いろんな分野の問題がある。\n\n# かくいう自分は\n\nhttps://twitter.com/sekai67/status/679199513702100992\n\nなんか去年の末に[@kotarou777775](https://twitter.com/kotarou777775)くんに誘われて始めたばっかりなので、\nクソ雑魚かつWeb系しか解けなくてまだまだなカンジなんですけど、ガンバりたい。\n\nこの前同じ大学の人達のチームに入れてもらって[Google Capture The Flag](https://capturetheflag.withgoogle.com/)に出たんですが、\n\n- Wallowing Wallabies - Part Two\n- Wallowing Wallabies - Part Three\n- Purple Wombats\n- Flag Storage Service\n\nの４つをガンバって解きました。全部Webだけど。。。\n\nチームにガチプロ👏が多かったおかげか全体で85位でした。やべぇ。\n\n# 以上\n\nCTFやろう\n","title":"CTFのはなし","image":null,"tags":["CTF","セキュリティ","日記"],"date":"2016-06-08T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}