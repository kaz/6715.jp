{"pageProps":{"tag":"日記","entries":[{"type":"article","slug":"17","body":"重い\n\n\n# CPCTF\n\nhttps://ctf-no.pro/\n\nこういうのをやりました。\n\n出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです）\n\nhttp://yuinore.net/2017/04/cpctf-writeup-1/\n\nhttp://yuinore.net/2017/04/cpctf-writeup-2/\n\nサーバ周りは全てボクが担当したんですが、ゴミクソ重くて申し訳なさがXDです。\n\n## 構成\n\n問題が60個とかそれくらいありました。多すぎる。\nで、この問題たちとスコアサーバを全て1台のサーバ(cpu:8Core mem:16GB)で動かしました。\n\n全てのアプリはDockerで環境が分離されています。\n自作のソフトウェア（Dockerのラッパみたいな何か）によって、PaaSみたいな使い心地で問題を更新できる仕組みにしてました。\n\n👆のお陰で、出題ミスが見つかっても更新が非常にスムーズでした。\n最終的に100アカウントくらいが登録されてましたが、サーバも落ちたりせずに概ね順調でした。\n\nが、HTTPでのアクセスがクッッッッッソ遅い問題にぶち当たって険しい感じでした。\nなんか変な感じの挙動で、一度繋がるとそれ以後数10分は快適に繋がるが、\n繋がらない人は永遠につながらない（HTTPレスポンスが帰ってこない）感じ。\n\nで、サーバ全体の負荷も大したことなかったし、ネットワーク帯域も余裕っぽかったので、謎かった。\n\n## 重い理由\n\nサーバが1台で、アプリが沢山乗ってる構成なので、HTTPリクエストを捌いてくれるリバースプロキシとして**OpenResty**さんを使っていて、\nHTTPS化を手っ取り早くやるために[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を採用していました。\n\nhttps://github.com/GUI/lua-resty-auto-ssl\n\n[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)は非常に優秀で、\n**正しく設定すれば**勝手にすべてのページをHTTPS化してくれて便利便利floatです。\n\nでまぁ、結論を言うと重いのはこの人が原因でした。\n\nこの人はOCSP Staplingもやってくれるんですが、コレを正しく動作させるためにはOpenRestyの`resolver`設定をしてあげないとダメです。\nどうダメかというと、遅くなります。おそらくDNSの問い合わせができずにそこでワーカーが止まってしまい永遠にレスポンスが帰ってこないのかな？\n\nエラーログにはOCSPが失敗したよ！っていうログがいっぱい出ていなので、コレが問題なのは間違いないんですが詳しい原因はコレ以上分からずです。\n一旦繋がると以後は素早く繋がるのは多分、一度OCSPで証明書の正当性が確認されるとしばらくは確認しないから……？\nでもOCSP Staplingってサーバ側が能動的に送ってるものな気がするし違うのでしょうか……\n\nそれと、[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)が内部で使ってるLetsencryptクライアントの\n[dehydrated](https://github.com/lukas2511/dehydrated)は、デフォルトだとRSA **4096bit**の証明書を作成します。\n4096bitは結構遅いです。適当に`ab`で計測したら4096bitは2048bitを比較してリクエスト完了まで10倍くらいの時間がかかってました。\n\n## Dockerの内部DNS\n\nさっきのOpenRestyはDockerコンテナ内で動かしてたんですが、\nDocker内部だとデフォルトゲートウェイがDockerネットワーク内でのホストのアドレスなので、\nDNSのについてもこの人がやってくれてるんだろうな〜〜って勝手に思って勝手にそう指定してたんですが、これが間違いでした。\n\nDockerネットワーク内でのDNSサーバは、`127.0.0.11`が正しいそうです。\nというか、resolve.confを見たらちゃんと書いてあったわ……\n\n## おわり\n\nわからないことが多いです。\n誰か鉞投げて欲しい。\n","title":"新入生向けCTF体験会のスコアサーバが重かった","image":null,"tags":["CTF","DNS","Docker","インフラ","ネットワーク","日記"],"date":"2017-05-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"16","body":"GitLabのマネをしました。\n\n作業していたら突然サーバが爆発しました。怖いです。\n\nええと、何があったのかというと、ミスって**Webアプリのデータの大部分を吹き飛ばして**しまいました。\n個人鯖じゃなくて、大学サークルの部内システムが全部乗っかってるサーバなのでやばばばいです。\n\n# 原因\n\n![](1.png)\n\nこれです。Win機ではいつもrloginというsshクライアントを使って作業しているんですが、\nこのクライアントには**コマンドを複数のサーバに同時送信する機能**が搭載されています。\n\nボクはこの事を知らなかったんですが、クリックミスでいつの間にか有効化してしまっていたんですね。\n\nで、このときボクは来る新入生歓迎CTF大会の鯖を構築していました。\n設定ファイルをコピーするために、**メインサーバにもSSHログイン**した状態でした。\n鯖構築序盤なので、いろいろ試行錯誤しつつ`rm -rf`なんかも連打してたんですね……\n\n本鯖にも`rm -rf`が飛んでることなど露知らず……！\nメインサーバ落ちてるよ～って連絡を受けて確認したらすっかりCTFサーバと化したメインアプリサーバが……。\n\n# 被害\n\nバックアップ等から復元して、ほとんどのアプリは事なきを得たのですが、部内SNS(内製)だけが致命的な打撃を被りました。\n\n一番被害が大きかったのがアップロードされたファイル群です。これらが一時全て削除されてしまいました。\nこれらは、非常に大容量なので別の場所にバックアップするのが億劫になって放ったらかしになっていたのでした……\n\nまた、重要な設定ファイルが損失してこちらの復旧も非常に大変でした。\n\n# 対応\n\n4/16夜から4/17早朝にかけてのお話です\n\n## 19:40 CTF鯖が起動\n\nサーバ構築を始めました。この時点でコマンドブロードキャストが有効になっています。\n（そういえばカーソルが変な形になってて妙だな……と思っていたのでした。。。）\n\n## 20:00 メインサーバに致命的なコマンドが飛ぶ\n\nちょっとやり直そうと思って`rm -rf`で色んな所消しました。\nメインサーバの大事なトコロにも直撃してます。\n\n## 20:10 メインサーバの死が報告され始める\n\nhttps://twitter.com/NorthWest_Bread/status/853568096845430784\n\nこの時点では何が起きたのか分かってません。\n\n## 20:30 全てを悟る\n\nさっきまで弄っていたCTF鯖とメイン鯖の`.bash_history`が一致しているのを見て何が起きたのか気が付きました。\n（なるほどね）（時既に遅し）（やばい）\n\n## 20:40 メインサーバを止める\n\n復元することを考えて、ディスクに上から書き込まれてしまわないようにサーバを止めました。\n`ddrescue`でディスクをダンプしておきました。\n\n## 20:50 いろいろ試してみる\n\nextundeleteとかを試してみますが、歯が立たず。\n\n## 21:00 データが無事なアプリを別サーバに移す\n\nとりあえず、ディスクをダンプしたデータから無事なアプリを復旧する作業に移る。\n新しくサーバを立て直します。\n\n## 22:00 gitホスティングサービスが復旧\n\nメンテナンス用コードなんかも入っているので真っ先に復旧させました。\n\n## 22:30 ブログが復旧\n\nブログにアップロードされたデータは全てオブジェクトストレージに逃がしていたので、無傷でした。\n\n## 22:50 wikiが復旧\n\nwikiも同じく、データの大部分がオブジェクトストレージにあるため無事。\n\n## 23:00 photorec/foremostでファイルを救出する作戦に出る\n\nextundeleteが不発だったので、👆を使ってファイルを抜き出します。\nただし、ファイル名がわからなくなってしまうのでDBとの整合性を取る作業が非常に大変になりそうだなぁとか思ってました。\nそもそも、アップロードされたファイルの情報は元のファイル名とサイズとタイムスタンプ、MIMEタイプしかありません。\nこのなかで使えるのはMIMEタイプとファイルサイズのみです。\n\n## 00:30 DBマイグレーション時の対応表を発見\n\n昔にDBスキーマを変更したときのバックアップデータを見つけました。\nこのデータを使うことで、約30%のデータが完全復旧できました。\n\n## 02:30 復元スクリプトが完成\n\nphotorec/foremostを併用してデータ復元作業を行います。\n\n## 03:10 復元完了\n\nおよそ 75% データが復元できました。\n13% のデータは、破損していて元に戻せませんでした。\n残りの 12% は、データはおそらく拾い出せているが、同じサイズやMIMEタイプのデータが複数存在するため、元のファイルがどれかわからない状態です。\nこちらについては、人力で対応表を作ればもとに戻せる可能性はあります。\n\n## 03:20 部内SNS復旧作業\n\nこちらもなかなか難航しました。\nなくなってしまったファイルの扱いについて、アプリの改修を行う必要がありました。\n\n部内のシステムは全て独自方式SSOで接続されており、ここでは公開鍵暗号を使って認証を行っています。\nここで用いていた権威サーバの秘密鍵が失われたので、アプリ側に配布している公開鍵を全て更新する作業が必要になりました。\n\nまた、APNsやGCMの通知に使うキーも失われたので再発行を行いました。\n\n## 05:00 再開\n\n全て元に戻りました。\n25%くらいのデータが欠けてしまいましたが……。\n\n# まとめ\n\n## 対策\n\n- バックアップは取る\n- むやみにrootにならない\n\t- いちいちsudoうつの面倒だったんだもん＞＜\n\n## extundelete\n\n無能\n（ext4だったからね）\n\n## photorecとforemost\n\nphotorecで戻せたけどforemostで戻らないファイルとか、その逆もある。\n両方合わせて使うと良いかもしれない。あとCTFer御用達の`binwalk`でも似たようなことができるのかな？\n\n## 感想\n\n同時送信怖すぎる……\nというかもっとわかりやすく表示してくれ\n\nお陰でCTFの準備が一ミリも進んでなくてマズい\nというかリアルにフォレンジックすることになるとは思わんかった\n\n教訓にします\n\nゴメンナサイm(_ _)m\n\n![](2.jpg)\n","title":"鯖が爆発した","image":null,"tags":["インフラ","日記"],"date":"2017-04-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"4","body":"神のグミ\n\n## Cケア フルーツアソート\n\nこれです（買い占めた）\n![](1.jpg)\n\n断面図\n![](2.jpg)\n中心部は柔らかいフツーのグミなんですが、その周りがコーティングされてて、\nこれがカリカリしてて絶妙にウマイ。\n\n味は4種類。左からアサイー＆ブルーベリー、グレープ、レモン、マスカット。\n![](3.jpg)\nオススメはレモンです。\n（この画像、[Google Dots](https://www.google.co.jp/search?q=Google+Dots&tbm=isch)をイメージしたんですけど、伝わるだろうか。）\n\n## 事始め\n\n時は2015年の春。\n\n青春18きっぷでの旅行中、岐阜県は中津川駅の売店で。\n同行者がレモン味のCケアを買ってて、1粒もらったんですが、もう神ががったウマさでしたね。\n\n## それから\n\nhttps://twitter.com/sekai67/status/723738046017851393\n\nhttps://twitter.com/sekai67/status/725300208720990208\n\nこれなかなか売ってないんですよね。近所のスーパーとかコンビニ探しまわったんですが、無い。\n\n## 神\n\n突如として某工大生協に現れた「Cケア フルーツアソート」\n\nhttps://twitter.com/sekai67/status/729564647381073920\n\nhttps://twitter.com/sekai67/status/744183520382197761\n\nビビリましたね……仕入れ担当者有能すぎない？？？？？\n\n## その後\n\nCケアうまいよ！！！ってメッチャ布教した結果\n\n\nhttps://twitter.com/sekai67/status/738249545398681600\n\nhttps://twitter.com/sekai67/status/742622738418786304\n\nhttps://twitter.com/sekai67/status/743305211029004289\n\nhttps://twitter.com/sekai67/status/744735770594840576\n\nは？キレた。\n\n## そして\n\n売り切れる前に買えばいいじゃんということで買い占めに走った結果、\n「**Cケアを買い占める害悪**」として噂されるようになりました。めでたしめでたし。\n\nhttps://twitter.com/sekai67/status/745104531084574721\n\nhttps://twitter.com/sekai67/status/745066944882040832\n","title":"Cケア","image":null,"tags":["Cケア","グミ","日記","食品"],"date":"2016-06-22T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},{"type":"article","slug":"3","body":"しました。\n\n# セキュリティ・キャンプ\n\nわりと昔から知ってたんですけど、セキュリテイに特段興味があったわけじゃなかったので、ふーんってカンジだったんですけど、\n去年の末にCTFを始めてから、セキュリティ興味あるある！ってなったので、今年はじめて応募してみた次第です。\n\n# 結果\n\nhttps://twitter.com/sekai67/status/742559409730027521\n\nなんか微妙な気持ち。\n他の参加者さんを見てると、知識や気概が自分よりはるかにあって、スゴイなーって。\nわりと軽いキモチで応募した自分なんかが入って良いのだろーか、みたいな。\n\nそんなことを言ってますが、なんだかんだ言って嬉しいです。\nせっかくセキュキャンに行くからには、**ガチ**でガンバリます。\n↓の応募用紙を見直してて勉強不足を痛感しましたし、精進します。\n\nということで、末席に名を連ねる運びと相成りましたが、どうぞよろしくお願い致します。\n\n# 応募用紙\n\nどんなことを書いたのか、晒します。（恥ずかしい。。。）\n\n## 共通問題1\n\n1. あなたが今まで作ってきたものにはどのようなものがありますか？いくつでもいいので、ありったけ自慢してください。\n2. それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\n3. 開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\n\nそのまま書くとアレなので、抜粋。\n\n- プログラミングはゲームを作りたくて始めたよ\n  - ゲームたくさん作ったよ\n  - HSPプロコンで入賞したりしたよ\n- U-20プロコンで賞をもらったよ\n- ソシャゲの情報を勝手に収集して公開するWebサービスを作ったよ\n  - クローラはJava、DBはMySQL、フロントはPHPだよ\n  - 月間15万PVくらいあるよ\n- 大学のサークル向けのクローズドなSNSを作ったよ\n  - サーバはnode.jsでSocket.ioで通信するよ\n  - SAML IdPになって他のサービスと連携できるようになってるよ\n  - クライアントはHTML/JSで書いて、いわゆるハイブリットアプリにてラクしたよ\n- OSSプロジェクトにちょっとだけコード投げてるよ\n\nみたいな事を書いた。\n\n## 共通問題2\n\n1. あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？(例えば、C言語プログラムを複数ファイルに分割する方法)\n2. また、その壁を乗り越えるために取った解決法を具体的に教えてください。 (例えば、知人に勧められた「〇〇」という書籍を読んだ)\n3. その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\n\n抜粋。\n\n- ドキュメントが充実してないライブラリ的なを使うのが辛かった\n- ググっても情報が手に入らないし、もう全部ソース読むわ\n  - ソース読んだら中身がメッチャよくわかるし神（それはそう）\n- 困ったらソース読もう\n  - ソース読んだらそのプロジェクトにContributeもできる！！！楽しい！！！！！\n\n## 共通問題3\n\nこれ、自分が思うに **一番大事な設問** な気がします。\n_強いけど学ぶ意欲が見られない人_ と _強くはないけどメッチャやる気のある人_ だったら、後者が通るだろうなぁ、って。\nその学ぶ意欲的なものをアピールするのがココなので。。。\n\nかく言う自分の書いたヤツ、微妙。。。\nなんか他の人が上げてるヤツ、ヤバい。まず分量が桁違い。\nなんでボク通ったんだろうか。\n\n### (1)あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？(複数可) そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\n\n> 「クラウドセキュリティ基礎」や「サーバ運用におけるパスワード管理」を初めとする、ネットワーク、Web系の講義に最も興味があります。\n> 先に述べたような、Webアプリケーションを作ったり、CTFコンテストに参加したりして、脆弱な実装は本当に怖いということを身を持って感じました。\n> そこで、セキュアなアプリケーションを作れるように、どのような攻撃手法が存在し、防ぐにはどうすればよいかを詳しく知っておきたいです。\n> また、「ID連携基礎」にも興味があります。実際に複数のアプリケーションでID連携をするソフトウェアを制作したのですが、\n> 直接パスワードなどを扱う部分であるため、本当に気をつけて実装しなければならないと感じ、認証技術についてより詳しく知らなければならないと思いました。\n> また、「人工知能とセキュリティ」にも興味があります。私は人工知能の研究にも興味があったのですが、それとセキュリティを関連付けて考えたことがありませんでした。\n> そのため、人工知能とセキュリティについて、知ることができれば、今後人工知能を扱うときに参考になるかと思いました。\n> また、「オンラインゲームアタック＆ディフェンスチャレンジ」や「スマートフォン向けゲームのセキュリティ」にも興味があります。\n> 私はこういったゲームでよく遊ぶのですが、こうしたゲームで散見されるチート行為、それがどのように行われ、運営者はそれをどのように見つけているのか、ずっと疑問に思っていました。\n> また私は大学のサークルでゲーム制作をしているので、オンラインのゲームを作る際に不正をどうやって取り締まればよいのか知っておきたいと思いました。\n\n\n### (2)あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？(複数可) 自由に答えてください。\n\n> 「今少し知っている」知識を深めることもそうですが、「今ほとんど知らない」分野の知識についても、出来る限り獲得したいと思っています。\n> セキュリティの分野で活躍するには、ある特定の分野にだけ長けているのでは対応しきれないと思っていて、\n> もちろん自分の得意な分野を極めるのもそうですが、様々な関連分野の知識を持ち、\n> そうした広い分野についての知識を持っておくことで、何をするにしても広く視野を持つことができるような人間になりたいと思います。\n> セキュリティ・キャンプに参加することで、そうしたセキュリティのエキスパートへの第一歩を踏み出せればと思います。\n> また、同じ分野に興味を持つ同年代の人と知り合える数少ない機会であるので、人脈を作ることもできればと思っています。\n\n### 選択問題2\n\n    Googleは、自社のサービスのセキュリティを高めるために様々なことを行っています。\n    ブラウザからGoogleの検索サービス( https://www.google.co.jp/ )にアクセスを行い、どのようなセキュリティ施策が行われているかを見つけなさい。\n    ブラウザは任意のもので構いません。ブラウザのどういった点からどういった施策を行っていると判断できるのか、その理由も含めてできるだけ多くの項目を回答してください。\n    拡張機能を利用しても構いませんが、ブラウザ以外の方法でアクセスしてはいけません。\n\n間違ってそう。\n\n> Chromeでアクセスするとまず目につくのは、アドレスバーに表示される緑色の鍵マークです。\n> クリックして詳細を表示すると、「安全なTLS接続」と表示されますが、\n> これはTLSを用いた接続を行っており、通信が正しく暗号化されていることを示しています。\n> また同時に「有効な証明書」と表示されますが、これはサーバー証明書の検証に成功し、\n> このコンテンツは確かにGoogle社のサーバーから提供されたものであることを示しています。\n> またスマートフォン版のChromeから見ると、「証明書の透明書に関する有効な情報がサーバーから提供されました」と表示され、\n> これはCertificateTransparencyという技術で、これはGoogleのサーバが提示した証明書が不正な証明書でないことを表しています。\n> また、「ECDHE_ECDSA」が鍵交換に使用されている旨が表示されますが、\n> ECDHEには前方秘匿性があり、サーバの持つ秘密鍵が万が一流出したとしても、過去の通信記録からその内容が暴かれることがなくなります。\n> またECDSAは、一般的なRSAと比べると同じセキュティレベルを得るために必要な鍵の長さが短いとされており、より安全性が高いと考えられます。\n> FirefoxでTLS証明書を見ると、署名アルゴリズムに「SHA-256」を利用しており、これは古い方式SHA-1に比べハッシュ衝突に対する高い耐性を持ちます。\n> また、Firebugなどの拡張機能を用いて通信を見ると、「X-Frame-Options: SAMEORIGIN」ヘッダが送信されているのがわかり、\n> これによって、フレームを利用しててこのページを別のサイトに組み込むことが出来ず、クリックジャッキングを防ぐことが出来ます。\n> また「X-XSS-Protection: 1; mode=block」ヘッダが送信されており、これによってブラウザのXSS対策機能を有効化しており、これによりある程度のXSSを防止することが出来ます。\n> また「Content-Type: text/html; charset=UTF-8」のようなヘッダで文字コードが指定されており、レガシーなブラウザを標的としたUTF-7 XSS攻撃も対策されています。\n> HTMLソースを表示すると、埋め込まれたJSコードも含め、圧縮（難読化）されているのがわかり、攻撃者にページ構造を理解させない措置とも見ることが出来ます。\n\n### 選択問題4\n\n    突然だが、RH Protocolで用いられるRHパケットのフォーマットを以下に示す。なおRH Protocolは実在しないプロトコルであり、その内容について特に意味は無い。\n    (略)\n    添付するバイナリは、とあるRHストリームのうち片方向のみを抽出したものである。\n    このバイナリストリームを読み込み、1つのRHパケットが以下の条件のすべてにマッチするときに標準出力に文字列\"PASS\"、 それ以外の場合は\"REJECTED\"と表示するCもしくはC++のプログラムを記述し、実行結果と共に提出せよ。\n    また、マッチングにかかるCPUサイクル及びメモリ使用量を計測し記載した場合、評価に加味する。\n    (略)\n\nごちうさ。\n\nなんかボクの書いたやつ、ミスってる気がする。\n応募用紙上げてる人の出力結果と一致してない……オワタ……ってなってた。\n（結局わからず）\n\n```C\n#include <iostream>\n#include <string>\nusing namespace std;\n\n/* データの長さ */\n#define MAGIC_LENGTH 2\n#define SRC_LENGTH   20\n#define DST_LENGTH   20\n\n/* RH Packet 構造体 */\ntypedef struct {\n    string Magic;\n    string Source;\n    string Destination;\n    int DataLength;\n    string Data;\n} Packet;\n\n/* 文字列を小文字に */\nstring toLower(string in){\n    for(int i = 0; i < in.length(); i++){\n        in[i] += ('A' <= in[i] && in[i] <= 'Z' ? 32 : 0);\n    }\n    return in;\n}\n/* 16進数のcharを１０進数のintに */\nint hexToDec(char a){\n    return '0' <= a && a <= '9' ? a - '0' : a - 'a' + 10;\n}\n/* ストリームから1byte分のデータを読む */\nchar readByte(){\n    char buf, buf2;\n    while(cin >> buf){\n        if(('0' <= buf && buf <= '9') || ('a' <= buf && buf <= 'f')){\n            cin >> buf2;\n            return 16 * hexToDec(buf) + hexToDec(buf2);\n        }\n    }\n    return -1;\n}\n/* ストリームからintを読む */\nint readInt(){\n    int val;\n    for(int i = 3; i >= 0; i--){\n        char byte = readByte();\n        if(byte == -1){\n            return -1; /* 標準入力が終端に達しているとき-1を返す */\n        }\n        ((char*) &val)[i] = byte;\n    }\n    return val;\n}\n/* ストリームから文字列を読む */\nstring readString(int length){\n    char bytes[length + 1];\n    for(int i = 0; i < length; i++){\n        bytes[i] = readByte();\n    }\n    bytes[length] = '\\0';\n    return bytes;\n}\n/* ストリームからパケットを読む */\nPacket readPacket(){\n    Packet p;\n    p.Magic = readString(MAGIC_LENGTH);\n    p.Source = readString(SRC_LENGTH);\n    p.Destination = readString(DST_LENGTH);\n    p.DataLength = readInt();\n    p.Data = readString(p.DataLength);\n    return p;\n}\n\n/* パケットの正当性確認 */\nbool checkPacket(Packet p){\n    return\n    /* Condition 1 */\n    ( p.Magic == \"RH\" ) &&\n    /* Condition 2 */\n    ( toLower(p.Source) == \"rise-san\" ||\n      toLower(p.Source) == \"cocoa-san\" ) &&\n    /* Condition 3 */\n    ( toLower(p.Destination) == \"chino-chan\" ||\n      toLower(p.Destination) == \"chino\" ) &&\n    /* Condition 4 */\n    ( toLower(p.Source) != \"cocoa-san\" ||\n      toLower(p.Destination) != \"chino\" ) &&\n    /* Condition 5 */\n    ( p.Data.find(\"BlueMountain\") != string::npos ||\n      p.Data.find(\"Columbia\") != string::npos ||\n      p.Data.find(\"OriginalBlend\") != string::npos ) &&\n    /* Condition 6 */\n    ( p.Data.find(\"DandySoda\") == string::npos &&\n      p.Data.find(\"FrozenEvergreen\") == string::npos ) ;\n}\n\nint main(){\n    while(!cin.eof()){\n        Packet p = readPacket(); /* 1パケットを読む */\n        if(p.DataLength == -1){\n            break; /* 読み込みができていないとき */\n        }\n        cout << (checkPacket(p) ? \"PASS\" : \"REJECTED\") << endl; /* パケットを確認 */\n    }\n    return 0;\n}\n```\n\n出力結果\n>PASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nPASS\nREJECTED\nPASS\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\nREJECTED\n\n### 選択問題6\n\n    IDとパスワードを入力したユーザの認証を行うWebアプリがあります。\n    あなたがこのアプリに対してセキュリティテストを行う場合、まず、どのようなテストをしますか？\n    なぜそのテストを選択したのか、その背景や技術的根拠と共に記載してください。\n    アプリの内部で使われている技術やシステム構成に、前提を置いても構いません。\n\nなんか応募する直前にksnctfをやってたので、ksnctfの問題にあった脆弱性をてきとうに挙げました(ﾉ≧ڡ≦)\n（ひどい）\n\n> まず、適当なURL、「./user.db」「./accouts.sqlite3」などにアクセスを試みます。\n> SQLite3を使用したシステムの場合、このようなデータベースファイルへ外部からアクセスできるようになっている場合、ユーザーの情報が簡単に盗まれてしまいます。\n>\n> 次に、ログインフォームに「'」や「\"」といった文字列を入力し挙動を見たり、、パスワードに「' OR '' = '」のような文字列を入力してログイン出来ないか調査します。\n> サーバーがデータの格納にSQLを使用しており、SQLで意味のある文字を適切にエスケープしていない場合、このようなSQLをインジェクション攻撃によって、\n> 不正にデータを書き換えたり、秘匿なデータを盗み出したり、パスワードを知らずともログインできたり、パスワードがハッシュ化されていても平文を求めることができてしまいます。\n>\n> 次に、スクリプトを用いて高頻度のログインリクエストを送信します。\n> 高頻度のリクエストに対して、Captchaのような画像認証をはじめとするBOT対策がなされていないと、ブルートフォース攻撃に晒される可能性があります。\n>\n> 次に、「password」のようなパラメータ名が設定されているフォームに対し、「password[]」のようなパラメータでリクエストを送信します。\n> サーバがPHPで実装されており、strcmpのような関数と曖昧な比較演算子(==)でパスワード比較がされていると、これでパスワード認証を突破される可能性があります。\n>\n> 次に、ユーザの入力したデータが再び表示されるようになっていないかを確認します。（パスワードが間違っていた場合、ユーザー名が予め入力されているなど）\n> このような機能がある場合、&lt;script&gt;タグでコードを埋め込めるようになっていないかを確認します。\n> 適切にエスケープされていない場合、XSS攻撃でCookieなどを盗まれる可能性があります。\n>\n> 次に、セッション情報のCookieがどのような形で渡されているのかを確認します。\n> Cookieにユーザー識別情報が乗せられていて、MD5のような脆弱なハッシュ関数で署名されていた場合、書き換えられる可能性があります。\n> また、署名の作り方によっては、LengthExtension攻撃などによって認証を突破される可能性があるので、この攻撃も試行します。\n\n### 選択問題11\n\n    2015 年に発行された CVEの内、あなたが興味を持った\"サーバに存在した\"脆弱性について１つ提示してください。\n    その脆弱性を悪用した攻撃を検知する方法について詳細に記述してください。また、興味を持った理由を記述してください。\n    CVE番号:CVE-2015-◯◯◯◯\n\n\n> 私が興味を持ったのは、CVE-2015-8669です。\n> この脆弱性は、phpMyAdminの古いバージョンに存在し、/libraries/config/messages.inc.phpという、\n> UI文字列情報が格納され、他のphpファイルからインクルードされることを想定したファイルに直接アクセスすることで引き起こされます。\n> このファイルに直接アクセスすることによって、本来は別のphpファイルで定義されるはずの関数が定義されておらず、\n> それを呼び出してしまうことで、スクリプトのフルパス情報を含むエラーメッセージを出力してしまうというものです。\n>\n> [攻撃を検知する方法]\\\n> HTTPサーバのアクセスログを確認することによって、容易に検知することが出来ます。\n> 攻撃を受けた場合、/libraries/config/messages.inc.phpへのアクセスが記録されます。\n> また、エラーログには実際に攻撃者に表示されたものと同じメッセージが記録されており、ここからも検知が出来ます。\n>\n> 実際のログ\\\n> 127.0.0.1 - - [30/May/2016:00:51:02 +0900] \"GET /phpmyadmin/libraries/config/messages.inc.php HTTP/1.1\" 200 266 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\"\\\n> [Mon May 30 00:51:02.871439 2016] [:error] [pid 8968:tid 1836] [client 127.0.0.1:52477] PHP Fatal error:  Uncaught Error: Call to undefined function PMA_fatalError() in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php:14\\nStack trace:\\n#0 {main}\\n  thrown in C:\\\\xampp\\\\htdocs\\\\phpmyadmin\\\\libraries\\\\config\\\\messages.inc.php on line 14\\\n>\n> [興味を持った理由]\\\n> まず、phpMyAdminは自分がよく利用するプロダクトの一つであったからです。\n> 次に、この脆弱性では、（サーバの設定によっては）ブラウザから当該のURLにリクエストを送るだけで成立してしまうなど、比較的簡単に攻撃が成立するのが面白いと思いました\n> また、これはベンダの発表文書でも述べられていたことですが、PHPの設定自体が適切にされていれば攻撃は成立せず、\n> この設定（display_errors = off）はテスト用サーバー以外では普通は設定されるものであり、\n> また仮に攻撃が成立したとしても、その被害はさほど大きなものでなく（phpMyAdminが設置されるパスが漏れるだけ）、\n> 私は一瞬「大した脆弱性ではないのではないか」と思ってしまいましたが、\n> こうして大々的に記録されているところを見て、このようにどんな小さな脆弱性であっても、それが大きな攻撃の糸口とならないよう、\n> 常に注意していくべきなのだなと、考えを改めさせられました。\n> このように、自分のセキュリティに対する意識にも関わるものであったため、このCVEに興味を持ちました。\n","title":"セキュリティ・キャンプ2016に応募した","image":null,"tags":["日記","セキュリティ・キャンプ","セキュリティ"],"date":"2016-06-15T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},{"type":"article","slug":"2","body":"最近にCTFにハマっています。\n\n# CTFってなに\n\n_CTF (Capture the Flag): 旗取り合戦_\n\nここではコンピュータセキュリティ競技のこと。\n\n「各チームにコンピュータが与えられてそれぞれのコンピュータの中の情報を奪い合う」攻防戦形式と、\n「複数に渡る分野の問題が出題される」クイズ形式(Jeopardy)がある。\n\nらしいです。（[traP](https://trap.jp/)部内CTF勉強会資料から引用）\n\n要は世間一般の人が _ハッカー_ って聞いて思い浮かべるようなアレを競うやつですね。\n\nまぁとにかく、 **楽しい** です。\n\nとっても勉強になるし、パズルみたいに頭を使うし、（答えを見ずに）解けた時には得も言われぬ達成感があります。\nさっきのザックリした説明を読んで興味を持った人はぜひぜひやりましょう。\n\n# CTFやろう\n\nCTFはたまーにデカい大会が催されるんですが、\nそれ以外にも常設のCTFサイトがいくつかあって、\nそこで問題にチャレンジできます。\n\n## オススメ常設CTF\n- [OverTheWire Bandit](http://overthewire.org/wargames/bandit/)\n  - 基礎中の基礎みたいなかんじ。初めての人にメッチャおすすめ。英語だけど。。。\n- [OverTheWire Natas](http://overthewire.org/wargames/natas/)\n  - Web系の問題。Web系はとっつきやすい（感じがする）ので、Banditが終わったらおすすめ。\n- [ksnctf](http://ksnctf.sweetduet.info/)\n  - 日本の有名なCTFサイト。いろんな分野の問題がある。\n\n# かくいう自分は\n\nhttps://twitter.com/sekai67/status/679199513702100992\n\nなんか去年の末に[@kotarou777775](https://twitter.com/kotarou777775)くんに誘われて始めたばっかりなので、\nクソ雑魚かつWeb系しか解けなくてまだまだなカンジなんですけど、ガンバりたい。\n\nこの前同じ大学の人達のチームに入れてもらって[Google Capture The Flag](https://capturetheflag.withgoogle.com/)に出たんですが、\n\n- Wallowing Wallabies - Part Two\n- Wallowing Wallabies - Part Three\n- Purple Wombats\n- Flag Storage Service\n\nの４つをガンバって解きました。全部Webだけど。。。\n\nチームにガチプロ👏が多かったおかげか全体で85位でした。やべぇ。\n\n# 以上\n\nCTFやろう\n","title":"CTFのはなし","image":null,"tags":["CTF","セキュリティ","日記"],"date":"2016-06-08T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"}]},"__N_SSG":true}