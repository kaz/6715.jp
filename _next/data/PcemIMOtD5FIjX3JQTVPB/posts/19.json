{"pageProps":{"article":{"type":"article","slug":"19","body":"AzureのWindowsServerでVOICEROIDを動かします\n\n[前回](/posts/18/)の続きです。\n\n# あらすじ\n\n前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n今回は、クラウドサービス上（というか適当なサーバ）できりたんに働いてもらおうと思います。\n\n![](kiritan.png)\n\n# Microsoft Azure\n\nMicrosoft AzureのVirtual Machinesでは、WindowsServerのインスタンスを立ち上げることが出来ます。\nそのへんのWindows VPSサービスを比べるとちょっと割高な感じはします。（それはそう）\n\nなんかAzureではWindows Client（普通のWindows 10とか）も使えるっぽいんですが、\nMSDNサブスクリプションが必要とかでアレなので、今回はWindowsServerで行きます。\n\nぶっちゃけKVMベースのVPSサービスならWindowsが普通にインストールできるような気がしますが、\n契約関係で怖い人から怒られるので避けるのが無難です。\n\n~~学生なら、Microsoft Imagine(旧Dreamspark)からWindows Sever 2016のライセンスがタダでもらえるので、コレを使って自宅鯖を建てるのもアリかと思います。~~[^imagine]\n\n[^imagine]: Microsoft Imagineは終了したらしいです。\n\n## インスタンス作成\n\nAzure Portalから適当にインスタンスを作ります。\nインスタンスのサイズですが、メモリ0.75GBだとかなり厳しさがあるので1.75GBが最低ラインな感じがあります。\n\nあと、デフォルトだと鬼高いサイズしか表示されなくて焦るんですが、\n**サポートされるディスクの種類**を**SSD**にして、**全て表示**を押すとお手頃サイズが出てきます。\n\n![](1.png)\n\nボクは無料試用クレジットを使い切るために強めのインスタンスを建てました。\n\nインスタンスを作成したときに勝手に**ネットワークセキュリティグループ**というリソースが作成されており、\nこの設定を変えてポートを開けないとリモートデスクトップ接続(RDP)ができません。\n\n対象のネットワークセキュリティグループを開いて、**受信セキュリティ規則 → 追加**で設定画面を開き、\nサービスから**RDP**を選択して許可します。\n\n![](2.png)\n![](3.png)\n\nこのあとHTTPも使うので、ついでにHTTPを許可する設定も追加しておきましょう。\n先程と同様にして設定画面を開き、サービスから**HTTP**を選択して許可します。\n\n# サーバ設定\n\nWindowsServerを使う場合は、いろいろ設定が必要になります。\n普通のWindowsを使う場合は不要なものも多いので、軽く目を通す程度で。\n\n## RDP\n\nリモートデスクトップ接続(RDP)を使ったほうが色々便利なので、そうします。\nAzureだと、勝手にONになっているのでこの設定は不要です。\n\nサーバマネージャを起動して、**ローカルサーバ → リモートデスクトップ → このコンピュータへのリモート接続を許可する**にチェックを入れてOKを押します。\n\n![](4.png)\n\n## .NET Framework\n\n普通のWindowsだと必要になったときにダイアログが出てきて簡単にインストールできますが、\nWindowsServerだとそうはいきません。\n\nサーバマネージャを起動して、**管理 → 役割と機能の追加 → .NET Framework 3.5 Features**にチェックを入れてインストールします。\n\n![](5.png)\n\n## ファイアウォール\n\nこのあとHTTPをきりたんと通信するインタフェースとして使うので、`80/tcp`を開放します。\n\nサーバマネージャを起動して、**ローカルサーバ → Windowsファイアウォール → 詳細設定 → 受信の規則 → 新しい規則**\nで出てくるダイアログに従って、80番ポートを開放します。\n\n![](6.png)\n\n## IEの制限解除\n\nWindowsServerではデフォルトでIEが機能制限されているので、解除します。\nこの後Pythonをインストールしたりするときに問題があるためです。\n\nサーバマネージャを起動して、**ローカルサーバ → IEセキュティ強化の構成 → Administratorsグループ → オフ**にチェックを入れてOKを押します。\n今回はいろいろラクをするためにAdministratorで進めていきますが、一般ユーザで行う場合はUsersグループのセキュティ強化の構成をオフにしてください。\n\n![](7.png)\n\n# VOICEROIDのインストール\n\n普通にインストーラからインストールできます。\n1ライセンスで1PCにしかインストール出来ないので、注意しましょう。\n\n## ライセンス認証\n\nサーバ起動後、一度でもRDPで接続していると**ライセンス認証に失敗**するようになります。\n多分、ライセンス認証ドライバ（Sentinel LDK License Manager）がRDPを検知して爆発してるからです。\nRDPで繋ぐような環境で使うな！！！ってことっぽいのでちょっとグレーかもしれません……\n\n回避策として、RDPで繋ぐ前にきりたんを起動してしまいます。\n\n- 起動時に自動ログインさせる\n- ログイン時にきりたんを自動起動する\n\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`に以下の3つのキーを作成します。\n\n- AutoAdminLogon\n\t- DWORDで値は`1`\n- DefaultUserName\n\t- ログインするユーザ名\n- DefaultPassword\n\t- ログインユーザのパスワード\n\n![](8.png)\n\nこれで、起動時に勝手にログインするようになります。\n\n次に、スタートメニューを出して`gpedit.msc`を入力してエンターし、\n**ユーザの構成 → Windowsの設定 → スクリプト → ログオン**を開き、\nVOICEROIDのEXEファイルを指定します。\n\n![](9.png)\n\nこれで、ログイン後に自動でVOICEROIDが起動します。\n\nこれによって、サーバ起動時に勝手にログインしてきりたんが立ち上がります。\nかなり筋肉ソリューション感が強いですが、仕方がない＞＜\n\n## 起動時のエラー\n\nAzure上だとサウンドデバイスがないので、起動時にエラーが表示され、再生ボタンが押せなくなります。\n音声保存はできるので、今回は問題ありません。\n\n# PythonでVOICEROIDをサーバ化\n\n[前回](/posts/18/)PythonからVOICEROIDを操作できるようになったので、\nあとはHTTPからリクエストを受けて音声ファイルを返すようにするだけです。\n\nサーバへPythonとFFMPEGをインストールしておきましょう。\nGUIがあるので普通にやるだけです。かんたん。\n\n## やりました\n\n方針が定まったら書くだけ……\nflaskを使って書きました。\n\nVOICEROID操作のコードは[前回](/posts/18/)の記事を参照してください。\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`です\n\n```sh\npip install pypiwin32 flask\n```\n\n### コード\n\nhttps://github.com/kaz/kiritan-server/blob/aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448/server.py\n\n```python\n# coding: UTF-8\n\nimport flask\nimport subprocess\n\napp = flask.Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef get():\n\tr = flask.request\n\ttext = r.form['text'] if r.method == \"POST\" else r.args.get('text', None)\n\n\tif text == None:\n\t\treturn 'plz specify `text`'\n\n\tcompleted = subprocess.run(\n\t\t['python', 'talk.py', text],\n\t\tencoding='ascii',\n\t\tstdout=subprocess.PIPE,\n\t\ttimeout=30\n\t)\n\n\treturn flask.send_from_directory('./', completed.stdout.strip())\n\nif __name__ == '__main__':\n\tapp.debug = True\n\tapp.run(host='0.0.0.0', port=80)\n```\n\n## 注意\n\n一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。\n保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、\nスクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。\n\n手抜きです……\n\n# 次回予告\n\nということで、HTTPで好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。\nコレでブラウザさえあればきりたんボイスが聴けてしまうわけです。ああ＾～きりたんかわいい！！！！\n\n次回は、コイツを更に改造してきりたんボイスをライブストリーミングしてみる実験です。\n\n[クラウド東北きりたん その3 ～HLSでライブストリーミング～](/posts/20/)\n","title":"クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～","image":null,"tags":["Azure","VOICEROID","WindowsServer","クラウド","東北きりたん"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"AzureのWindowsServerでVOICEROIDを動かします 前回の続きです。 あらすじ 前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるよう…","content":"<p>AzureのWindowsServerでVOICEROIDを動かします<p><a href=/posts/18/>前回</a>の続きです。<h1>あらすじ</h1><p>前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。<aside><a href=/posts/18/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/18/>Win32APIでVOICEROIDをいじってみます 東北きりたん VOICEROID+ 東北きりたん EXを買いました。 http://www.ah-soft.com/voiceroid/kiri…</q></div></a></aside><p>今回は、クラウドサービス上（というか適当なサーバ）できりたんに働いてもらおうと思います。<p><img alt src=kiritan.png><h1>Microsoft Azure</h1><p>Microsoft AzureのVirtual Machinesでは、WindowsServerのインスタンスを立ち上げることが出来ます。 そのへんのWindows VPSサービスを比べるとちょっと割高な感じはします。（それはそう）<p>なんかAzureではWindows Client（普通のWindows 10とか）も使えるっぽいんですが、 MSDNサブスクリプションが必要とかでアレなので、今回はWindowsServerで行きます。<p>ぶっちゃけKVMベースのVPSサービスならWindowsが普通にインストールできるような気がしますが、 契約関係で怖い人から怒られるので避けるのが無難です。<p><del>学生なら、Microsoft Imagine(旧Dreamspark)からWindows Sever 2016のライセンスがタダでもらえるので、コレを使って自宅鯖を建てるのもアリかと思います。</del><sup id=fnref-imagine><a href=#fn-imagine class=footnote-ref>1</a></sup><h2>インスタンス作成</h2><p>Azure Portalから適当にインスタンスを作ります。 インスタンスのサイズですが、メモリ0.75GBだとかなり厳しさがあるので1.75GBが最低ラインな感じがあります。<p>あと、デフォルトだと鬼高いサイズしか表示されなくて焦るんですが、 <strong>サポートされるディスクの種類</strong>を<strong>SSD</strong>にして、<strong>全て表示</strong>を押すとお手頃サイズが出てきます。<p><img alt src=1.png><p>ボクは無料試用クレジットを使い切るために強めのインスタンスを建てました。<p>インスタンスを作成したときに勝手に<strong>ネットワークセキュリティグループ</strong>というリソースが作成されており、 この設定を変えてポートを開けないとリモートデスクトップ接続(RDP)ができません。<p>対象のネットワークセキュリティグループを開いて、<strong>受信セキュリティ規則 → 追加</strong>で設定画面を開き、 サービスから<strong>RDP</strong>を選択して許可します。<p><img alt src=2.png> <img alt src=3.png><p>このあとHTTPも使うので、ついでにHTTPを許可する設定も追加しておきましょう。 先程と同様にして設定画面を開き、サービスから<strong>HTTP</strong>を選択して許可します。<h1>サーバ設定</h1><p>WindowsServerを使う場合は、いろいろ設定が必要になります。 普通のWindowsを使う場合は不要なものも多いので、軽く目を通す程度で。<h2>RDP</h2><p>リモートデスクトップ接続(RDP)を使ったほうが色々便利なので、そうします。 Azureだと、勝手にONになっているのでこの設定は不要です。<p>サーバマネージャを起動して、<strong>ローカルサーバ → リモートデスクトップ → このコンピュータへのリモート接続を許可する</strong>にチェックを入れてOKを押します。<p><img alt src=4.png><h2>.NET Framework</h2><p>普通のWindowsだと必要になったときにダイアログが出てきて簡単にインストールできますが、 WindowsServerだとそうはいきません。<p>サーバマネージャを起動して、<strong>管理 → 役割と機能の追加 → .NET Framework 3.5 Features</strong>にチェックを入れてインストールします。<p><img alt src=5.png><h2>ファイアウォール</h2><p>このあとHTTPをきりたんと通信するインタフェースとして使うので、<code>80/tcp</code>を開放します。<p>サーバマネージャを起動して、<strong>ローカルサーバ → Windowsファイアウォール → 詳細設定 → 受信の規則 → 新しい規則</strong> で出てくるダイアログに従って、80番ポートを開放します。<p><img alt src=6.png><h2>IEの制限解除</h2><p>WindowsServerではデフォルトでIEが機能制限されているので、解除します。 この後Pythonをインストールしたりするときに問題があるためです。<p>サーバマネージャを起動して、<strong>ローカルサーバ → IEセキュティ強化の構成 → Administratorsグループ → オフ</strong>にチェックを入れてOKを押します。 今回はいろいろラクをするためにAdministratorで進めていきますが、一般ユーザで行う場合はUsersグループのセキュティ強化の構成をオフにしてください。<p><img alt src=7.png><h1>VOICEROIDのインストール</h1><p>普通にインストーラからインストールできます。 1ライセンスで1PCにしかインストール出来ないので、注意しましょう。<h2>ライセンス認証</h2><p>サーバ起動後、一度でもRDPで接続していると<strong>ライセンス認証に失敗</strong>するようになります。 多分、ライセンス認証ドライバ（Sentinel LDK License Manager）がRDPを検知して爆発してるからです。 RDPで繋ぐような環境で使うな！！！ってことっぽいのでちょっとグレーかもしれません……<p>回避策として、RDPで繋ぐ前にきりたんを起動してしまいます。<ul><li>起動時に自動ログインさせる<li>ログイン時にきりたんを自動起動する</ul><p><code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon</code>に以下の3つのキーを作成します。<ul><li>AutoAdminLogon<ul><li>DWORDで値は<code>1</code></ul><li>DefaultUserName<ul><li>ログインするユーザ名</ul><li>DefaultPassword<ul><li>ログインユーザのパスワード</ul></ul><p><img alt src=8.png><p>これで、起動時に勝手にログインするようになります。<p>次に、スタートメニューを出して<code>gpedit.msc</code>を入力してエンターし、 <strong>ユーザの構成 → Windowsの設定 → スクリプト → ログオン</strong>を開き、 VOICEROIDのEXEファイルを指定します。<p><img alt src=9.png><p>これで、ログイン後に自動でVOICEROIDが起動します。<p>これによって、サーバ起動時に勝手にログインしてきりたんが立ち上がります。 かなり筋肉ソリューション感が強いですが、仕方がない＞＜<h2>起動時のエラー</h2><p>Azure上だとサウンドデバイスがないので、起動時にエラーが表示され、再生ボタンが押せなくなります。 音声保存はできるので、今回は問題ありません。<h1>PythonでVOICEROIDをサーバ化</h1><p><a href=/posts/18/>前回</a>PythonからVOICEROIDを操作できるようになったので、 あとはHTTPからリクエストを受けて音声ファイルを返すようにするだけです。<p>サーバへPythonとFFMPEGをインストールしておきましょう。 GUIがあるので普通にやるだけです。かんたん。<h2>やりました</h2><p>方針が定まったら書くだけ…… flaskを使って書きました。<p>VOICEROID操作のコードは<a href=/posts/18/>前回</a>の記事を参照してください。<p>ffmpegを使っているので、別途用意が必要です。 必要なPythonのライブラリは<code>pypiwin32</code>と<code>flask</code>です<pre><code class=\"hljs language-sh\">pip install pypiwin32 flask\n</code></pre><h3>コード</h3><aside><a href=https://github.com/kaz/kiritan-voice style=background-image:url(https://opengraph.githubassets.com/9a788297f5df43aaf6a607c9937e8433aad981c9a7c97f5388ae98a2618c7f53/kaz/kiritan-voice) rel=\"noopener noreferrer\"target=_blank><div><strong>kiritan-voice/server.py at aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448 · kaz/kiritan-voice</strong><cite>github.com</cite><q cite=https://github.com/kaz/kiritan-voice>VOICELOID Web API Server. Contribute to kaz/kiritan-voice development by creating an account on GitHub.</q></div></a></aside><pre><code class=\"hljs language-python\"><span class=hljs-comment># coding: UTF-8</span>\n\n<span class=hljs-keyword>import</span> flask\n<span class=hljs-keyword>import</span> subprocess\n\napp = flask.Flask(__name__)\n\n<span class=hljs-meta>@app.route(<span class=hljs-params><span class=hljs-string>'/'</span>, methods=[<span class=hljs-string>'GET'</span>, <span class=hljs-string>'POST'</span>]</span>)</span>\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>get</span>():</span>\n\tr = flask.request\n\ttext = r.form[<span class=hljs-string>'text'</span>] <span class=hljs-keyword>if</span> r.method == <span class=hljs-string>\"POST\"</span> <span class=hljs-keyword>else</span> r.args.get(<span class=hljs-string>'text'</span>, <span class=hljs-literal>None</span>)\n\n\t<span class=hljs-keyword>if</span> text == <span class=hljs-literal>None</span>:\n\t\t<span class=hljs-keyword>return</span> <span class=hljs-string>'plz specify `text`'</span>\n\n\tcompleted = subprocess.run(\n\t\t[<span class=hljs-string>'python'</span>, <span class=hljs-string>'talk.py'</span>, text],\n\t\tencoding=<span class=hljs-string>'ascii'</span>,\n\t\tstdout=subprocess.PIPE,\n\t\ttimeout=<span class=hljs-number>30</span>\n\t)\n\n\t<span class=hljs-keyword>return</span> flask.send_from_directory(<span class=hljs-string>'./'</span>, completed.stdout.strip())\n\n<span class=hljs-keyword>if</span> __name__ == <span class=hljs-string>'__main__'</span>:\n\tapp.debug = <span class=hljs-literal>True</span>\n\tapp.run(host=<span class=hljs-string>'0.0.0.0'</span>, port=<span class=hljs-number>80</span>)\n</code></pre><h2>注意</h2><p>一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。 保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、 スクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。<p>手抜きです……<h1>次回予告</h1><p>ということで、HTTPで好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。 コレでブラウザさえあればきりたんボイスが聴けてしまうわけです。ああ＾～きりたんかわいい！！！！<p>次回は、コイツを更に改造してきりたんボイスをライブストリーミングしてみる実験です。<aside><a href=/posts/20/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>クラウド東北きりたん その3 ～HLSでライブストリーミング～</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/20/>HLSを使ったライブストリーミングを試してみます 前々回・前回の続きです。 あらすじ 前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったので…</q></div></a></aside><div class=footnotes><hr><ol><li id=fn-imagine>Microsoft Imagineは終了したらしいです。<a href=#fnref-imagine class=footnote-backref>↩</a></ol></div>"},"__N_SSG":true}