{"pageProps":{"article":{"type":"article","slug":"28","body":"ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。\n\nボク、[@sekai67](https://twitter.com/sekai67)はNaruseJunチームの一員として出場しました。結果はこう。\n\n- 予選では、本選出場圏内の点数を取って余裕をカマしていましたが、追試をパスできずに予選落ち。\n- 本選では、[本選ライブ](http://isucon.net/archives/55063136.html)の企画で、並行チームとして問題に取り組ませてもらう。\n\t- 競技中最高得点 **52567** を記録するものの、追試をパスできず記録なし。伝統芸能\n\nこれは記念写真です。\n\n![](score.png)\n\nまあ追試で落ちてるんですけどね！\n\n参加記はチームメイトの[@to_hutohu](https://twitter.com/to_hutohu)と[@takashi_trap](https://twitter.com/takashi_trap)が書いてくれると信じて、ボクはちょっとしたこぼれ話を書いていきます。\n\n## やらかしリスト\n\n予選、本選どちらにおいても、思い返すとまあいろいろやらかしたんですが、今回は興味深かった2つを抜粋して掘り下げます。\n\n- 予選時、再起動試験を5回ぐらいして、追試落ちは絶対ない状態まで持っていったのに無事追試落ちした話\n- 本選開始後、初手でサーバの1台を使い物にならなくしてチームメイトを困惑させた話\n\n## 予選の追試で落ちた\n\n### 経緯\n\n予選では、チームメイトの2人がわりとギリギリまでアプリ実装のバグ取りを詰めていたので、ボクが1人で再起動試験や後片付けを担当することになりました。\n去年も再起動後に正しく動作させることができずに予選落ちしていますので、今年こそは！と念入りに何度も行っていました。\n\n5回ほど再起動してもOK、再起動後にもデータも正しく引き継がれている。絶対落ちないだろコレは！！！\nと自信満々で競技を終えたわけですが、結果発表でチーム名が呼ばれることはありませんでした……\n\n夜中、凹みつつも競技で使ったサーバの様子を見に行ってみると……\nDBサーバが落ちてるやんけ！！！！！なんで？？！？！？？！？？！！！\n\n### 理由\n\napparmorのポリシー(mysql-serverパッケージに入ってる`/etc/apparmor.d/usr.sbin.mysqld`)が生きていて、systemdがmariadbの起動を検知できておらず、`systemctl stop`相当の処理がかかったため。\n\nUbuntuで、最初にmysqlが動いている状態から、これをmariadbに置き換えると起動しなくなるという事例があります。\nこちらの記事が詳しいです。\n\n[Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない](/posts/24/)\n\n## 疑問1: mariadbに入れ替えたときにto-hutohuが`aa-remove-unknown`でポリシーを消したのでは？\n\n先ほど紹介した記事を書いたのはボクです。ですので、もちろんこの挙動については知っていました。\n上記記事で紹介されている対策法をもちろん講じています。\n\nが、これはそもそも恒久対応ではありませんでした……！\nわかりにくい書き方でゴメンナサイ。\n\n先の記事で言及している、\n\n> /etc/apparmor.d/usr.sbin.mysqldは空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。\n> また、systemctl reload apparmorしても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。\n\nここの理解が曖昧、あるいは間違っています。\n\nポリシーがOSを再起動しても消えない原因は、apparmorのポリシーキャッシュのせいで、`/etc/apparmor.d/cache/usr.sbin.mysqld`が存在して、かつ`/etc/apparmor.d/usr.sbin.mysqld`よりタイムスタンプが新しい場合、キャッシュのほうが読み込まれるという挙動をします。\n\n- `/etc/apparmor.d/cache/usr.sbin.mysqld`が作成されるのは、mysql-serverインストール時。\n\t- つまりタイムスタンプは → `Sep 11 11:34`\n- `/etc/apparmor.d/usr.sbin.mysqld`のタイムスタンプは、mariadbパッケージが作成された時。\n\t- つまりタイムスタンプは → `Jul 20 10:50`\n\nですので、`/etc/apparmor.d/usr.sbin.mysqld`が更新されたにも関わらず、キャッシュのほうがずっと読み込まれ続けてしまうのでした……！\n\n正しい対応は、`systemctl reload apparmor`でした。\nこれでキャッシュのflushが走り、正しくmariadbに起動するようになります。\n\n例の記事については、そのうち書き換えておきますね……\n\n### 疑問2: sekaiが再起動試験を行ったときにうまく動作していたのは何故？\n\n再起動後15分以内にのみ試験していたからです。\n\nAppArmorのせいでmariadbに起動に失敗するというのは、厳密に言うと、 **mariadbは起動に成功しているんだけどsystemdがそれを検知できていない** ということ。\nsystemdは一定時間（デフォルトで15分）以内にサービスの起動を確認できないと、ご丁寧にExecStopを走らせてくれるのです……！\n\nsekaiが再起動したのは **11:39:26 UTC** ごろ。\n\n```\n-- Reboot --\nSep 12 11:39:26 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 11:39:32 s2 mysqld[1244]: 2020-09-12 11:39:32 139768179551360 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1244 ...\nSep 12 11:45:11 s2 systemd[1]: Stopped MariaDB 10.1.44 database server.\n-- Reboot --\n```\n\n11:45:11にStopしてるのは、このあともう一度再起動試験したためです。\n\nこの付近のkern.logは以下。\n\n```\nSep 12 11:39:35 s2 kernel: [   42.180656] audit: type=1400 audit(1599910775.956:18): apparmor=\"DENIED\" operation=\"sendmsg\" info=\"Failed name lookup - disconnected path\" error=-13 profile=\"/usr/sbin/mysqld\" name=\"run/systemd/notify\" pid=1244 comm=\"mysqld\" requested_mask=\"w\" denied_mask=\"w\" fsuid=111 ouid=0\n```\n\nsd-notify失敗してるので、この時点でもAppArmorのポリシーが生きています。\nsystemdはこのときずっとmariadbが上がってくるのを待っている状態です。\nただし、mariadb自体は起動しているので、アプリへのリクエストは通る状態です。\n（sekaiのこの状態でずっと再起動試験をしていたわけです。バカですねえ。）\n\n一方で、運営による再起動が行われたと思われる時刻(14:20:38 UTC つまり 23:20:38 JST)付近のログは以下のとおり。\n\n```\n-- Reboot --\nSep 12 14:20:38 s2 systemd[1]: Starting MariaDB 10.1.44 database server...\nSep 12 14:20:42 s2 mysqld[1100]: 2020-09-12 14:20:42 140238334753920 [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1100 ...\nSep 12 14:35:41 s2 systemd[1]: mariadb.service: Start operation timed out. Terminating.\nSep 12 14:35:43 s2 systemd[1]: mariadb.service: Failed with result 'timeout'.\nSep 12 14:35:43 s2 systemd[1]: Failed to start MariaDB 10.1.44 database server.\n```\n\n15分立ったのでmariadbがshutdownされたと思われます。\n以下は`/var/lib/mysql/error.log`です。\n\n```\n2020-09-12 14:35:41 140238333712128 [Note] /usr/sbin/mysqld: Normal shutdown\n2020-09-12 14:35:41 140238333712128 [Note] Event Scheduler: Purging the queue. 0 events\n2020-09-12 14:35:41 140236692629248 [Note] InnoDB: FTS optimize thread exiting.\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Starting shutdown...\n2020-09-12 14:35:41 140238333712128 [Note] InnoDB: Waiting for page_cleaner to finish flushing of buffer pool\n2020-09-12 14:35:43 140238333712128 [Note] InnoDB: Shutdown completed; log sequence number 3710056674\n2020-09-12 14:35:43 140238333712128 [Note] /usr/sbin/mysqld: Shutdown complete\n```\n\n実際にアプリにリクエストが来たのは、15:03:13 UTCでした。\n\n```\nSep 12 14:20:45 s1 isuumo[903]: ⇨ http server started on [::]:1323\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 packets.go:122: closing bad idle connection: unexpected read from socke\nSep 12 15:03:13 s1 isuumo[903]: [mysql] 2020/09/12 15:03:13 connection.go:158: driver: bad connection\n```\n\nこのとき、もうmariadbはshutdown済みなので、当然アプリは動かないわけですね……\n\n## 開始後即サーバを破壊\n\n### 経緯\n\n本選始まって直後の話。\n\nNaruseJunチームでは、Makefileをタスクランナー的に使っていて、[ここ](https://github.com/narusejun/isucon10-final/blob/master/Makefile)にデプロイコマンドを書いていました。\nsekaiがアプリにpprofを埋め込んだコードをプッシュし、サーバ上にデプロイしようとして`make deploy`を叩いたところ、なぜか途中で`sh: Command not found`のエラーが出てmakeが終了しました。\n\nアレ？`sh`って存在しないんだっけと思い、今度は`ls -l /usr/bin/sh`を実行してみると、今度は`bash: /usr/bin/ls: No such file or directory`が……\nここで全てを悟ります。これ、シェル組み込みのコマンド以外、全て使えなくなってるな……？\n\n心当たりがないわけではありませんでした。3人共、ある会話が頭をよぎりました……\nあれは予選時のことです――――\n\n> sekai「ミドルウェアの設定ファイルなども、リポジトリに含めてしまって、デプロイ時にrsyncで配置するようにしませんか？」\\\n> takashi「rsyncですか？どうやってやるんですか」\\\n> sekai「コマンド一発でできますよ。[こう](https://github.com/narusejun/isucon10-qualify/blob/master/Makefile#L50)ですね」\n\n```\n$ ls files\netc/       home/      lib/\n$ sudo rsync -r files/ /\n```\n\n> takashi「**これってもともとサーバ上にあるファイルが消えたりしませんか？**」←ここフラグ\\\n> sekai「大丈夫ですよ。ほら、追加したファイルだけ更新されてるでしょ？」\n\n予選では確かに、このコマンドでうまくデプロイできていました。\nですので、本選でも同じように設定ファイル類を配置しようとしていました。\n\nしかしながら、事実、サーバが壊れました。何故でしょう……\nこのときのログはこうでした。\n\n```\n〜〜〜略〜〜〜\nmake[1]: Leaving directory '/home/isucon/isucon10-final/app/webapp/golang'\nsudo rsync -v -r s1/ /\nsending incremental file list\ndeploy.sh\nskipping non-regular file \"etc/mysql/my.cnf\"\netc/envoy/config.yaml\netc/mysql/debian-start\netc/mysql/debian.cnf\netc/mysql/my.cnf.fallback\netc/mysql/mysql.cnf\netc/mysql/conf.d/mysql.cnf\netc/mysql/conf.d/mysqldump.cnf\netc/mysql/mysql.conf.d/mysql.cnf\netc/mysql/mysql.conf.d/mysqld.cnf\netc/systemd/system/envoy.service\netc/systemd/system/xsuportal-api-golang.service\netc/systemd/system/xsuportal-web-golang.service\nhome/isucon/env\nlib/\nlib/systemd/\nlib/systemd/system/\nlib/systemd/system/mysql.servicesent 11,952 bytes  received 375 bytes  24,654.00 bytes/sec\ntotal size is 10,449  speedup is 0.85\nsh s1/deploy.sh\nmake: sh: Command not found\nmake: *** [Makefile:54: start] Error 127\n```\n\nう〜ん、`--delete`オプションも付けてないし、このログを見ても特におかしくないしなあ。\n本選時はそう思っていました。\n\nここを詳しく調査する時間がもったいないので、運営にサーバをリセットしてもらい（ご迷惑おかけしました……）、とりあえず危険なMakefileは使用禁止として競技に戻りました。\n\n### その後\n\n競技は無事(?)終了し、翌日。ちゃんと調査しました。\n\nさて、件のログをよ〜く見ると、なんだかヤバそうなところが見つかりますね！？\n\n正解は`lib/`とだけ書いてある行です。\nこれは、rsyncによって`lib/`というディレクトリ、今回は宛先が`/`なので、要は`/lib`が作成されたという意味です。\nんん？？それはマズくないか？？？？？\n\nマズいです。コマンドがほぼ使えなくなったのは、間違いなく`/lib`にある共有ライブラリなどが消滅したからでしょう。\n\nでも、予選時はちゃんと動いていたんです。じゃあなんで？？？\n\n答えは、Ubuntuのバージョン違いにありました。\n予選では18.04、本選では20.04です。各バージョンでのルートディレクトリがどうなっているかと言うと……\n\n18.04では、こう。\n\n```\n# ls -l /\ntotal 64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:17 bin\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 24  2018 home\ndrwxr-xr-x   8 root root 4096 May 23  2017 lib\ndrwxr-xr-x   2 root root 4096 Sep 21 17:16 lib64\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 media\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 mnt\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 opt\ndr-xr-xr-x 174 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 21 17:17 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 run\ndrwxr-xr-x   1 root root 4096 Sep 25 22:33 sbin\ndrwxr-xr-x   2 root root 4096 Sep 21 17:14 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 21 17:17 tmp\ndrwxr-xr-x   1 root root 4096 Sep 21 17:14 usr\ndrwxr-xr-x   1 root root 4096 Sep 21 17:17 var\n```\n\n一方で20.04では……？\n\n```\n# ls -l /\ntotal 48\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 boot\ndrwxr-xr-x   5 root root  360 Oct  4 07:46 dev\ndrwxr-xr-x   1 root root 4096 Oct  4 07:46 etc\ndrwxr-xr-x   2 root root 4096 Apr 15 11:09 home\nlrwxrwxrwx   1 root root    7 Sep 25 01:20 lib -> usr/lib\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib32 -> usr/lib32\nlrwxrwxrwx   1 root root    9 Sep 25 01:20 lib64 -> usr/lib64\nlrwxrwxrwx   1 root root   10 Sep 25 01:20 libx32 -> usr/libx32\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 media\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 mnt\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 opt\ndr-xr-xr-x 171 root root    0 Oct  4 07:46 proc\ndrwx------   2 root root 4096 Sep 25 01:23 root\ndrwxr-xr-x   1 root root 4096 Sep 25 22:34 run\nlrwxrwxrwx   1 root root    8 Sep 25 01:20 sbin -> usr/sbin\ndrwxr-xr-x   2 root root 4096 Sep 25 01:20 srv\ndr-xr-xr-x  13 root root    0 Oct  4 07:46 sys\ndrwxrwxrwt   2 root root 4096 Sep 25 01:23 tmp\ndrwxr-xr-x   1 root root 4096 Sep 25 01:20 usr\ndrwxr-xr-x   1 root root 4096 Sep 25 01:23 var\n```\n\nアッ……（完全に理解）\n\nUbuntu 20.04では、`/lib`は通常のディレクトリではなく、`/usr/lib`へのシンボリックリンクでした！\nrsyncでは、デフォルトではシンボリックリンクの先がディレクトリであっても、それを辿ってその先にコピーをしたりしません。\nソース側のディレクトリでそのまま上書きして、もとのリンクは消してしまうんですね……！\n\n### 教訓\n\nこの悲劇を回避するには、rsyncの`--keep-dirlinks`というオプションを使うべきでした。\n以下、`man rsync`より引用です。\n\n> -K, --keep-dirlinks\n>     This option causes the receiving side to treat a symlink to a directory as though it were a real directory, but only if it matches a real directory from the sender. Without this option, the receiver's symlink would be deleted and replaced with a real directory.\n>     For example, suppose you transfer a directory lqfoorq that contains a file lqfilerq, but lqfoorq is a symlink to directory lqbarrq on the receiver. Without --keep-dirlinks, the receiver deletes symlink lqfoorq, recreates it as a directory, and receives the file into the new directory. With --keep-dirlinks, the receiver keeps the symlink and lqfilerq ends up in lqbarrq.\n\nちょうどボクが踏んだ罠について言及されています。\nrsyncは気をつけて使います……\n\n## おしまい\n\nISUCONは学びが多い。\n\nあと、予選で雑にmysqlの全テーブルをMEMORYストレージエンジンにしたらメモリが完売してSSHできなくなって焦るなどの事件もありました。\n（運営に再起動してもらって事なきを得ました。）\n","title":"ISUCON10 やらかしリスト","image":null,"tags":["AppArmor","ISUCON","systemd","インフラ","参加記"],"date":"2020-10-04T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},"description":"ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。 ボク、@sekai67はNaruseJunチームの一員として出場しました。結果はこう。 予選では、本選出場圏内の点数を取って…","content":"<p>ISUCON10お疲れさまでした。運営の皆さん、ありがとうございました。<p>ボク、<a href=https://twitter.com/sekai67 rel=\"noopener noreferrer\"target=_blank>@sekai67</a>はNaruseJunチームの一員として出場しました。結果はこう。<ul><li>予選では、本選出場圏内の点数を取って余裕をカマしていましたが、追試をパスできずに予選落ち。<li>本選では、<a href=http://isucon.net/archives/55063136.html rel=\"noopener noreferrer\"target=_blank>本選ライブ</a>の企画で、並行チームとして問題に取り組ませてもらう。<ul><li>競技中最高得点 <strong>52567</strong> を記録するものの、追試をパスできず記録なし。伝統芸能</ul></ul><p>これは記念写真です。<p><img alt src=score.png><p>まあ追試で落ちてるんですけどね！<p>参加記はチームメイトの<a href=https://twitter.com/to_hutohu rel=\"noopener noreferrer\"target=_blank>@to_hutohu</a>と<a href=https://twitter.com/takashi_trap rel=\"noopener noreferrer\"target=_blank>@takashi_trap</a>が書いてくれると信じて、ボクはちょっとしたこぼれ話を書いていきます。<h2>やらかしリスト</h2><p>予選、本選どちらにおいても、思い返すとまあいろいろやらかしたんですが、今回は興味深かった2つを抜粋して掘り下げます。<ul><li>予選時、再起動試験を5回ぐらいして、追試落ちは絶対ない状態まで持っていったのに無事追試落ちした話<li>本選開始後、初手でサーバの1台を使い物にならなくしてチームメイトを困惑させた話</ul><h2>予選の追試で落ちた</h2><h3>経緯</h3><p>予選では、チームメイトの2人がわりとギリギリまでアプリ実装のバグ取りを詰めていたので、ボクが1人で再起動試験や後片付けを担当することになりました。 去年も再起動後に正しく動作させることができずに予選落ちしていますので、今年こそは！と念入りに何度も行っていました。<p>5回ほど再起動してもOK、再起動後にもデータも正しく引き継がれている。絶対落ちないだろコレは！！！ と自信満々で競技を終えたわけですが、結果発表でチーム名が呼ばれることはありませんでした……<p>夜中、凹みつつも競技で使ったサーバの様子を見に行ってみると…… DBサーバが落ちてるやんけ！！！！！なんで？？！？！？？！？？！！！<h3>理由</h3><p>apparmorのポリシー(mysql-serverパッケージに入ってる<code>/etc/apparmor.d/usr.sbin.mysqld</code>)が生きていて、systemdがmariadbの起動を検知できておらず、<code>systemctl stop</code>相当の処理がかかったため。<p>Ubuntuで、最初にmysqlが動いている状態から、これをmariadbに置き換えると起動しなくなるという事例があります。 こちらの記事が詳しいです。<aside><a href=/posts/24/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>Ubuntuでmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/24/>Ubuntu(18.04 LTS)でmysql-serverをmariadb-serverで置き換えるとsystemd経由でmariadbが起動できない。 追記 この記事には一部誤りがあります。 以…</q></div></a></aside><h2>疑問1: mariadbに入れ替えたときにto-hutohuが<code>aa-remove-unknown</code>でポリシーを消したのでは？</h2><p>先ほど紹介した記事を書いたのはボクです。ですので、もちろんこの挙動については知っていました。 上記記事で紹介されている対策法をもちろん講じています。<p>が、これはそもそも恒久対応ではありませんでした……！ わかりにくい書き方でゴメンナサイ。<p>先の記事で言及している、<blockquote><p>/etc/apparmor.d/usr.sbin.mysqldは空のファイルで上書きされますが、AppArmorがすでに読み込んでいるプロファイルは削除されません。 また、systemctl reload apparmorしても、OSを再起動しても、一度読み込まれたプロファイルが勝手に削除されることはありません。</blockquote><p>ここの理解が曖昧、あるいは間違っています。<p>ポリシーがOSを再起動しても消えない原因は、apparmorのポリシーキャッシュのせいで、<code>/etc/apparmor.d/cache/usr.sbin.mysqld</code>が存在して、かつ<code>/etc/apparmor.d/usr.sbin.mysqld</code>よりタイムスタンプが新しい場合、キャッシュのほうが読み込まれるという挙動をします。<ul><li><code>/etc/apparmor.d/cache/usr.sbin.mysqld</code>が作成されるのは、mysql-serverインストール時。<ul><li>つまりタイムスタンプは → <code>Sep 11 11:34</code></ul><li><code>/etc/apparmor.d/usr.sbin.mysqld</code>のタイムスタンプは、mariadbパッケージが作成された時。<ul><li>つまりタイムスタンプは → <code>Jul 20 10:50</code></ul></ul><p>ですので、<code>/etc/apparmor.d/usr.sbin.mysqld</code>が更新されたにも関わらず、キャッシュのほうがずっと読み込まれ続けてしまうのでした……！<p>正しい対応は、<code>systemctl reload apparmor</code>でした。 これでキャッシュのflushが走り、正しくmariadbに起動するようになります。<p>例の記事については、そのうち書き換えておきますね……<h3>疑問2: sekaiが再起動試験を行ったときにうまく動作していたのは何故？</h3><p>再起動後15分以内にのみ試験していたからです。<p>AppArmorのせいでmariadbに起動に失敗するというのは、厳密に言うと、 <strong>mariadbは起動に成功しているんだけどsystemdがそれを検知できていない</strong> ということ。 systemdは一定時間（デフォルトで15分）以内にサービスの起動を確認できないと、ご丁寧にExecStopを走らせてくれるのです……！<p>sekaiが再起動したのは <strong>11:39:26 UTC</strong> ごろ。<pre><code class=\"hljs language-apache\">-- <span class=hljs-attribute>Reboot</span> --\n<span class=hljs-attribute>Sep</span> <span class=hljs-number>12</span> <span class=hljs-number>11</span>:<span class=hljs-number>39</span>:<span class=hljs-number>26</span> s<span class=hljs-number>2</span> systemd[<span class=hljs-number>1</span>]: Starting MariaDB <span class=hljs-number>10</span>.<span class=hljs-number>1</span>.<span class=hljs-number>44</span> database server...\n<span class=hljs-attribute>Sep</span> <span class=hljs-number>12</span> <span class=hljs-number>11</span>:<span class=hljs-number>39</span>:<span class=hljs-number>32</span> s<span class=hljs-number>2</span> mysqld[<span class=hljs-number>1244</span>]: <span class=hljs-number>2020</span>-<span class=hljs-number>09</span>-<span class=hljs-number>12</span> <span class=hljs-number>11</span>:<span class=hljs-number>39</span>:<span class=hljs-number>32</span> <span class=hljs-number>139768179551360</span><span class=hljs-meta> [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1244 ...\nSep 12 11:45:11 s2 systemd[1]: Stopped MariaDB 10.1.44 database server.\n-- Reboot --\n</span></code></pre><p>11:45:11にStopしてるのは、このあともう一度再起動試験したためです。<p>この付近のkern.logは以下。<pre><code class=\"hljs language-routeros\">Sep 12 11:39:35 s2 kernel: [   42.180656] audit: <span class=hljs-attribute>type</span>=1400 audit(1599910775.956:18): <span class=hljs-attribute>apparmor</span>=<span class=hljs-string>\"DENIED\"</span> <span class=hljs-attribute>operation</span>=<span class=hljs-string>\"sendmsg\"</span> <span class=hljs-attribute>info</span>=<span class=hljs-string>\"Failed name lookup - disconnected path\"</span> <span class=hljs-attribute>error</span>=-13 <span class=hljs-attribute>profile</span>=<span class=hljs-string>\"/usr/sbin/mysqld\"</span> <span class=hljs-attribute>name</span>=<span class=hljs-string>\"run/systemd/notify\"</span> <span class=hljs-attribute>pid</span>=1244 <span class=hljs-attribute>comm</span>=<span class=hljs-string>\"mysqld\"</span> <span class=hljs-attribute>requested_mask</span>=<span class=hljs-string>\"w\"</span> <span class=hljs-attribute>denied_mask</span>=<span class=hljs-string>\"w\"</span> <span class=hljs-attribute>fsuid</span>=111 <span class=hljs-attribute>ouid</span>=0\n</code></pre><p>sd-notify失敗してるので、この時点でもAppArmorのポリシーが生きています。 systemdはこのときずっとmariadbが上がってくるのを待っている状態です。 ただし、mariadb自体は起動しているので、アプリへのリクエストは通る状態です。 （sekaiのこの状態でずっと再起動試験をしていたわけです。バカですねえ。）<p>一方で、運営による再起動が行われたと思われる時刻(14:20:38 UTC つまり 23:20:38 JST)付近のログは以下のとおり。<pre><code class=\"hljs language-apache\">-- <span class=hljs-attribute>Reboot</span> --\n<span class=hljs-attribute>Sep</span> <span class=hljs-number>12</span> <span class=hljs-number>14</span>:<span class=hljs-number>20</span>:<span class=hljs-number>38</span> s<span class=hljs-number>2</span> systemd[<span class=hljs-number>1</span>]: Starting MariaDB <span class=hljs-number>10</span>.<span class=hljs-number>1</span>.<span class=hljs-number>44</span> database server...\n<span class=hljs-attribute>Sep</span> <span class=hljs-number>12</span> <span class=hljs-number>14</span>:<span class=hljs-number>20</span>:<span class=hljs-number>42</span> s<span class=hljs-number>2</span> mysqld[<span class=hljs-number>1100</span>]: <span class=hljs-number>2020</span>-<span class=hljs-number>09</span>-<span class=hljs-number>12</span> <span class=hljs-number>14</span>:<span class=hljs-number>20</span>:<span class=hljs-number>42</span> <span class=hljs-number>140238334753920</span><span class=hljs-meta> [Note] /usr/sbin/mysqld (mysqld 10.1.44-MariaDB-0ubuntu0.18.04.1) starting as process 1100 ...\nSep 12 14:35:41 s2 systemd[1]: mariadb.service: Start operation timed out. Terminating.\nSep 12 14:35:43 s2 systemd[1]: mariadb.service: Failed with result 'timeout'.\nSep 12 14:35:43 s2 systemd[1]: Failed to start MariaDB 10.1.44 database server.\n</span></code></pre><p>15分立ったのでmariadbがshutdownされたと思われます。 以下は<code>/var/lib/mysql/error.log</code>です。<pre><code class=\"hljs language-css\">2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:41</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> /<span class=hljs-selector-tag>usr</span>/<span class=hljs-selector-tag>sbin</span>/<span class=hljs-selector-tag>mysqld</span>: <span class=hljs-selector-tag>Normal</span> <span class=hljs-selector-tag>shutdown</span>\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:41</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> <span class=hljs-selector-tag>Event</span> <span class=hljs-selector-tag>Scheduler</span>: <span class=hljs-selector-tag>Purging</span> <span class=hljs-selector-tag>the</span> <span class=hljs-selector-tag>queue</span>. 0 <span class=hljs-selector-tag>events</span>\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:41</span> 140236692629248 <span class=hljs-selector-attr>[Note]</span> <span class=hljs-selector-tag>InnoDB</span>: <span class=hljs-selector-tag>FTS</span> <span class=hljs-selector-tag>optimize</span> <span class=hljs-selector-tag>thread</span> <span class=hljs-selector-tag>exiting</span>.\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:41</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> <span class=hljs-selector-tag>InnoDB</span>: <span class=hljs-selector-tag>Starting</span> <span class=hljs-selector-tag>shutdown</span>...\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:41</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> <span class=hljs-selector-tag>InnoDB</span>: <span class=hljs-selector-tag>Waiting</span> <span class=hljs-selector-tag>for</span> <span class=hljs-selector-tag>page_cleaner</span> <span class=hljs-selector-tag>to</span> <span class=hljs-selector-tag>finish</span> <span class=hljs-selector-tag>flushing</span> <span class=hljs-selector-tag>of</span> <span class=hljs-selector-tag>buffer</span> <span class=hljs-selector-tag>pool</span>\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:43</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> <span class=hljs-selector-tag>InnoDB</span>: <span class=hljs-selector-tag>Shutdown</span> <span class=hljs-selector-tag>completed</span>; <span class=hljs-selector-tag>log</span> <span class=hljs-selector-tag>sequence</span> <span class=hljs-selector-tag>number</span> 3710056674\n2020<span class=hljs-selector-tag>-09-12</span> 14<span class=hljs-selector-pseudo>:35</span><span class=hljs-selector-pseudo>:43</span> 140238333712128 <span class=hljs-selector-attr>[Note]</span> /<span class=hljs-selector-tag>usr</span>/<span class=hljs-selector-tag>sbin</span>/<span class=hljs-selector-tag>mysqld</span>: <span class=hljs-selector-tag>Shutdown</span> <span class=hljs-selector-tag>complete</span>\n</code></pre><p>実際にアプリにリクエストが来たのは、15:03:13 UTCでした。<pre><code class=\"hljs language-css\"><span class=hljs-selector-tag>Sep</span> 12 14<span class=hljs-selector-pseudo>:20</span><span class=hljs-selector-pseudo>:45</span> <span class=hljs-selector-tag>s1</span> <span class=hljs-selector-tag>isuumo</span><span class=hljs-selector-attr>[903]</span>: ⇨ <span class=hljs-selector-tag>http</span> <span class=hljs-selector-tag>server</span> <span class=hljs-selector-tag>started</span> <span class=hljs-selector-tag>on</span> <span class=hljs-selector-attr>[::]</span><span class=hljs-selector-pseudo>:1323</span>\n<span class=hljs-selector-tag>Sep</span> 12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>s1</span> <span class=hljs-selector-tag>isuumo</span><span class=hljs-selector-attr>[903]</span>: <span class=hljs-selector-attr>[mysql]</span> 2020/09/12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>packets</span><span class=hljs-selector-class>.go</span><span class=hljs-selector-pseudo>:122</span>: <span class=hljs-selector-tag>closing</span> <span class=hljs-selector-tag>bad</span> <span class=hljs-selector-tag>idle</span> <span class=hljs-selector-tag>connection</span>: <span class=hljs-selector-tag>unexpected</span> <span class=hljs-selector-tag>read</span> <span class=hljs-selector-tag>from</span> <span class=hljs-selector-tag>socke</span>\n<span class=hljs-selector-tag>Sep</span> 12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>s1</span> <span class=hljs-selector-tag>isuumo</span><span class=hljs-selector-attr>[903]</span>: <span class=hljs-selector-attr>[mysql]</span> 2020/09/12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>connection</span><span class=hljs-selector-class>.go</span><span class=hljs-selector-pseudo>:158</span>: <span class=hljs-selector-tag>driver</span>: <span class=hljs-selector-tag>bad</span> <span class=hljs-selector-tag>connection</span>\n<span class=hljs-selector-tag>Sep</span> 12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>s1</span> <span class=hljs-selector-tag>isuumo</span><span class=hljs-selector-attr>[903]</span>: <span class=hljs-selector-attr>[mysql]</span> 2020/09/12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>packets</span><span class=hljs-selector-class>.go</span><span class=hljs-selector-pseudo>:122</span>: <span class=hljs-selector-tag>closing</span> <span class=hljs-selector-tag>bad</span> <span class=hljs-selector-tag>idle</span> <span class=hljs-selector-tag>connection</span>: <span class=hljs-selector-tag>unexpected</span> <span class=hljs-selector-tag>read</span> <span class=hljs-selector-tag>from</span> <span class=hljs-selector-tag>socke</span>\n<span class=hljs-selector-tag>Sep</span> 12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>s1</span> <span class=hljs-selector-tag>isuumo</span><span class=hljs-selector-attr>[903]</span>: <span class=hljs-selector-attr>[mysql]</span> 2020/09/12 15<span class=hljs-selector-pseudo>:03</span><span class=hljs-selector-pseudo>:13</span> <span class=hljs-selector-tag>connection</span><span class=hljs-selector-class>.go</span><span class=hljs-selector-pseudo>:158</span>: <span class=hljs-selector-tag>driver</span>: <span class=hljs-selector-tag>bad</span> <span class=hljs-selector-tag>connection</span>\n</code></pre><p>このとき、もうmariadbはshutdown済みなので、当然アプリは動かないわけですね……<h2>開始後即サーバを破壊</h2><h3>経緯</h3><p>本選始まって直後の話。<p>NaruseJunチームでは、Makefileをタスクランナー的に使っていて、<a href=https://github.com/narusejun/isucon10-final/blob/master/Makefile rel=\"noopener noreferrer\"target=_blank>ここ</a>にデプロイコマンドを書いていました。 sekaiがアプリにpprofを埋め込んだコードをプッシュし、サーバ上にデプロイしようとして<code>make deploy</code>を叩いたところ、なぜか途中で<code>sh: Command not found</code>のエラーが出てmakeが終了しました。<p>アレ？<code>sh</code>って存在しないんだっけと思い、今度は<code>ls -l /usr/bin/sh</code>を実行してみると、今度は<code>bash: /usr/bin/ls: No such file or directory</code>が…… ここで全てを悟ります。これ、シェル組み込みのコマンド以外、全て使えなくなってるな……？<p>心当たりがないわけではありませんでした。3人共、ある会話が頭をよぎりました…… あれは予選時のことです――――<blockquote><p>sekai「ミドルウェアの設定ファイルなども、リポジトリに含めてしまって、デプロイ時にrsyncで配置するようにしませんか？」<br>takashi「rsyncですか？どうやってやるんですか」<br>sekai「コマンド一発でできますよ。<a href=https://github.com/narusejun/isucon10-qualify/blob/master/Makefile#L50 rel=\"noopener noreferrer\"target=_blank>こう</a>ですね」</blockquote><pre><code class=\"hljs language-awk\">$ ls files\netc<span class=hljs-regexp>/       home/</span>      lib/\n$ sudo rsync -r files<span class=hljs-regexp>/ /</span>\n</code></pre><blockquote><p>takashi「<strong>これってもともとサーバ上にあるファイルが消えたりしませんか？</strong>」←ここフラグ<br>sekai「大丈夫ですよ。ほら、追加したファイルだけ更新されてるでしょ？」</blockquote><p>予選では確かに、このコマンドでうまくデプロイできていました。 ですので、本選でも同じように設定ファイル類を配置しようとしていました。<p>しかしながら、事実、サーバが壊れました。何故でしょう…… このときのログはこうでした。<pre><code class=\"hljs language-gradle\">〜〜〜略〜〜〜\nmake[<span class=hljs-number>1</span>]: Leaving directory <span class=hljs-string>'/home/isucon/isucon10-final/app/webapp/golang'</span>\nsudo rsync -v -r s1<span class=hljs-regexp>/ /</span>\nsending incremental <span class=hljs-keyword>file</span> list\ndeploy.sh\nskipping non-regular <span class=hljs-keyword>file</span> <span class=hljs-string>\"etc/mysql/my.cnf\"</span>\netc<span class=hljs-regexp>/envoy/</span>config.yaml\netc<span class=hljs-regexp>/mysql/</span>debian-start\netc<span class=hljs-regexp>/mysql/</span>debian.cnf\netc<span class=hljs-regexp>/mysql/my</span>.cnf.fallback\netc<span class=hljs-regexp>/mysql/my</span>sql.cnf\netc<span class=hljs-regexp>/mysql/</span>conf.d/mysql.cnf\netc<span class=hljs-regexp>/mysql/</span>conf.d/mysqldump.cnf\netc<span class=hljs-regexp>/mysql/my</span>sql.conf.d/mysql.cnf\netc<span class=hljs-regexp>/mysql/my</span>sql.conf.d/mysqld.cnf\netc<span class=hljs-regexp>/systemd/</span>system/envoy.service\netc<span class=hljs-regexp>/systemd/</span>system/xsuportal-api-golang.service\netc<span class=hljs-regexp>/systemd/</span>system/xsuportal-web-golang.service\nhome<span class=hljs-regexp>/isucon/</span>env\nlib/\nlib<span class=hljs-regexp>/systemd/</span>\nlib<span class=hljs-regexp>/systemd/</span>system/\nlib<span class=hljs-regexp>/systemd/</span>system<span class=hljs-regexp>/mysql.servicesent 11,952 bytes  received 375 bytes  24,654.00 bytes/</span>sec\ntotal <span class=hljs-keyword>size</span> is <span class=hljs-number>10</span>,<span class=hljs-number>449</span>  speedup is <span class=hljs-number>0.85</span>\nsh s1/deploy.sh\nmake: sh: Command not found\nmake: *** [Makefile:<span class=hljs-number>54</span>: start] Error <span class=hljs-number>127</span>\n</code></pre><p>う〜ん、<code>--delete</code>オプションも付けてないし、このログを見ても特におかしくないしなあ。 本選時はそう思っていました。<p>ここを詳しく調査する時間がもったいないので、運営にサーバをリセットしてもらい（ご迷惑おかけしました……）、とりあえず危険なMakefileは使用禁止として競技に戻りました。<h3>その後</h3><p>競技は無事(?)終了し、翌日。ちゃんと調査しました。<p>さて、件のログをよ〜く見ると、なんだかヤバそうなところが見つかりますね！？<p>正解は<code>lib/</code>とだけ書いてある行です。 これは、rsyncによって<code>lib/</code>というディレクトリ、今回は宛先が<code>/</code>なので、要は<code>/lib</code>が作成されたという意味です。 んん？？それはマズくないか？？？？？<p>マズいです。コマンドがほぼ使えなくなったのは、間違いなく<code>/lib</code>にある共有ライブラリなどが消滅したからでしょう。<p>でも、予選時はちゃんと動いていたんです。じゃあなんで？？？<p>答えは、Ubuntuのバージョン違いにありました。 予選では18.04、本選では20.04です。各バージョンでのルートディレクトリがどうなっているかと言うと……<p>18.04では、こう。<pre><code class=\"hljs language-apache\"><span class=hljs-comment># ls -l /</span>\n<span class=hljs-attribute>total</span> <span class=hljs-number>64</span>\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>17</span> bin\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Apr <span class=hljs-number>24</span>  <span class=hljs-number>2018</span> boot\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>5</span> root root  <span class=hljs-number>360</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> dev\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> etc\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Apr <span class=hljs-number>24</span>  <span class=hljs-number>2018</span> home\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>8</span> root root <span class=hljs-number>4096</span> May <span class=hljs-number>23</span>  <span class=hljs-number>2017</span> lib\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>16</span> lib<span class=hljs-number>64</span>\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>14</span> media\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>14</span> mnt\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>14</span> opt\n<span class=hljs-attribute>dr</span>-xr-xr-x <span class=hljs-number>174</span> root root    <span class=hljs-number>0</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> proc\n<span class=hljs-attribute>drwx</span>------   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>17</span> root\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>22</span>:<span class=hljs-number>33</span> run\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>22</span>:<span class=hljs-number>33</span> sbin\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>14</span> srv\n<span class=hljs-attribute>dr</span>-xr-xr-x  <span class=hljs-number>13</span> root root    <span class=hljs-number>0</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> sys\n<span class=hljs-attribute>drwxrwxrwt</span>   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>17</span> tmp\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>14</span> usr\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>21</span> <span class=hljs-number>17</span>:<span class=hljs-number>17</span> var\n</code></pre><p>一方で20.04では……？<pre><code class=\"hljs language-apache\"><span class=hljs-comment># ls -l /</span>\n<span class=hljs-attribute>total</span> <span class=hljs-number>48</span>\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root    <span class=hljs-number>7</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> bin -> usr/bin\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Apr <span class=hljs-number>15</span> <span class=hljs-number>11</span>:<span class=hljs-number>09</span> boot\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>5</span> root root  <span class=hljs-number>360</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> dev\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> etc\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Apr <span class=hljs-number>15</span> <span class=hljs-number>11</span>:<span class=hljs-number>09</span> home\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root    <span class=hljs-number>7</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> lib -> usr/lib\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root    <span class=hljs-number>9</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> lib<span class=hljs-number>32</span> -> usr/lib<span class=hljs-number>32</span>\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root    <span class=hljs-number>9</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> lib<span class=hljs-number>64</span> -> usr/lib<span class=hljs-number>64</span>\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root   <span class=hljs-number>10</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> libx<span class=hljs-number>32</span> -> usr/libx<span class=hljs-number>32</span>\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> media\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> mnt\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> opt\n<span class=hljs-attribute>dr</span>-xr-xr-x <span class=hljs-number>171</span> root root    <span class=hljs-number>0</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> proc\n<span class=hljs-attribute>drwx</span>------   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>23</span> root\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>22</span>:<span class=hljs-number>34</span> run\n<span class=hljs-attribute>lrwxrwxrwx</span>   <span class=hljs-number>1</span> root root    <span class=hljs-number>8</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> sbin -> usr/sbin\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> srv\n<span class=hljs-attribute>dr</span>-xr-xr-x  <span class=hljs-number>13</span> root root    <span class=hljs-number>0</span> Oct  <span class=hljs-number>4</span> <span class=hljs-number>07</span>:<span class=hljs-number>46</span> sys\n<span class=hljs-attribute>drwxrwxrwt</span>   <span class=hljs-number>2</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>23</span> tmp\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>20</span> usr\n<span class=hljs-attribute>drwxr</span>-xr-x   <span class=hljs-number>1</span> root root <span class=hljs-number>4096</span> Sep <span class=hljs-number>25</span> <span class=hljs-number>01</span>:<span class=hljs-number>23</span> var\n</code></pre><p>アッ……（完全に理解）<p>Ubuntu 20.04では、<code>/lib</code>は通常のディレクトリではなく、<code>/usr/lib</code>へのシンボリックリンクでした！ rsyncでは、デフォルトではシンボリックリンクの先がディレクトリであっても、それを辿ってその先にコピーをしたりしません。 ソース側のディレクトリでそのまま上書きして、もとのリンクは消してしまうんですね……！<h3>教訓</h3><p>この悲劇を回避するには、rsyncの<code>--keep-dirlinks</code>というオプションを使うべきでした。 以下、<code>man rsync</code>より引用です。<blockquote><p>-K, --keep-dirlinks This option causes the receiving side to treat a symlink to a directory as though it were a real directory, but only if it matches a real directory from the sender. Without this option, the receiver's symlink would be deleted and replaced with a real directory. For example, suppose you transfer a directory lqfoorq that contains a file lqfilerq, but lqfoorq is a symlink to directory lqbarrq on the receiver. Without --keep-dirlinks, the receiver deletes symlink lqfoorq, recreates it as a directory, and receives the file into the new directory. With --keep-dirlinks, the receiver keeps the symlink and lqfilerq ends up in lqbarrq.</blockquote><p>ちょうどボクが踏んだ罠について言及されています。 rsyncは気をつけて使います……<h2>おしまい</h2><p>ISUCONは学びが多い。<p>あと、予選で雑にmysqlの全テーブルをMEMORYストレージエンジンにしたらメモリが完売してSSHできなくなって焦るなどの事件もありました。 （運営に再起動してもらって事なきを得ました。）"},"__N_SSG":true}