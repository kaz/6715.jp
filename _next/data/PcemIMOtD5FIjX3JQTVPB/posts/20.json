{"pageProps":{"article":{"type":"article","slug":"20","body":"HLSを使ったライブストリーミングを試してみます\n\n[前々回](/posts/18/)・[前回](/posts/19/)の続きです。\n\n<!--more-->\n\n# あらすじ\n\n前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。\n\n[クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～](/posts/18/)\n\n前回はAzureのWindowsServerにHTTPリクエストを送ってきりたん好きなコトを喋らせるサーバができたのでした。\n\n[クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～](/posts/19/)\n\n今回は、**HTTP Live Streaming**(HLS)を用いてきりたんボイスをライブ配信してみようと思います！\n\n![](kiritan.png)\n\n# HTTP Live Streaming\n\n**HTTP Live Streaming**とは、Appleが開発したHTTPベースのストリーミング配信プロトコルです。\n静的な動画ファイルのストリーミング配信はもちろん、ライブ配信(生放送)もできたり、\nアダプティブストリーミングと呼ばれる回線速度に応じて配信するビットレートを変更する技術も利用可能です。\n\n最近話題の[AbemaTV](https://abema.tv/)なんかでも、HLSで配信を行っています。\nちなみに、Twitterにアップされた動画もHLSで配信されています。\n\nストリーミング配信プロトコルと聞くと、複雑そうな気がしてきますが、HLSはHTTPベースで非常に単純です。\nザックリと説明を書いてみます。\n\n## HLSのしくみ\n\nHLSでの配信は、`.ts`ファイルと`.m3u8`ファイルによって行われます。\n\n### ts\n\n`.ts`ファイルは、**MPEG-2 TS**と呼ばれる形式で、配信される映像・音声そのものが格納されます。\n\n配信されるデータは一定の秒数ごとに分割し、このMPEG-2 TS形式で保存しておきます。\n分割された`.ts`ファイルは、HTTPでダウンロードできるようにしておきます。\n\nちなみに、日本のデジタルテレビ放送もこのMPEG-2 TSで配信されています。\n\n### m3u8\n\n`.m3u8`ファイルは、配信ファイルのインデックスです。\n先述した`.ts`に分割された映像・音声データのURLが列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=300000\n240/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=900000\n360/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1400000\n480/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2200000\n720/playlist.m3u8?t=3i87VhR5nuXMsjxJRGBiEYSNPdfggGQtr9LjXNx1fr5Dufac7cEaEKMyo2UAv77B63hAvVewach5eaPjFGK3EU22fcpcFD4RAeNAE7nisDwZguUqvp&mq=720&lanceId=c99528aa-0c3c-4987-ab6c-ce5cd1430223\n```\n\nこれはMaster Playlistと呼ばれるデータで、\n回線速度によって異なるビットレートでの配信を行うアダプティブストリーミングのためのファイルです。\n次に示すMedia PlaylistのURLと想定する回線速度が列記されています。\n\nAbemaTVから配信されている`.m3u8`の例\n```\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-TARGETDURATION:6\n#EXT-X-MEDIA-SEQUENCE:4\n#EXT-X-DISCONTINUITY-SEQUENCE:1\n#EXT-X-KEY:METHOD=AES-128,URI=\"abematv://v2/abema-news/abema-news/DUjoiyL1pJGkADZotyiXDn5\",IV=0xaccca4b41de3d9afb029070eb564be40\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5BPWe1D8Hu9yCC8HaA3oHS.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/5SphyMY1TTLvYkFo7B5JuM.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/2kxyGFo9sH9zUUfKj5USUk.ts\n#EXTINF:5.005000,\nhttps://abematv.akamaized.net/tsnews/abema-news/h264/720/Cz43TVWLgUgqskzvWBBnjA.ts\n```\n\nこれはMedia Playlistと呼ばれるデータで、\n配信されている映像・音声が格納された`.ts`ファイルのURLが列記されています。\n\n### 再生の方法\n\nクライアントは、まず`.m3u8`ファイルを取得します。\nそれがMaster Playlistであれば、回線速度によって適切な`.m3u8`を読みに行きます。\nそれがMedia Playlistであれば、`.ts`ファイルを取得して再生します。\n\nクライアントは、`.m3u8`内のタグと呼ばれるデータ(`#EXT`で始まる行)に従って、`.m3u8`を再読込します。\nライブ配信を行う場合は、クライアントが再読込した際に新しい配信データが追加されていれば良いわけです。\n\n以下に、主要なタグの説明を示します。\n\n#### EXT-X-TARGETDURATION\n\n分割された`.ts`の中で最大の長さに最も近い整数値を指定します。\nクライアントは、およそこの秒数ごとに`.m3u8`を再読込します。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n\n#### EXT-X-MEDIA-SEQUENCE\n\nその`.m3u8`にかかれている一番最初の`.ts`が、放送全体で何番目の`.ts`であるかの値を指定します。\nクライアントが分割された`.ts`を正しく連続再生する上で必要になります。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.2\n\n#### EXTINF\n\n分割された`.ts`１つの秒数。小数で指定できる。\n\nhttps://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.1\n\n# HLSを再生したい\n\nHLSはブラウザ上で再生できるのが強いです。\nhttps://caniuse.com/#search=HLS\n\nん？？？？？なんか赤いな……\n\n![](hls.png)\n\nFirefoxとChromeが対応してないやんけ！！！！！！！！！\n珍しくEdgeが優秀だ……\n\n悲しいですね。\nでも**Mesia Source Extensions**(MSE)という機能を使うとそれっぽくHLSを再生できるので安心です。\nhttps://caniuse.com/#search=MSE\n\nMSEを使ったHLS再生は、[Video.js](http://videojs.com/)とか[hls.js](https://github.com/video-dev/hls.js/tree/master)とかのライブラリを使うと簡単です。\n\nちなみに、AbemaTVは[THEOplayer](https://www.theoplayer.com/)という有償のプレーヤーを使ってるみたい。\n\n# HLSで生配信\n\nHLSをなんとな～くわかった気になったので、ライブ配信をやってみます。\n\nHLSで生配信をするにはどうすればよいのかというと、つまり\n\n- データをMPEG-2 TSにエンコードする\n- `.m3u8`に`.ts`へのリンクを追加する\n\nを繰り返すだけです。\n\n`.ts`へのを追加していくだけだとドンドン`.m3u8`がでっかくなってしまうので、\n過去の`.ts`へのリンクはある程度時間が立ったら消してしまいましょう。\n`.ts`へのリンクを消したら、`#EXT-X-MEDIA-SEQUENCE`を増やさないとクライアントが困ってしまうので注意です。\n\nとっても単純ですね！\nさて、先述したことをやるだけでライブ配信サーバが書けてしまいます。\n\n今回は、Twitterからタイムラインを取得して、ツイートをいい感じにきりたんに読んでもらい、\nHLSを用いてリアルタイムでその音声データを配信してみます。\n\n音声ファイルを分割してMPEG-2 TSにするのを自分で書くのは流石にしんどいので、\nFFMPEGさんにお願いしました。\nhttps://www.ffmpeg.org/ffmpeg-formats.html#hls-1\n\n## やること\n\n![](system.svg)\n\n### twitter.listen()\n\n- UserStreamでツイート取得\n- kiritan.pyにジョブを投げる\n- encoder.pyのキューに読み上げたWAVファイルを蓄積\n\n### encoder.livestreaming()\n\n- キューにファイルがなければ無音データをプレイリストに追加\n- キューにファイルがあればTSに分割してプレイリストに追加\n- プレイリストの先頭のTSの再生時間分だけ待って、プレイリストから削除\n\n## やりました\n\n方針が定まったら書くだけ……\n\n### コード\n\n全コード\n\nhttps://github.com/kaz/kiritan-server\n\nHLS関係の処理はたったコレだけです！\n```python\n# FFMPEGでファイルをMPEG-TSにエンコード（中身はMP3）\ndef ts(file):\n\tlogging.info(\"Encoding WAV to MPEG-TS\")\n\n\tdata = subprocess.run(\n\t\t[\n\t\t\t\"ffmpeg\",\n\t\t\t\"-i\", file, \"-vn\",\n\t\t\t\"-acodec\", \"libmp3lame\",\n\t\t\t\"-ab\", \"128k\",\n\t\t\t\"-ac\", \"2\",\n\t\t\t\"-ar\", \"44100\",\n\t\t\t\"-f\", \"hls\",\n\t\t\t\"-hls_time\", \"2\",\n\t\t\t\"-hls_list_size\", \"0\",\n\t\t\t\"-start_number\", str(int(time.time() * 1000)),\n\t\t\t\"-hls_segment_filename\", \"static/live%d.ts\",\n\t\t\t\"pipe:1.m3u8\"\n\t\t],\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.DEVNULL\n\t)\n\n\t# 出力されたプレイリストをパースして返す\n\tplaylist = data.stdout.decode(\"utf-8\")\n\tplaylist = playlist[playlist.rfind(\"#EXTM3U\"):]\n\n\t# Tuple (再生時間, ファイルパス)\n\treturn re.findall(r\"#EXTINF:([\\d.]+),\\s+(\\S+)\", playlist)\n\n# ライブストリーミングキューに追加\nque = []\ndef enqueue(f):\n\tque.append(f)\n\n# ライブプレイリストを更新\ntsl = []\nseq = 0\ndef __livecasting():\n\tglobal seq\n\n\twhile True:\n\t\ttry:\n\t\t\tif len(que) != 0:\n\t\t\t\t# キューにデータがあればプレイリストに追加\n\t\t\t\ttsl.extend(ts(que.pop(0)))\n\t\t\telse:\n\t\t\t\t# キューが空なら無音ファイルを配信\n\t\t\t\twhile len(tsl) < 3:\n\t\t\t\t\ttsl.append((\"2.04\", \"silent.ts\"))\n\n\t\t\t# TS 1つ分だけ休憩する\n\t\t\ttime.sleep(float(tsl[0][0]))\n\t\t\ttsl.pop(0)\n\t\t\tseq += 1\n\t\texcept:\n\t\t\tlogging.error(traceback.format_exc())\n\n# サーバ起動\ndef livecasting():\n\t# 古い配信データを削除\n\tfor f in glob.glob(\"static/live*\"):\n\t\tos.remove(f)\n\n\tthreading.Thread(target=__livecasting).start()\n\n# ライブプレイリストを生成\ndef playlist():\n\tpl = [\n\t\t\"#EXTM3U\",\n\t\t\"#EXT-X-VERSION:3\",\n\t\t\"#EXT-X-TARGETDURATION:3\",\n\t\t\"#EXT-X-MEDIA-SEQUENCE:%d\" % seq\n\t]\n\n\tfor ts in tsl[:5]:\n\t\tpl.append(\"#EXTINF:%s,\" % ts[0])\n\t\tpl.append(\"#EXT-X-DISCONTINUITY\")\n\t\tpl.append(\"/static/%s\" % ts[1])\n\n\treturn \"\\n\".join(pl)\n```\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`と`flask`と`tweepy`です\n\n```sh\npip install pypiwin32 flask tweepy\n```\n\n## 動作検証\n\n大体のブラウザでhls.jsを介した再生ができました。\n\nネイティブでHLSに対応しているブラウザ(Safari, Edge, iOS Safari, Android Chrome)は、\n`.m3u8`に直接アクセスしても再生できました。\n\nなんかAndroidだとちょっとプツプツしちゃってるかも？？？\n\n## ハマりそうなポイント\n\n- TS1つの長さ、プレイリスト全体の長さ、`#EXT-X-TARGETDURATION`をうまく調整しないと再生されなかったりプツプツなったりする\n\t- このへんどうするのが最適なのかがわからないので今回は試行錯誤した\n- TSが切り替わる（別のメディアから生成したものになる）時に`#EXT-X-DISCONTINUITY`を付けないと再生が止まる\n\t- Appleのソフトウェアはうまくやってくれるけど、その他は上手く行かない\n- TwitterのUserStreamはPCの時計かズレてると認証失敗する\n\n# おしまい\n\nということで、AzureのWindowsServerでWin32APIを使ってVOICEROIDを操作してTwitterのTLを読み上げた音声をHLSでライブ配信できました！\n\nWin32APIとかHLSとか、まだわからないことがたくさんなので、それはおかしいだろ！って思ったら鉞おねがいします＞＜\n\nそれにしても、きりたんはかわいいですね！\n\nおしまい\n","title":"クラウド東北きりたん その3 ～HLSでライブストリーミング～","image":null,"tags":["HLS","VOICEROID","インフラ","ストリーミング","東北きりたん"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"HLSを使ったライブストリーミングを試してみます 前々回・前回の続きです。 あらすじ 前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったので…","content":"<p>HLSを使ったライブストリーミングを試してみます<p><a href=/posts/18/>前々回</a>・<a href=/posts/19/>前回</a>の続きです。<h1>あらすじ</h1><p>前々回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるようになったのでした。<aside><a href=/posts/18/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/18/>Win32APIでVOICEROIDをいじってみます 東北きりたん VOICEROID+ 東北きりたん EXを買いました。 http://www.ah-soft.com/voiceroid/kiri…</q></div></a></aside><p>前回はAzureのWindowsServerにHTTPリクエストを送ってきりたん好きなコトを喋らせるサーバができたのでした。<aside><a href=/posts/19/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/19/>AzureのWindowsServerでVOICEROIDを動かします 前回の続きです。 あらすじ 前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるよう…</q></div></a></aside><p>今回は、<strong>HTTP Live Streaming</strong>(HLS)を用いてきりたんボイスをライブ配信してみようと思います！<p><img alt src=kiritan.png><h1>HTTP Live Streaming</h1><p><strong>HTTP Live Streaming</strong>とは、Appleが開発したHTTPベースのストリーミング配信プロトコルです。 静的な動画ファイルのストリーミング配信はもちろん、ライブ配信(生放送)もできたり、 アダプティブストリーミングと呼ばれる回線速度に応じて配信するビットレートを変更する技術も利用可能です。<p>最近話題の<a href=https://abema.tv/ rel=\"noopener noreferrer\"target=_blank>AbemaTV</a>なんかでも、HLSで配信を行っています。 ちなみに、Twitterにアップされた動画もHLSで配信されています。<p>ストリーミング配信プロトコルと聞くと、複雑そうな気がしてきますが、HLSはHTTPベースで非常に単純です。 ザックリと説明を書いてみます。<h2>HLSのしくみ</h2><p>HLSでの配信は、<code>.ts</code>ファイルと<code>.m3u8</code>ファイルによって行われます。<h3>ts</h3><p><code>.ts</code>ファイルは、<strong>MPEG-2 TS</strong>と呼ばれる形式で、配信される映像・音声そのものが格納されます。<p>配信されるデータは一定の秒数ごとに分割し、このMPEG-2 TS形式で保存しておきます。 分割された<code>.ts</code>ファイルは、HTTPでダウンロードできるようにしておきます。<p>ちなみに、日本のデジタルテレビ放送もこのMPEG-2 TSで配信されています。<h3>m3u8</h3><p><code>.m3u8</code>ファイルは、配信ファイルのインデックスです。 先述した<code>.ts</code>に分割された映像・音声データのURLが列記されています。<p>AbemaTVから配信されている<code>.m3u8</code>の例<pre><code class=\"hljs language-apache\"><span class=hljs-comment>#EXTM3U</span>\n<span class=hljs-comment>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=300000</span>\n<span class=hljs-attribute>240</span>/playlist.m<span class=hljs-number>3</span>u<span class=hljs-number>8</span>?t=<span class=hljs-number>3</span>i<span class=hljs-number>87</span>VhR<span class=hljs-number>5</span>nuXMsjxJRGBiEYSNPdfggGQtr<span class=hljs-number>9</span>LjXNx<span class=hljs-number>1</span>fr<span class=hljs-number>5</span>Dufac<span class=hljs-number>7</span>cEaEKMyo<span class=hljs-number>2</span>UAv<span class=hljs-number>77</span>B<span class=hljs-number>63</span>hAvVewach<span class=hljs-number>5</span>eaPjFGK<span class=hljs-number>3</span>EU<span class=hljs-number>22</span>fcpcFD<span class=hljs-number>4</span>RAeNAE<span class=hljs-number>7</span>nisDwZguUqvp&#38mq=<span class=hljs-number>720</span>&#38lanceId=c<span class=hljs-number>99528</span>aa-<span class=hljs-number>0</span>c<span class=hljs-number>3</span>c-<span class=hljs-number>4987</span>-ab<span class=hljs-number>6</span>c-ce<span class=hljs-number>5</span>cd<span class=hljs-number>1430223</span>\n<span class=hljs-comment>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=900000</span>\n<span class=hljs-attribute>360</span>/playlist.m<span class=hljs-number>3</span>u<span class=hljs-number>8</span>?t=<span class=hljs-number>3</span>i<span class=hljs-number>87</span>VhR<span class=hljs-number>5</span>nuXMsjxJRGBiEYSNPdfggGQtr<span class=hljs-number>9</span>LjXNx<span class=hljs-number>1</span>fr<span class=hljs-number>5</span>Dufac<span class=hljs-number>7</span>cEaEKMyo<span class=hljs-number>2</span>UAv<span class=hljs-number>77</span>B<span class=hljs-number>63</span>hAvVewach<span class=hljs-number>5</span>eaPjFGK<span class=hljs-number>3</span>EU<span class=hljs-number>22</span>fcpcFD<span class=hljs-number>4</span>RAeNAE<span class=hljs-number>7</span>nisDwZguUqvp&#38mq=<span class=hljs-number>720</span>&#38lanceId=c<span class=hljs-number>99528</span>aa-<span class=hljs-number>0</span>c<span class=hljs-number>3</span>c-<span class=hljs-number>4987</span>-ab<span class=hljs-number>6</span>c-ce<span class=hljs-number>5</span>cd<span class=hljs-number>1430223</span>\n<span class=hljs-comment>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1400000</span>\n<span class=hljs-attribute>480</span>/playlist.m<span class=hljs-number>3</span>u<span class=hljs-number>8</span>?t=<span class=hljs-number>3</span>i<span class=hljs-number>87</span>VhR<span class=hljs-number>5</span>nuXMsjxJRGBiEYSNPdfggGQtr<span class=hljs-number>9</span>LjXNx<span class=hljs-number>1</span>fr<span class=hljs-number>5</span>Dufac<span class=hljs-number>7</span>cEaEKMyo<span class=hljs-number>2</span>UAv<span class=hljs-number>77</span>B<span class=hljs-number>63</span>hAvVewach<span class=hljs-number>5</span>eaPjFGK<span class=hljs-number>3</span>EU<span class=hljs-number>22</span>fcpcFD<span class=hljs-number>4</span>RAeNAE<span class=hljs-number>7</span>nisDwZguUqvp&#38mq=<span class=hljs-number>720</span>&#38lanceId=c<span class=hljs-number>99528</span>aa-<span class=hljs-number>0</span>c<span class=hljs-number>3</span>c-<span class=hljs-number>4987</span>-ab<span class=hljs-number>6</span>c-ce<span class=hljs-number>5</span>cd<span class=hljs-number>1430223</span>\n<span class=hljs-comment>#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=2200000</span>\n<span class=hljs-attribute>720</span>/playlist.m<span class=hljs-number>3</span>u<span class=hljs-number>8</span>?t=<span class=hljs-number>3</span>i<span class=hljs-number>87</span>VhR<span class=hljs-number>5</span>nuXMsjxJRGBiEYSNPdfggGQtr<span class=hljs-number>9</span>LjXNx<span class=hljs-number>1</span>fr<span class=hljs-number>5</span>Dufac<span class=hljs-number>7</span>cEaEKMyo<span class=hljs-number>2</span>UAv<span class=hljs-number>77</span>B<span class=hljs-number>63</span>hAvVewach<span class=hljs-number>5</span>eaPjFGK<span class=hljs-number>3</span>EU<span class=hljs-number>22</span>fcpcFD<span class=hljs-number>4</span>RAeNAE<span class=hljs-number>7</span>nisDwZguUqvp&#38mq=<span class=hljs-number>720</span>&#38lanceId=c<span class=hljs-number>99528</span>aa-<span class=hljs-number>0</span>c<span class=hljs-number>3</span>c-<span class=hljs-number>4987</span>-ab<span class=hljs-number>6</span>c-ce<span class=hljs-number>5</span>cd<span class=hljs-number>1430223</span>\n</code></pre><p>これはMaster Playlistと呼ばれるデータで、 回線速度によって異なるビットレートでの配信を行うアダプティブストリーミングのためのファイルです。 次に示すMedia PlaylistのURLと想定する回線速度が列記されています。<p>AbemaTVから配信されている<code>.m3u8</code>の例<pre><code class=\"hljs language-awk\"><span class=hljs-comment>#EXTM3U</span>\n<span class=hljs-comment>#EXT-X-VERSION:3</span>\n<span class=hljs-comment>#EXT-X-TARGETDURATION:6</span>\n<span class=hljs-comment>#EXT-X-MEDIA-SEQUENCE:4</span>\n<span class=hljs-comment>#EXT-X-DISCONTINUITY-SEQUENCE:1</span>\n<span class=hljs-comment>#EXT-X-KEY:METHOD=AES-128,URI=\"abematv://v2/abema-news/abema-news/DUjoiyL1pJGkADZotyiXDn5\",IV=0xaccca4b41de3d9afb029070eb564be40</span>\n<span class=hljs-comment>#EXTINF:5.005000,</span>\nhttps:<span class=hljs-regexp>//</span>abematv.akamaized.net<span class=hljs-regexp>/tsnews/</span>abema-news<span class=hljs-regexp>/h264/</span><span class=hljs-number>720</span>/<span class=hljs-number>5</span>BPWe1D8Hu9yCC8HaA3oHS.ts\n<span class=hljs-comment>#EXTINF:5.005000,</span>\nhttps:<span class=hljs-regexp>//</span>abematv.akamaized.net<span class=hljs-regexp>/tsnews/</span>abema-news<span class=hljs-regexp>/h264/</span><span class=hljs-number>720</span>/<span class=hljs-number>5</span>SphyMY1TTLvYkFo7B5JuM.ts\n<span class=hljs-comment>#EXTINF:5.005000,</span>\nhttps:<span class=hljs-regexp>//</span>abematv.akamaized.net<span class=hljs-regexp>/tsnews/</span>abema-news<span class=hljs-regexp>/h264/</span><span class=hljs-number>720</span>/<span class=hljs-number>2</span>kxyGFo9sH9zUUfKj5USUk.ts\n<span class=hljs-comment>#EXTINF:5.005000,</span>\nhttps:<span class=hljs-regexp>//</span>abematv.akamaized.net<span class=hljs-regexp>/tsnews/</span>abema-news<span class=hljs-regexp>/h264/</span><span class=hljs-number>720</span>/Cz43TVWLgUgqskzvWBBnjA.ts\n</code></pre><p>これはMedia Playlistと呼ばれるデータで、 配信されている映像・音声が格納された<code>.ts</code>ファイルのURLが列記されています。<h3>再生の方法</h3><p>クライアントは、まず<code>.m3u8</code>ファイルを取得します。 それがMaster Playlistであれば、回線速度によって適切な<code>.m3u8</code>を読みに行きます。 それがMedia Playlistであれば、<code>.ts</code>ファイルを取得して再生します。<p>クライアントは、<code>.m3u8</code>内のタグと呼ばれるデータ(<code>#EXT</code>で始まる行)に従って、<code>.m3u8</code>を再読込します。 ライブ配信を行う場合は、クライアントが再読込した際に新しい配信データが追加されていれば良いわけです。<p>以下に、主要なタグの説明を示します。<h4>EXT-X-TARGETDURATION</h4><p>分割された<code>.ts</code>の中で最大の長さに最も近い整数値を指定します。 クライアントは、およそこの秒数ごとに<code>.m3u8</code>を再読込します。<aside><a href=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1 rel=\"noopener noreferrer\"target=_blank><div><strong>draft-pantos-http-live-streaming-23</strong><cite>tools.ietf.org</cite><q cite=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1>HTTP Live Streaming (Internet-Draft, 2017)</q></div></a></aside><h4>EXT-X-MEDIA-SEQUENCE</h4><p>その<code>.m3u8</code>にかかれている一番最初の<code>.ts</code>が、放送全体で何番目の<code>.ts</code>であるかの値を指定します。 クライアントが分割された<code>.ts</code>を正しく連続再生する上で必要になります。<aside><a href=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.2 rel=\"noopener noreferrer\"target=_blank><div><strong>draft-pantos-http-live-streaming-23</strong><cite>tools.ietf.org</cite><q cite=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.2>HTTP Live Streaming (Internet-Draft, 2017)</q></div></a></aside><h4>EXTINF</h4><p>分割された<code>.ts</code>１つの秒数。小数で指定できる。<aside><a href=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.1 rel=\"noopener noreferrer\"target=_blank><div><strong>draft-pantos-http-live-streaming-23</strong><cite>tools.ietf.org</cite><q cite=https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.1>HTTP Live Streaming (Internet-Draft, 2017)</q></div></a></aside><h1>HLSを再生したい</h1><p>HLSはブラウザ上で再生できるのが強いです。 <a href=\"https://caniuse.com/#search=HLS\"rel=\"noopener noreferrer\"target=_blank>https://caniuse.com/#search=HLS</a><p>ん？？？？？なんか赤いな……<p><img alt src=hls.png><p>FirefoxとChromeが対応してないやんけ！！！！！！！！！ 珍しくEdgeが優秀だ……<p>悲しいですね。 でも<strong>Mesia Source Extensions</strong>(MSE)という機能を使うとそれっぽくHLSを再生できるので安心です。 <a href=\"https://caniuse.com/#search=MSE\"rel=\"noopener noreferrer\"target=_blank>https://caniuse.com/#search=MSE</a><p>MSEを使ったHLS再生は、<a href=http://videojs.com/ rel=\"noopener noreferrer\"target=_blank>Video.js</a>とか<a href=https://github.com/video-dev/hls.js/tree/master rel=\"noopener noreferrer\"target=_blank>hls.js</a>とかのライブラリを使うと簡単です。<p>ちなみに、AbemaTVは<a href=https://www.theoplayer.com/ rel=\"noopener noreferrer\"target=_blank>THEOplayer</a>という有償のプレーヤーを使ってるみたい。<h1>HLSで生配信</h1><p>HLSをなんとな～くわかった気になったので、ライブ配信をやってみます。<p>HLSで生配信をするにはどうすればよいのかというと、つまり<ul><li>データをMPEG-2 TSにエンコードする<li><code>.m3u8</code>に<code>.ts</code>へのリンクを追加する</ul><p>を繰り返すだけです。<p><code>.ts</code>へのを追加していくだけだとドンドン<code>.m3u8</code>がでっかくなってしまうので、 過去の<code>.ts</code>へのリンクはある程度時間が立ったら消してしまいましょう。 <code>.ts</code>へのリンクを消したら、<code>#EXT-X-MEDIA-SEQUENCE</code>を増やさないとクライアントが困ってしまうので注意です。<p>とっても単純ですね！ さて、先述したことをやるだけでライブ配信サーバが書けてしまいます。<p>今回は、Twitterからタイムラインを取得して、ツイートをいい感じにきりたんに読んでもらい、 HLSを用いてリアルタイムでその音声データを配信してみます。<p>音声ファイルを分割してMPEG-2 TSにするのを自分で書くのは流石にしんどいので、 FFMPEGさんにお願いしました。 <a href=https://www.ffmpeg.org/ffmpeg-formats.html#hls-1 rel=\"noopener noreferrer\"target=_blank>https://www.ffmpeg.org/ffmpeg-formats.html#hls-1</a><h2>やること</h2><p><img alt src=system.svg><h3>twitter.listen()</h3><ul><li>UserStreamでツイート取得<li>kiritan.pyにジョブを投げる<li>encoder.pyのキューに読み上げたWAVファイルを蓄積</ul><h3>encoder.livestreaming()</h3><ul><li>キューにファイルがなければ無音データをプレイリストに追加<li>キューにファイルがあればTSに分割してプレイリストに追加<li>プレイリストの先頭のTSの再生時間分だけ待って、プレイリストから削除</ul><h2>やりました</h2><p>方針が定まったら書くだけ……<h3>コード</h3><p>全コード<aside><a href=https://github.com/kaz/kiritan-voice rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://opengraph.githubassets.com/9a788297f5df43aaf6a607c9937e8433aad981c9a7c97f5388ae98a2618c7f53/kaz/kiritan-voice)><div><strong>GitHub - kaz/kiritan-voice: VOICELOID Web API Server</strong><cite>github.com</cite><q cite=https://github.com/kaz/kiritan-voice>VOICELOID Web API Server. Contribute to kaz/kiritan-voice development by creating an account on GitHub.</q></div></a></aside><p>HLS関係の処理はたったコレだけです！<pre><code class=\"hljs language-python\"><span class=hljs-comment># FFMPEGでファイルをMPEG-TSにエンコード（中身はMP3）</span>\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>ts</span>(<span class=hljs-params>file</span>):</span>\n\tlogging.info(<span class=hljs-string>\"Encoding WAV to MPEG-TS\"</span>)\n\n\tdata = subprocess.run(\n\t\t[\n\t\t\t<span class=hljs-string>\"ffmpeg\"</span>,\n\t\t\t<span class=hljs-string>\"-i\"</span>, file, <span class=hljs-string>\"-vn\"</span>,\n\t\t\t<span class=hljs-string>\"-acodec\"</span>, <span class=hljs-string>\"libmp3lame\"</span>,\n\t\t\t<span class=hljs-string>\"-ab\"</span>, <span class=hljs-string>\"128k\"</span>,\n\t\t\t<span class=hljs-string>\"-ac\"</span>, <span class=hljs-string>\"2\"</span>,\n\t\t\t<span class=hljs-string>\"-ar\"</span>, <span class=hljs-string>\"44100\"</span>,\n\t\t\t<span class=hljs-string>\"-f\"</span>, <span class=hljs-string>\"hls\"</span>,\n\t\t\t<span class=hljs-string>\"-hls_time\"</span>, <span class=hljs-string>\"2\"</span>,\n\t\t\t<span class=hljs-string>\"-hls_list_size\"</span>, <span class=hljs-string>\"0\"</span>,\n\t\t\t<span class=hljs-string>\"-start_number\"</span>, <span class=hljs-built_in>str</span>(<span class=hljs-built_in>int</span>(time.time() * <span class=hljs-number>1000</span>)),\n\t\t\t<span class=hljs-string>\"-hls_segment_filename\"</span>, <span class=hljs-string>\"static/live%d.ts\"</span>,\n\t\t\t<span class=hljs-string>\"pipe:1.m3u8\"</span>\n\t\t],\n\t\tstdout=subprocess.PIPE,\n\t\tstderr=subprocess.DEVNULL\n\t)\n\n\t<span class=hljs-comment># 出力されたプレイリストをパースして返す</span>\n\tplaylist = data.stdout.decode(<span class=hljs-string>\"utf-8\"</span>)\n\tplaylist = playlist[playlist.rfind(<span class=hljs-string>\"#EXTM3U\"</span>):]\n\n\t<span class=hljs-comment># Tuple (再生時間, ファイルパス)</span>\n\t<span class=hljs-keyword>return</span> re.findall(<span class=hljs-string>r\"#EXTINF:([\\d.]+),\\s+(\\S+)\"</span>, playlist)\n\n<span class=hljs-comment># ライブストリーミングキューに追加</span>\nque = []\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>enqueue</span>(<span class=hljs-params>f</span>):</span>\n\tque.append(f)\n\n<span class=hljs-comment># ライブプレイリストを更新</span>\ntsl = []\nseq = <span class=hljs-number>0</span>\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>__livecasting</span>():</span>\n\t<span class=hljs-keyword>global</span> seq\n\n\t<span class=hljs-keyword>while</span> <span class=hljs-literal>True</span>:\n\t\t<span class=hljs-keyword>try</span>:\n\t\t\t<span class=hljs-keyword>if</span> <span class=hljs-built_in>len</span>(que) != <span class=hljs-number>0</span>:\n\t\t\t\t<span class=hljs-comment># キューにデータがあればプレイリストに追加</span>\n\t\t\t\ttsl.extend(ts(que.pop(<span class=hljs-number>0</span>)))\n\t\t\t<span class=hljs-keyword>else</span>:\n\t\t\t\t<span class=hljs-comment># キューが空なら無音ファイルを配信</span>\n\t\t\t\t<span class=hljs-keyword>while</span> <span class=hljs-built_in>len</span>(tsl) &#60 <span class=hljs-number>3</span>:\n\t\t\t\t\ttsl.append((<span class=hljs-string>\"2.04\"</span>, <span class=hljs-string>\"silent.ts\"</span>))\n\n\t\t\t<span class=hljs-comment># TS 1つ分だけ休憩する</span>\n\t\t\ttime.sleep(<span class=hljs-built_in>float</span>(tsl[<span class=hljs-number>0</span>][<span class=hljs-number>0</span>]))\n\t\t\ttsl.pop(<span class=hljs-number>0</span>)\n\t\t\tseq += <span class=hljs-number>1</span>\n\t\t<span class=hljs-keyword>except</span>:\n\t\t\tlogging.error(traceback.format_exc())\n\n<span class=hljs-comment># サーバ起動</span>\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>livecasting</span>():</span>\n\t<span class=hljs-comment># 古い配信データを削除</span>\n\t<span class=hljs-keyword>for</span> f <span class=hljs-keyword>in</span> glob.glob(<span class=hljs-string>\"static/live*\"</span>):\n\t\tos.remove(f)\n\n\tthreading.Thread(target=__livecasting).start()\n\n<span class=hljs-comment># ライブプレイリストを生成</span>\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>playlist</span>():</span>\n\tpl = [\n\t\t<span class=hljs-string>\"#EXTM3U\"</span>,\n\t\t<span class=hljs-string>\"#EXT-X-VERSION:3\"</span>,\n\t\t<span class=hljs-string>\"#EXT-X-TARGETDURATION:3\"</span>,\n\t\t<span class=hljs-string>\"#EXT-X-MEDIA-SEQUENCE:%d\"</span> % seq\n\t]\n\n\t<span class=hljs-keyword>for</span> ts <span class=hljs-keyword>in</span> tsl[:<span class=hljs-number>5</span>]:\n\t\tpl.append(<span class=hljs-string>\"#EXTINF:%s,\"</span> % ts[<span class=hljs-number>0</span>])\n\t\tpl.append(<span class=hljs-string>\"#EXT-X-DISCONTINUITY\"</span>)\n\t\tpl.append(<span class=hljs-string>\"/static/%s\"</span> % ts[<span class=hljs-number>1</span>])\n\n\t<span class=hljs-keyword>return</span> <span class=hljs-string>\"\\n\"</span>.join(pl)\n</code></pre><p>ffmpegを使っているので、別途用意が必要です。 必要なPythonのライブラリは<code>pypiwin32</code>と<code>flask</code>と<code>tweepy</code>です<pre><code class=\"hljs language-sh\">pip install pypiwin32 flask tweepy\n</code></pre><h2>動作検証</h2><p>大体のブラウザでhls.jsを介した再生ができました。<p>ネイティブでHLSに対応しているブラウザ(Safari, Edge, iOS Safari, Android Chrome)は、 <code>.m3u8</code>に直接アクセスしても再生できました。<p>なんかAndroidだとちょっとプツプツしちゃってるかも？？？<h2>ハマりそうなポイント</h2><ul><li>TS1つの長さ、プレイリスト全体の長さ、<code>#EXT-X-TARGETDURATION</code>をうまく調整しないと再生されなかったりプツプツなったりする<ul><li>このへんどうするのが最適なのかがわからないので今回は試行錯誤した</ul><li>TSが切り替わる（別のメディアから生成したものになる）時に<code>#EXT-X-DISCONTINUITY</code>を付けないと再生が止まる<ul><li>Appleのソフトウェアはうまくやってくれるけど、その他は上手く行かない</ul><li>TwitterのUserStreamはPCの時計かズレてると認証失敗する</ul><h1>おしまい</h1><p>ということで、AzureのWindowsServerでWin32APIを使ってVOICEROIDを操作してTwitterのTLを読み上げた音声をHLSでライブ配信できました！<p>Win32APIとかHLSとか、まだわからないことがたくさんなので、それはおかしいだろ！って思ったら鉞おねがいします＞＜<p>それにしても、きりたんはかわいいですね！<p>おしまい"},"__N_SSG":true}