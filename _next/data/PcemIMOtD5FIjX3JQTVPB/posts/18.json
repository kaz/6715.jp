{"pageProps":{"article":{"type":"article","slug":"18","body":"Win32APIでVOICEROIDをいじってみます\n\n\n# 東北きりたん\n\n[VOICEROID+ 東北きりたん EX](http://www.ah-soft.com/voiceroid/kiritan/)を買いました。\n\nhttp://www.ah-soft.com/voiceroid/kiritan/\n\n![](kiritan.png)\n\nう～～～～んかわいい！！！\nかわいいです。\n\n声もしっとりしていて完全にボク好みです。最高。\n\n# クラウドきりたん\n\nいろいろ使いみちが思いつくんですが、**Windowsでしか動かない**のがネックです……\n\nHTTPでテキストをぶん投げたら音声が飛んでくる感じになったら色々幸せじゃないですか。\nということで作っていきたいと思います。\n\n## Linuxで動かないかな？\n\nLinuxで動かすとすれば、Wineですね。\n\n[Linux の Docker の中で voiceroid+ ゆかりさんを動かす](http://pushl.net/blog/12/)という記事を見つけました。\nどうやらWineで動くみたい？しかもDockerの中で。すごい！\n\nhttp://pushl.net/blog/12/\n\n試してみたんですが、うまくいきませんでした＞＜\n**VOICEROID+ EX**になってからいろいろ変わったんでしょうか。\n\n自分でもWine環境を作って試してみたんですが、 .NET Framework 3.5のインストールがうまく行かず失敗。\n\nということでWineは諦めます。\n\n## WindowsServerで動かないかな？\n\n動作環境には当然乗っていませんが、Windows Server 2016で適当に試してみたら普通に動きました。\n\nですが、VOICEROIDにはGUIしかありません。\nCUIから操作できれば全て解決なんですが、用意されてません。かなしい。\n\nということで、Win32APIを叩いて自作プログラムからVOICEROIDの機能を使えるようにしてみましょう。\nとはいっても、GUIを無理やり操作して動かすだけです。\n筋肉ソリューション感が否めませんが、仕方がないです。\n\n# Win32APIを叩いてVOICEROIDを操作\n\nこのテの話は、「ウィンドウ 操作 Win32API」とかでググると無限に見つかるかと思うので、ザックリとだけ説明します。\n\n`SendMessage`関数を使うとユーザのマウス操作やキーボード操作がエミュレートできるので、\nうまい感じにテキストを入力させて保存ボタンを押させてあげれば、読み上げたwavファイルを得ることができそうです。\n\n## やりました\n\n方針が定まったら書くだけ……\nPythonで書いてみました。\n\nffmpegを使っているので、別途用意が必要です。\n必要なPythonのライブラリは`pypiwin32`です\n\n```sh\npip install pypiwin32\n```\n\n### コード\n\nhttps://github.com/kaz/kiritan-server/blob/aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448/talk.py\n\n```python\n# coding: UTF-8\n\nimport os\nimport sys\nimport time\nimport hashlib\nimport threading\nimport subprocess\n\nfrom win32con import *\nfrom win32gui import *\nfrom win32process import *\n\n# 共通設定\nwaitSec = 0.5\nwindowName = \"VOICEROID＋ 東北きりたん EX\"\n\ndef talk(inputText):\n\t# 出力先ディレクトリ作成\n\toutdir = \"./output/\"\n\ttry:\n\t\tos.mkdir(outdir)\n\texcept:\n\t\tpass\n\n\t# ファイルが存在してたらやめる\n\toutfile = outdir + hashlib.md5(inputText.encode(\"utf-8\")).hexdigest() + \".mp3\"\n\tif os.path.exists(outfile):\n\t\treturn outfile\n\n\t# 一時ファイルが存在している間は待つ\n\ttmpfile = \"tmp.wav\"\n\twhile True:\n\t\tif os.path.exists(outfile):\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\twhile True:\n\t\t# VOICEROIDプロセスを探す\n\t\twindow = FindWindow(None, windowName) or FindWindow(None, windowName + \"*\")\n\n\t\t# 見つからなかったらVOICEROIDを起動\n\t\tif window == 0:\n\t\t\tsubprocess.Popen([\"C:\\Program Files (x86)\\AHS\\VOICEROID+\\KiritanEX\\VOICEROID.exe\"])\n\t\t\ttime.sleep(3 * waitSec)\n\t\telse:\n\t\t\tbreak\n\n\twhile True:\n\t\t# ダイアログが出ていたら閉じる\n\t\terrorDialog = FindWindow(None, \"エラー\") or FindWindow(None, \"注意\") or FindWindow(None, \"音声ファイルの保存\")\n\t\tif errorDialog:\n\t\t\tSendMessage(errorDialog, WM_CLOSE, 0, 0)\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\t# 最前列に持ってくる\n\tSetWindowPos(window, HWND_TOPMOST, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOMOVE | SWP_NOSIZE)\n\n\t# 保存ダイアログの操作\n\tdef enumDialogCallback(hwnd, param):\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t# ファイル名を設定\n\t\tif className.count(\"Edit\"):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, 0, tmpfile)\n\n\t\t# 保存する\n\t\tif winText.count(\"保存\"):\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, 0)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, 0, 0)\n\n\t# 音声の保存\n\tdef save():\n\t\ttime.sleep(waitSec)\n\n\t\t# ダイアログがあれば操作する\n\t\tdialog = FindWindow(None, \"音声ファイルの保存\")\n\t\tif dialog:\n\t\t\tEnumChildWindows(dialog, enumDialogCallback, None)\n\t\t\treturn\n\n\t\t# 再試行\n\t\tsave()\n\n\t# VOICEROIDを操作\n\tdef enumCallback(hwnd, param):\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t# テキストを入力する\n\t\tif className.count(\"RichEdit20W\"):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, 0, inputText)\n\n\t\tif winText.count(\"音声保存\"):\n\t\t\t# 最小化解除\n\t\t\tShowWindow(window, SW_SHOWNORMAL)\n\n\t\t\t# 保存ダイアログ操作用スレッド起動\n\t\t\tthreading.Thread(target=save).start()\n\n\t\t\t# 保存ボタンを押す\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, 0)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, 0, 0)\n\n\t# VOICEROIDにテキストを読ませる\n\tEnumChildWindows(window, enumCallback, None)\n\n\t# プログレスダイアログが表示されている間は待つ\n\twhile True:\n\t\tif FindWindow(None, \"音声保存\"):\n\t\t\ttime.sleep(waitSec)\n\t\telse:\n\t\t\tbreak\n\n\t# MP3に変換\n\tsubprocess.run([\"ffmpeg\", \"-i\", tmpfile, \"-acodec\", \"libmp3lame\", \"-ab\", \"128k\", \"-ac\", \"2\", \"-ar\", \"44100\", outfile])\n\n\t# 一時ファイルが存在していたら消す\n\ttry:\n\t\tos.remove(tmpfile)\n\t\tos.remove(tmpfile.replace(\"wav\", \"txt\"))\n\texcept:\n\t\tpass\n\n\treturn outfile\n\nprint(talk(sys.argv[1]))\n```\n\n## 注意\n\n一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。\n保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、\nスクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。\n\n手抜きです……\n\n## ハマりそうなポイント\n\n- ところどころにsleepを入れないと操作が失敗することがある\n- フォーカスが当たってないとか最小化されてるとかでボタン操作に失敗することがある\n- 出力が終わってない状況で新しい読み上げをさせようとすると死ぬ\n\t- 今回は前のが終わるまでブロックするようにした\n- Windowsのバージョンが違うと保存ウィンドウが違う気がするので上手く行かないかも\n\t- 今回はWindowsServer2016(Windows 10)です\n- 同じテキストの繰り返しを投げるとVOICEROIDがエラーを吐く\n\t- よくわからん\n\n# 次回予告\n\nということで、Pythonから好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。\nコレだけでもうだいぶ夢が広がるカンジですね！！\n\n次回は、コイツをクラウドで動かしていつでもどこでもきりたんボイスが作れる環境を作ります。\n\n[クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～](/posts/19/)\n","title":"クラウド東北きりたん その1 ～Win32APIでVOICEROIDを操作～","image":null,"tags":["Python","VOICEROID","Win32API","東北きりたん"],"date":"2017-05-25T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"Win32APIでVOICEROIDをいじってみます 東北きりたん VOICEROID+ 東北きりたん EXを買いました。 http://www.ah-soft.com/voiceroid/kiri…","content":"<p>Win32APIでVOICEROIDをいじってみます<h1>東北きりたん</h1><p><a href=http://www.ah-soft.com/voiceroid/kiritan/ rel=\"noopener noreferrer\"target=_blank>VOICEROID+ 東北きりたん EX</a>を買いました。<aside><a href=http://www.ah-soft.com/voiceroid/kiritan/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(http://www.ah-soft.com/images/common/socialicn_facebook.svg)><div><strong>VOICEROID+ 東北きりたん EX｜製品情報｜AHS(AH-Software)</strong><cite>www.ah-soft.com</cite><q cite=http://www.ah-soft.com/voiceroid/kiritan/>VOICEROID+ 東北きりたん EXは、声優「茜屋日海夏」の声を元に制作した、落ち着いていながらも可愛らしい声が特徴の入力文字読み上げソフトです。</q></div></a></aside><p><img alt src=kiritan.png><p>う～～～～んかわいい！！！ かわいいです。<p>声もしっとりしていて完全にボク好みです。最高。<h1>クラウドきりたん</h1><p>いろいろ使いみちが思いつくんですが、<strong>Windowsでしか動かない</strong>のがネックです……<p>HTTPでテキストをぶん投げたら音声が飛んでくる感じになったら色々幸せじゃないですか。 ということで作っていきたいと思います。<h2>Linuxで動かないかな？</h2><p>Linuxで動かすとすれば、Wineですね。<p><a href=http://pushl.net/blog/12/ rel=\"noopener noreferrer\"target=_blank>Linux の Docker の中で voiceroid+ ゆかりさんを動かす</a>という記事を見つけました。 どうやらWineで動くみたい？しかもDockerの中で。すごい！<aside><a href=http://pushl.net/blog/12/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(http://pushl.net/blog/12/yukari_san.png)><div><strong>Linux の Docker の中で voiceroid+ ゆかりさんを動かす</strong><cite>pushl.net</cite><q cite=http://pushl.net/blog/12/></q></div></a></aside><p>試してみたんですが、うまくいきませんでした＞＜ <strong>VOICEROID+ EX</strong>になってからいろいろ変わったんでしょうか。<p>自分でもWine環境を作って試してみたんですが、 .NET Framework 3.5のインストールがうまく行かず失敗。<p>ということでWineは諦めます。<h2>WindowsServerで動かないかな？</h2><p>動作環境には当然乗っていませんが、Windows Server 2016で適当に試してみたら普通に動きました。<p>ですが、VOICEROIDにはGUIしかありません。 CUIから操作できれば全て解決なんですが、用意されてません。かなしい。<p>ということで、Win32APIを叩いて自作プログラムからVOICEROIDの機能を使えるようにしてみましょう。 とはいっても、GUIを無理やり操作して動かすだけです。 筋肉ソリューション感が否めませんが、仕方がないです。<h1>Win32APIを叩いてVOICEROIDを操作</h1><p>このテの話は、「ウィンドウ 操作 Win32API」とかでググると無限に見つかるかと思うので、ザックリとだけ説明します。<p><code>SendMessage</code>関数を使うとユーザのマウス操作やキーボード操作がエミュレートできるので、 うまい感じにテキストを入力させて保存ボタンを押させてあげれば、読み上げたwavファイルを得ることができそうです。<h2>やりました</h2><p>方針が定まったら書くだけ…… Pythonで書いてみました。<p>ffmpegを使っているので、別途用意が必要です。 必要なPythonのライブラリは<code>pypiwin32</code>です<pre><code class=\"hljs language-sh\">pip install pypiwin32\n</code></pre><h3>コード</h3><aside><a href=https://github.com/kaz/kiritan-voice rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://opengraph.githubassets.com/9a788297f5df43aaf6a607c9937e8433aad981c9a7c97f5388ae98a2618c7f53/kaz/kiritan-voice)><div><strong>kiritan-voice/talk.py at aa4c4e4ed39bb024fb50f5392c8375dc4f4fa448 · kaz/kiritan-voice</strong><cite>github.com</cite><q cite=https://github.com/kaz/kiritan-voice>VOICELOID Web API Server. Contribute to kaz/kiritan-voice development by creating an account on GitHub.</q></div></a></aside><pre><code class=\"hljs language-python\"><span class=hljs-comment># coding: UTF-8</span>\n\n<span class=hljs-keyword>import</span> os\n<span class=hljs-keyword>import</span> sys\n<span class=hljs-keyword>import</span> time\n<span class=hljs-keyword>import</span> hashlib\n<span class=hljs-keyword>import</span> threading\n<span class=hljs-keyword>import</span> subprocess\n\n<span class=hljs-keyword>from</span> win32con <span class=hljs-keyword>import</span> *\n<span class=hljs-keyword>from</span> win32gui <span class=hljs-keyword>import</span> *\n<span class=hljs-keyword>from</span> win32process <span class=hljs-keyword>import</span> *\n\n<span class=hljs-comment># 共通設定</span>\nwaitSec = <span class=hljs-number>0.5</span>\nwindowName = <span class=hljs-string>\"VOICEROID＋ 東北きりたん EX\"</span>\n\n<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>talk</span>(<span class=hljs-params>inputText</span>):</span>\n\t<span class=hljs-comment># 出力先ディレクトリ作成</span>\n\toutdir = <span class=hljs-string>\"./output/\"</span>\n\t<span class=hljs-keyword>try</span>:\n\t\tos.mkdir(outdir)\n\t<span class=hljs-keyword>except</span>:\n\t\t<span class=hljs-keyword>pass</span>\n\n\t<span class=hljs-comment># ファイルが存在してたらやめる</span>\n\toutfile = outdir + hashlib.md5(inputText.encode(<span class=hljs-string>\"utf-8\"</span>)).hexdigest() + <span class=hljs-string>\".mp3\"</span>\n\t<span class=hljs-keyword>if</span> os.path.exists(outfile):\n\t\t<span class=hljs-keyword>return</span> outfile\n\n\t<span class=hljs-comment># 一時ファイルが存在している間は待つ</span>\n\ttmpfile = <span class=hljs-string>\"tmp.wav\"</span>\n\t<span class=hljs-keyword>while</span> <span class=hljs-literal>True</span>:\n\t\t<span class=hljs-keyword>if</span> os.path.exists(outfile):\n\t\t\ttime.sleep(waitSec)\n\t\t<span class=hljs-keyword>else</span>:\n\t\t\t<span class=hljs-keyword>break</span>\n\n\t<span class=hljs-keyword>while</span> <span class=hljs-literal>True</span>:\n\t\t<span class=hljs-comment># VOICEROIDプロセスを探す</span>\n\t\twindow = FindWindow(<span class=hljs-literal>None</span>, windowName) <span class=hljs-keyword>or</span> FindWindow(<span class=hljs-literal>None</span>, windowName + <span class=hljs-string>\"*\"</span>)\n\n\t\t<span class=hljs-comment># 見つからなかったらVOICEROIDを起動</span>\n\t\t<span class=hljs-keyword>if</span> window == <span class=hljs-number>0</span>:\n\t\t\tsubprocess.Popen([<span class=hljs-string>\"C:\\Program Files (x86)\\AHS\\VOICEROID+\\KiritanEX\\VOICEROID.exe\"</span>])\n\t\t\ttime.sleep(<span class=hljs-number>3</span> * waitSec)\n\t\t<span class=hljs-keyword>else</span>:\n\t\t\t<span class=hljs-keyword>break</span>\n\n\t<span class=hljs-keyword>while</span> <span class=hljs-literal>True</span>:\n\t\t<span class=hljs-comment># ダイアログが出ていたら閉じる</span>\n\t\terrorDialog = FindWindow(<span class=hljs-literal>None</span>, <span class=hljs-string>\"エラー\"</span>) <span class=hljs-keyword>or</span> FindWindow(<span class=hljs-literal>None</span>, <span class=hljs-string>\"注意\"</span>) <span class=hljs-keyword>or</span> FindWindow(<span class=hljs-literal>None</span>, <span class=hljs-string>\"音声ファイルの保存\"</span>)\n\t\t<span class=hljs-keyword>if</span> errorDialog:\n\t\t\tSendMessage(errorDialog, WM_CLOSE, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>)\n\t\t\ttime.sleep(waitSec)\n\t\t<span class=hljs-keyword>else</span>:\n\t\t\t<span class=hljs-keyword>break</span>\n\n\t<span class=hljs-comment># 最前列に持ってくる</span>\n\tSetWindowPos(window, HWND_TOPMOST, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>, SWP_SHOWWINDOW | SWP_NOMOVE | SWP_NOSIZE)\n\n\t<span class=hljs-comment># 保存ダイアログの操作</span>\n\t<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>enumDialogCallback</span>(<span class=hljs-params>hwnd, param</span>):</span>\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t<span class=hljs-comment># ファイル名を設定</span>\n\t\t<span class=hljs-keyword>if</span> className.count(<span class=hljs-string>\"Edit\"</span>):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, <span class=hljs-number>0</span>, tmpfile)\n\n\t\t<span class=hljs-comment># 保存する</span>\n\t\t<span class=hljs-keyword>if</span> winText.count(<span class=hljs-string>\"保存\"</span>):\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, <span class=hljs-number>0</span>)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>)\n\n\t<span class=hljs-comment># 音声の保存</span>\n\t<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>save</span>():</span>\n\t\ttime.sleep(waitSec)\n\n\t\t<span class=hljs-comment># ダイアログがあれば操作する</span>\n\t\tdialog = FindWindow(<span class=hljs-literal>None</span>, <span class=hljs-string>\"音声ファイルの保存\"</span>)\n\t\t<span class=hljs-keyword>if</span> dialog:\n\t\t\tEnumChildWindows(dialog, enumDialogCallback, <span class=hljs-literal>None</span>)\n\t\t\t<span class=hljs-keyword>return</span>\n\n\t\t<span class=hljs-comment># 再試行</span>\n\t\tsave()\n\n\t<span class=hljs-comment># VOICEROIDを操作</span>\n\t<span class=hljs-function><span class=hljs-keyword>def</span> <span class=hljs-title>enumCallback</span>(<span class=hljs-params>hwnd, param</span>):</span>\n\t\tclassName = GetClassName(hwnd)\n\t\twinText = GetWindowText(hwnd)\n\n\t\t<span class=hljs-comment># テキストを入力する</span>\n\t\t<span class=hljs-keyword>if</span> className.count(<span class=hljs-string>\"RichEdit20W\"</span>):\n\t\t\tSendMessage(hwnd, WM_SETTEXT, <span class=hljs-number>0</span>, inputText)\n\n\t\t<span class=hljs-keyword>if</span> winText.count(<span class=hljs-string>\"音声保存\"</span>):\n\t\t\t<span class=hljs-comment># 最小化解除</span>\n\t\t\tShowWindow(window, SW_SHOWNORMAL)\n\n\t\t\t<span class=hljs-comment># 保存ダイアログ操作用スレッド起動</span>\n\t\t\tthreading.Thread(target=save).start()\n\n\t\t\t<span class=hljs-comment># 保存ボタンを押す</span>\n\t\t\tSendMessage(hwnd, WM_LBUTTONDOWN, MK_LBUTTON, <span class=hljs-number>0</span>)\n\t\t\tSendMessage(hwnd, WM_LBUTTONUP, <span class=hljs-number>0</span>, <span class=hljs-number>0</span>)\n\n\t<span class=hljs-comment># VOICEROIDにテキストを読ませる</span>\n\tEnumChildWindows(window, enumCallback, <span class=hljs-literal>None</span>)\n\n\t<span class=hljs-comment># プログレスダイアログが表示されている間は待つ</span>\n\t<span class=hljs-keyword>while</span> <span class=hljs-literal>True</span>:\n\t\t<span class=hljs-keyword>if</span> FindWindow(<span class=hljs-literal>None</span>, <span class=hljs-string>\"音声保存\"</span>):\n\t\t\ttime.sleep(waitSec)\n\t\t<span class=hljs-keyword>else</span>:\n\t\t\t<span class=hljs-keyword>break</span>\n\n\t<span class=hljs-comment># MP3に変換</span>\n\tsubprocess.run([<span class=hljs-string>\"ffmpeg\"</span>, <span class=hljs-string>\"-i\"</span>, tmpfile, <span class=hljs-string>\"-acodec\"</span>, <span class=hljs-string>\"libmp3lame\"</span>, <span class=hljs-string>\"-ab\"</span>, <span class=hljs-string>\"128k\"</span>, <span class=hljs-string>\"-ac\"</span>, <span class=hljs-string>\"2\"</span>, <span class=hljs-string>\"-ar\"</span>, <span class=hljs-string>\"44100\"</span>, outfile])\n\n\t<span class=hljs-comment># 一時ファイルが存在していたら消す</span>\n\t<span class=hljs-keyword>try</span>:\n\t\tos.remove(tmpfile)\n\t\tos.remove(tmpfile.replace(<span class=hljs-string>\"wav\"</span>, <span class=hljs-string>\"txt\"</span>))\n\t<span class=hljs-keyword>except</span>:\n\t\t<span class=hljs-keyword>pass</span>\n\n\t<span class=hljs-keyword>return</span> outfile\n\nprint(talk(sys.argv[<span class=hljs-number>1</span>]))\n</code></pre><h2>注意</h2><p>一度適当なテキストを読み上げさせ、スクリプトを実行するディレクトリに保存させておく必要があります。 保存先ダイアログを操作するときに、保存先ディレクトリを変更せずに保存させるため、 スクリプトの実行ディレクトリと同じところがデフォルトになっていないと以後の処理が失敗します。<p>手抜きです……<h2>ハマりそうなポイント</h2><ul><li>ところどころにsleepを入れないと操作が失敗することがある<li>フォーカスが当たってないとか最小化されてるとかでボタン操作に失敗することがある<li>出力が終わってない状況で新しい読み上げをさせようとすると死ぬ<ul><li>今回は前のが終わるまでブロックするようにした</ul><li>Windowsのバージョンが違うと保存ウィンドウが違う気がするので上手く行かないかも<ul><li>今回はWindowsServer2016(Windows 10)です</ul><li>同じテキストの繰り返しを投げるとVOICEROIDがエラーを吐く<ul><li>よくわからん</ul></ul><h1>次回予告</h1><p>ということで、Pythonから好きなテキストをVOICEROIDに送って読み上げたWAVを得ることができるようになりました。 コレだけでもうだいぶ夢が広がるカンジですね！！<p>次回は、コイツをクラウドで動かしていつでもどこでもきりたんボイスが作れる環境を作ります。<aside><a href=/posts/19/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>クラウド東北きりたん その2 ～AzureのWindowsServerでVOICEROIDを動かす～</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/19/>AzureのWindowsServerでVOICEROIDを動かします 前回の続きです。 あらすじ 前回はPythonからWin32APIをバシバシ叩いてきりたん好きなコトを喋らせることができるよう…</q></div></a></aside>"},"__N_SSG":true}