{"pageProps":{"article":{"type":"article","slug":"25","body":"この記事は[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)の21日目の記事です！\n\n[ConoHa Advent Calendar 2018](https://qiita.com/advent-calendar/2018/conoha)\n\n# ConoHaの[DNS API](https://www.conoha.jp/docs/)は便利\n\nという話を[2年前](/posts/14/)にもしたのでした。\n\n[2年前の記事](/posts/14/)\n\n皆さん、ConoHaのDNS API使ってますか？\nLet's EncryptのDNS-01チャレンジの自動化にも使える！のでイケてますね。\n\n## APIクライアントについて\n\nさて、ではどうやってAPIを叩くか？\n先に紹介した記事の要旨は「ConoHa DNS用 APIクライアント 作った」なんですが、あまりにも使い辛いので無視します。\n\n### Designateクライントを使う\n\nConoHaのDNSは[OpenStack Designate](https://docs.openstack.org/designate/latest/)を使っているようです。多分。API体系がソレっぽいので。\n\nなので、[Designateのクライアント](https://docs.openstack.org/python-designateclient/latest/cli/index.html)が使えるかもしれない……？（未確認）\n\nしかし、ConoHaではdeprecatedなv1 APIのみ提供されているので、互換性の面で死ぬかもしれません。\n[一応v2も動いている](https://dns-service.tyo1.conoha.io/)ようですが、不完全なようですし、そもそもundocumentedです。\n\n### Lexiconを使う\n\n様々なDNSサービスを1つのCLIから使えるようにしたソフトウェアが[Lexicon](https://github.com/AnalogJ/lexicon)です。\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n便利なので使ってください。pipさえあればGetできます。\nこんな具合に使えるかと思います。\n\n```\n$ pip install dns-lexicon\n\n$ lexicon conoha\nusage: lexicon conoha [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                      [--priority PRIORITY] [--identifier IDENTIFIER]\n                      [--log_level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                      [--output {TABLE,TABLE-NO-HEADER,JSON,QUIET}]\n                      [--auth-region AUTH_REGION] [--auth-token AUTH_TOKEN]\n                      [--auth-username AUTH_USERNAME]\n                      [--auth-password AUTH_PASSWORD]\n                      [--auth-tenant-id AUTH_TENANT_ID]\n                      {create,list,update,delete} domain\n                      {A,AAAA,CNAME,MX,NS,SOA,TXT,SRV,LOC}\n\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef create narusejun.com A --name local --content 127.0.0.1\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id 0123456789abcdef0123456789abcdef list narusejun.com A\nID                                   TYPE NAME                CONTENT   TTL\n------------------------------------ ---- ------------------- --------- ----\n42929801-5111-41d5-a115-9f67a1d07810 A    local.narusejun.com 127.0.0.1 3600\n```\n\n詳しくは[公式のドキュメント](https://github.com/AnalogJ/lexicon)を読んでください。\nLet's EncryptのDNS-01を自動化するやり方も紹介されていますよ！\n\n## Let's EncryptのDNS-01チャレンジを自動化する\n\nせっかくAPIでDNSレコードを操作できるわけですし、活用したいですね！\n\n最近[ワイルドカード証明書が取れるようになった](/posts/23/)Let's Encryptと連携してみましょう。\nちなみに、ワイルドカード証明書はDNS-01チャレンジでしか取得できません！\n\n### LexiconとDehydratedを使う\n\n先ほど紹介したlexiconと、ACMEクライアント[Dehydrated](https://github.com/lukas2511/dehydrated)を組み合わせるやり方がlexiconの作者さんによって紹介されています。\n\nhttps://blog.thesparktree.com/generating-intranet-and-private-network-ssl\n\n### Legoを使う\n\n2つのソフトウェアを連携させるのは面倒ですし、できればパパッとコマンド1つで証明書取りたいですよね？\nそこで、Go製のACMEクライアント[lego](https://github.com/xenolf/lego)を使いましょう！\nlegoでは、いろんなDNS-Providersが提供されていて、対応しているDNSサービスならすぐに証明書を発行できます。\n\n[lego](https://github.com/xenolf/lego)\n\nなんと**ConoHa DNSに対応**しています！すごい！！\n（まぁ、ボクが使うために対応させたからなんですケド……）\n\n[バイナリが入手可能](https://github.com/xenolf/lego/releases)なほか、goがインストールされているなら`go get`ですぐに入手できます。\nこういう感じで使います。とっても便利ですよ！\n\n```\n$ go get -u github.com/xenolf/lego/cmd/lego\n\n$ lego dnshelp\nCredentials for DNS providers must be passed through environment variables.\n\nValid providers and their associated credential environment variables:\n        conoha:         CONOHA_REGION, CONOHA_TENANT_ID, CONOHA_API_USERNAME, CONOHA_API_PASSWORD\n\nAdditional configuration environment variables:\n        conoha:         CONOHA_POLLING_INTERVAL, CONOHA_PROPAGATION_TIMEOUT, CONOHA_TTL, CONOHA_HTTP_TIMEOUT\n\n$ export CONOHA_REGION=tyo1\n$ export CONOHA_TENANT_ID=0123456789abcdef0123456789abcdef\n$ export CONOHA_API_USERNAME=gncu01234567\n$ export CONOHA_API_PASSWORD=xxxxxxxxxxx\n$ lego --dns conoha --server https://acme-staging-v02.api.letsencrypt.org/directory --email cert@narusejun.com --domains narusejun.com --domains *.narusejun.com run\n2018/12/21 02:44:58 [INFO] [narusejun.com, *.narusejun.com] acme: Obtaining bundled SAN certificate\n2018/12/21 02:44:59 [INFO] [*.narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/wcYZJB5aWmfi4WzGuwv2JlSaYjryGf67zqES8h8bmEg\n2018/12/21 02:44:59 [INFO] [narusejun.com] AuthURL: https://acme-staging-v02.api.letsencrypt.org/acme/authz/gwXBvxvuHk7TrUYbuu3MWp7heVoLTTle7Nh2ng98b74\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Authorization already valid; skipping challenge\n2018/12/21 02:44:59 [INFO] [narusejun.com] acme: Preparing to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] acme: Trying to solve DNS-01\n2018/12/21 02:45:00 [INFO] [narusejun.com] Checking DNS record propagation using [1.0.0.1:53]\n2018/12/21 02:45:00 [INFO] Wait [timeout: 1m0s, interval: 2s]\n2018/12/21 02:45:37 [INFO] [narusejun.com] The server validated our request\n2018/12/21 02:45:38 [INFO] [narusejun.com, *.narusejun.com] acme: Validations succeeded; requesting certificates\n2018/12/21 02:45:39 [INFO] [narusejun.com] Server responded with a certificate.\n\n$ openssl x509 -in ~/.lego/certificates/narusejun.com.crt -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            fa:78:5b:6e:73:74:37:e6:c4:36:54:82:02:04:d2:7e:bd:0b\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN = Fake LE Intermediate X1\n        Validity\n            Not Before: Dec 20 16:45:40 2018 GMT\n            Not After : Mar 20 16:45:40 2019 GMT\n        Subject: CN = narusejun.com\n        X509v3 extensions:\n            X509v3 Subject Alternative Name:\n                DNS:*.narusejun.com, DNS:narusejun.com\n```\n\n……と、サクッとワイルドカード証明書が取れてしまいました。すごい！便利！\n\n上の例はstaging環境から証明書を取得しているので、マネする際はご注意ください！\n詳しくは、例によって[公式ドキュメント](https://github.com/xenolf/lego)をごらんください。\n\n### traefikを使う\n\n[traefik](https://docs.traefik.io/)は強いL7ロードバランサみたいなものです（ざっくりとした説明）。\nLet's Encryptから自動で証明書を取る機能がついてるんですが、この機能は内部で先述したlegoを利用しています。\n\n[traefik](https://docs.traefik.io/)\n\n……ということは、**ConoHa DNSに対応**しています！\n詳しい説明は省きますが、[公式ドキュメント](https://docs.traefik.io/configuration/acme/)を参考に設定してみてください。\nちゃんとConoHa DNSと連携して動作することを確認済みです。\n\n## おわりに\n\n紹介したソフトウェア以外にも、LexiconやLegoを内部で使ってる系ソフトが実はConoHaに対応してるパターンがいっぱいあるかもしれません。このソフトでもConoHa DNS使えたよ！とかあったら教えてください。\nちなみに、[Caddy](https://caddyserver.com/)というHTTPサーバが[Legoの全DNSプロバイダに対応しそう](https://caddy.community/t/poll-we-can-end-dns-provider-plugins-should-we/4887)だったりするので、そしたらConoHaも使えるようになりますね！\n\n----\n\nConoHaのDNS、めっちゃ便利なので使いましょう。\nAPIでレコードいじれるし、ゾーン数がいくつあっても無料ってマジ！？神じゃん。\n\nあっ、ボクのパソコン見てください。\n\nhttps://twitter.com/sekai67/status/1053444090757435392\n\nhttps://twitter.com/sekai67/status/1053598421414596608\n\nhttps://twitter.com/sekai67/status/1053441437126127616\n","title":"ConoHaのDNSをAPIから操作する話","image":null,"tags":["API","ConoHa","DNS","Let's Encrypt","アドベントカレンダー"],"date":"2018-12-21T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"この記事はConoHa Advent Calendar 2018の21日目の記事です！ ConoHa Advent Calendar 2018 ConoHaのDNS APIは便利 という話を2年前に…","content":"<p>この記事は<a href=https://qiita.com/advent-calendar/2018/conoha rel=\"noopener noreferrer\"target=_blank>ConoHa Advent Calendar 2018</a>の21日目の記事です！<aside><a href=https://qiita.com/advent-calendar/2018/conoha rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://cdn.qiita.com/assets/qiita-fb-41f9429f13a8c56f50dd0ab477c80d26.png)><div><strong>ConoHa Advent Calendar 2018 - Qiita</strong><cite>qiita.com</cite><q cite=https://qiita.com/advent-calendar/2018/conoha>めちゃ速！なオールSSD VPS＆レンタルサーバーを提供するConoHaのAdvent Calendarです♪ ノウハウや使い方などなど、ConoHaのサービスに関することならなんでもどうぞ！ 今年リリースしたConoHa WINGについてでももちろんオッケー！ このはへの愛のメッセージを文末に添えると、このはが大変喜びます。 今年もNGワードは「おっさん」なんだからねっ！！ 何を書こうか迷うという方は、過去のものを参考にしてくださいねっ☆ ・&#60...</q></div></a></aside><h1>ConoHaの<a href=https://www.conoha.jp/docs/ rel=\"noopener noreferrer\"target=_blank>DNS API</a>は便利</h1><p>という話を<a href=/posts/14/>2年前</a>にもしたのでした。<aside><a href=/posts/14/ style=background-image:url(https://res.cloudinary.com/narusejun/image/twitter_name/h_128/sekai67.jpg)><div><strong>ConoHaのDNS APIをCLIから叩くやつを作った</strong><cite>6715.jp</cite><q cite=https://6715.jp/posts/14/>作りました ConoHa Advent Calendar 2016 24日目の記事です。 ConoHa Advent Calendar 2016 ConoHaのDNS ConoHaには無料で使えるD…</q></div></a></aside><p>皆さん、ConoHaのDNS API使ってますか？ Let's EncryptのDNS-01チャレンジの自動化にも使える！のでイケてますね。<h2>APIクライアントについて</h2><p>さて、ではどうやってAPIを叩くか？ 先に紹介した記事の要旨は「ConoHa DNS用 APIクライアント 作った」なんですが、あまりにも使い辛いので無視します。<h3>Designateクライントを使う</h3><p>ConoHaのDNSは<a href=https://docs.openstack.org/designate/latest/ rel=\"noopener noreferrer\"target=_blank>OpenStack Designate</a>を使っているようです。多分。API体系がソレっぽいので。<p>なので、<a href=https://docs.openstack.org/python-designateclient/latest/cli/index.html rel=\"noopener noreferrer\"target=_blank>Designateのクライアント</a>が使えるかもしれない……？（未確認）<p>しかし、ConoHaではdeprecatedなv1 APIのみ提供されているので、互換性の面で死ぬかもしれません。 <a href=https://dns-service.tyo1.conoha.io/ rel=\"noopener noreferrer\"target=_blank>一応v2も動いている</a>ようですが、不完全なようですし、そもそもundocumentedです。<h3>Lexiconを使う</h3><p>様々なDNSサービスを1つのCLIから使えるようにしたソフトウェアが<a href=https://github.com/AnalogJ/lexicon rel=\"noopener noreferrer\"target=_blank>Lexicon</a>です。<p>なんと<strong>ConoHa DNSに対応</strong>しています！すごい！！ （まぁ、ボクが使うために対応させたからなんですケド……）<p>便利なので使ってください。pipさえあればGetできます。 こんな具合に使えるかと思います。<pre><code class=\"hljs language-json\">$ pip install dns-lexicon\n\n$ lexicon conoha\nusage: lexicon conoha [-h] [--name NAME] [--content CONTENT] [--ttl TTL]\n                      [--priority PRIORITY] [--identifier IDENTIFIER]\n                      [--log_level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                      [--output {TABLE,TABLE-NO-HEADER,JSON,QUIET}]\n                      [--auth-region AUTH_REGION] [--auth-token AUTH_TOKEN]\n                      [--auth-username AUTH_USERNAME]\n                      [--auth-password AUTH_PASSWORD]\n                      [--auth-tenant-id AUTH_TENANT_ID]\n                      {create,list,update,delete} domain\n                      {A,AAAA,CNAME,MX,NS,SOA,TXT,SRV,LOC}\n\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id <span class=hljs-number>0123456789</span>abcdef0123456789abcdef create narusejun.com A --name local --content <span class=hljs-number>127.0</span><span class=hljs-number>.0</span><span class=hljs-number>.1</span>\n$ lexicon conoha --auth-region tyo1 --auth-username gncu01234567 --auth-password xxxxxxxxxxx --auth-tenant-id <span class=hljs-number>0123456789</span>abcdef0123456789abcdef list narusejun.com A\nID                                   TYPE NAME                CONTENT   TTL\n------------------------------------ ---- ------------------- --------- ----\n<span class=hljs-number>42929801</span><span class=hljs-number>-5111</span><span class=hljs-number>-41</span>d5-a115<span class=hljs-number>-9</span>f67a1d07810 A    local.narusejun.com <span class=hljs-number>127.0</span><span class=hljs-number>.0</span><span class=hljs-number>.1</span> <span class=hljs-number>3600</span>\n</code></pre><p>詳しくは<a href=https://github.com/AnalogJ/lexicon rel=\"noopener noreferrer\"target=_blank>公式のドキュメント</a>を読んでください。 Let's EncryptのDNS-01を自動化するやり方も紹介されていますよ！<h2>Let's EncryptのDNS-01チャレンジを自動化する</h2><p>せっかくAPIでDNSレコードを操作できるわけですし、活用したいですね！<p>最近<a href=/posts/23/>ワイルドカード証明書が取れるようになった</a>Let's Encryptと連携してみましょう。 ちなみに、ワイルドカード証明書はDNS-01チャレンジでしか取得できません！<h3>LexiconとDehydratedを使う</h3><p>先ほど紹介したlexiconと、ACMEクライアント<a href=https://github.com/lukas2511/dehydrated rel=\"noopener noreferrer\"target=_blank>Dehydrated</a>を組み合わせるやり方がlexiconの作者さんによって紹介されています。<aside><a href=https://blog.thesparktree.com/generating-intranet-and-private-network-ssl rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://blog.thesparktree.com/assets/images/cover_letsencrypt.jpg)><div><strong>Sparktree - Generating Intranet and Private Network SSL Certificates using LetsEncrypt</strong><cite>blog.thesparktree.com</cite><q cite=https://blog.thesparktree.com/generating-intranet-and-private-network-ssl>This post is a follow up to my previous one Automating SSL Certificates using Nginx &#38amp; LetsEncrypt. This time we’ll be generating SSL certificates for intranet...</q></div></a></aside><h3>Legoを使う</h3><p>2つのソフトウェアを連携させるのは面倒ですし、できればパパッとコマンド1つで証明書取りたいですよね？ そこで、Go製のACMEクライアント<a href=https://github.com/xenolf/lego rel=\"noopener noreferrer\"target=_blank>lego</a>を使いましょう！ legoでは、いろんなDNS-Providersが提供されていて、対応しているDNSサービスならすぐに証明書を発行できます。<aside><a href=https://github.com/go-acme/lego rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://opengraph.githubassets.com/fd4c4718d342fefc15a770f6161d4fa32abe0689aa67a5d971c235b35bf5752c/go-acme/lego)><div><strong>GitHub - go-acme/lego: Let’s Encrypt client and ACME library written in Go</strong><cite>github.com</cite><q cite=https://github.com/go-acme/lego>Let’s Encrypt client and ACME library written in Go - GitHub - go-acme/lego: Let’s Encrypt client and ACME library written in Go</q></div></a></aside><p>なんと<strong>ConoHa DNSに対応</strong>しています！すごい！！ （まぁ、ボクが使うために対応させたからなんですケド……）<p><a href=https://github.com/xenolf/lego/releases rel=\"noopener noreferrer\"target=_blank>バイナリが入手可能</a>なほか、goがインストールされているなら<code>go get</code>ですぐに入手できます。 こういう感じで使います。とっても便利ですよ！<pre><code class=\"hljs language-less\">$ <span class=hljs-selector-tag>go</span> <span class=hljs-selector-tag>get</span> <span class=hljs-selector-tag>-u</span> <span class=hljs-selector-tag>github</span><span class=hljs-selector-class>.com</span>/<span class=hljs-selector-tag>xenolf</span>/<span class=hljs-selector-tag>lego</span>/<span class=hljs-selector-tag>cmd</span>/<span class=hljs-selector-tag>lego</span>\n\n$ <span class=hljs-selector-tag>lego</span> <span class=hljs-selector-tag>dnshelp</span>\n<span class=hljs-selector-tag>Credentials</span> <span class=hljs-selector-tag>for</span> <span class=hljs-selector-tag>DNS</span> <span class=hljs-selector-tag>providers</span> <span class=hljs-selector-tag>must</span> <span class=hljs-selector-tag>be</span> <span class=hljs-selector-tag>passed</span> <span class=hljs-selector-tag>through</span> <span class=hljs-selector-tag>environment</span> <span class=hljs-selector-tag>variables</span>.\n\n<span class=hljs-selector-tag>Valid</span> <span class=hljs-selector-tag>providers</span> <span class=hljs-selector-tag>and</span> <span class=hljs-selector-tag>their</span> <span class=hljs-selector-tag>associated</span> <span class=hljs-selector-tag>credential</span> <span class=hljs-selector-tag>environment</span> <span class=hljs-selector-tag>variables</span>:\n        <span class=hljs-selector-tag>conoha</span>:         <span class=hljs-selector-tag>CONOHA_REGION</span>, <span class=hljs-selector-tag>CONOHA_TENANT_ID</span>, <span class=hljs-selector-tag>CONOHA_API_USERNAME</span>, <span class=hljs-selector-tag>CONOHA_API_PASSWORD</span>\n\n<span class=hljs-selector-tag>Additional</span> <span class=hljs-selector-tag>configuration</span> <span class=hljs-selector-tag>environment</span> <span class=hljs-selector-tag>variables</span>:\n        <span class=hljs-selector-tag>conoha</span>:         <span class=hljs-selector-tag>CONOHA_POLLING_INTERVAL</span>, <span class=hljs-selector-tag>CONOHA_PROPAGATION_TIMEOUT</span>, <span class=hljs-selector-tag>CONOHA_TTL</span>, <span class=hljs-selector-tag>CONOHA_HTTP_TIMEOUT</span>\n\n$ <span class=hljs-selector-tag>export</span> <span class=hljs-selector-tag>CONOHA_REGION</span>=<span class=hljs-selector-tag>tyo1</span>\n$ <span class=hljs-selector-tag>export</span> <span class=hljs-selector-tag>CONOHA_TENANT_ID</span>=<span class=hljs-selector-tag>0123456789abcdef0123456789abcdef</span>\n$ <span class=hljs-selector-tag>export</span> <span class=hljs-selector-tag>CONOHA_API_USERNAME</span>=<span class=hljs-selector-tag>gncu01234567</span>\n$ <span class=hljs-selector-tag>export</span> <span class=hljs-selector-tag>CONOHA_API_PASSWORD</span>=<span class=hljs-selector-tag>xxxxxxxxxxx</span>\n$ <span class=hljs-selector-tag>lego</span> <span class=hljs-selector-tag>--dns</span> <span class=hljs-selector-tag>conoha</span> <span class=hljs-selector-tag>--server</span> <span class=hljs-selector-tag>https</span>:<span class=hljs-comment>//acme-staging-v02.api.letsencrypt.org/directory --email cert@narusejun.com --domains narusejun.com --domains *.narusejun.com run</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:44</span><span class=hljs-selector-pseudo>:58</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com, *.narusejun.com]</span> <span class=hljs-selector-tag>acme</span>: <span class=hljs-selector-tag>Obtaining</span> <span class=hljs-selector-tag>bundled</span> <span class=hljs-selector-tag>SAN</span> <span class=hljs-selector-tag>certificate</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:44</span><span class=hljs-selector-pseudo>:59</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[*.narusejun.com]</span> <span class=hljs-selector-tag>AuthURL</span>: <span class=hljs-selector-tag>https</span>:<span class=hljs-comment>//acme-staging-v02.api.letsencrypt.org/acme/authz/wcYZJB5aWmfi4WzGuwv2JlSaYjryGf67zqES8h8bmEg</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:44</span><span class=hljs-selector-pseudo>:59</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>AuthURL</span>: <span class=hljs-selector-tag>https</span>:<span class=hljs-comment>//acme-staging-v02.api.letsencrypt.org/acme/authz/gwXBvxvuHk7TrUYbuu3MWp7heVoLTTle7Nh2ng98b74</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:44</span><span class=hljs-selector-pseudo>:59</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>acme</span>: <span class=hljs-selector-tag>Authorization</span> <span class=hljs-selector-tag>already</span> <span class=hljs-selector-tag>valid</span>; <span class=hljs-selector-tag>skipping</span> <span class=hljs-selector-tag>challenge</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:44</span><span class=hljs-selector-pseudo>:59</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>acme</span>: <span class=hljs-selector-tag>Preparing</span> <span class=hljs-selector-tag>to</span> <span class=hljs-selector-tag>solve</span> <span class=hljs-selector-tag>DNS-01</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:00</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>acme</span>: <span class=hljs-selector-tag>Trying</span> <span class=hljs-selector-tag>to</span> <span class=hljs-selector-tag>solve</span> <span class=hljs-selector-tag>DNS-01</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:00</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>Checking</span> <span class=hljs-selector-tag>DNS</span> <span class=hljs-selector-tag>record</span> <span class=hljs-selector-tag>propagation</span> <span class=hljs-selector-tag>using</span> <span class=hljs-selector-attr>[1.0.0.1:53]</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:00</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-tag>Wait</span> <span class=hljs-selector-attr>[timeout: 1m0s, interval: 2s]</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:37</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>The</span> <span class=hljs-selector-tag>server</span> <span class=hljs-selector-tag>validated</span> <span class=hljs-selector-tag>our</span> <span class=hljs-selector-tag>request</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:38</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com, *.narusejun.com]</span> <span class=hljs-selector-tag>acme</span>: <span class=hljs-selector-tag>Validations</span> <span class=hljs-selector-tag>succeeded</span>; <span class=hljs-selector-tag>requesting</span> <span class=hljs-selector-tag>certificates</span>\n<span class=hljs-selector-tag>2018</span>/<span class=hljs-selector-tag>12</span>/<span class=hljs-selector-tag>21</span> <span class=hljs-selector-tag>02</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:39</span> <span class=hljs-selector-attr>[INFO]</span> <span class=hljs-selector-attr>[narusejun.com]</span> <span class=hljs-selector-tag>Server</span> <span class=hljs-selector-tag>responded</span> <span class=hljs-selector-tag>with</span> <span class=hljs-selector-tag>a</span> <span class=hljs-selector-tag>certificate</span>.\n\n$ <span class=hljs-selector-tag>openssl</span> <span class=hljs-selector-tag>x509</span> <span class=hljs-selector-tag>-in</span> ~/<span class=hljs-selector-class>.lego</span>/<span class=hljs-selector-tag>certificates</span>/<span class=hljs-selector-tag>narusejun</span><span class=hljs-selector-class>.com</span><span class=hljs-selector-class>.crt</span> <span class=hljs-selector-tag>-text</span>\n<span class=hljs-selector-tag>Certificate</span>:\n    <span class=hljs-selector-tag>Data</span>:\n        <span class=hljs-selector-tag>Version</span>: <span class=hljs-selector-tag>3</span> (<span class=hljs-number>0</span>x2)\n        <span class=hljs-selector-tag>Serial</span> <span class=hljs-selector-tag>Number</span>:\n            <span class=hljs-selector-tag>fa</span><span class=hljs-selector-pseudo>:78</span><span class=hljs-selector-pseudo>:5b</span><span class=hljs-selector-pseudo>:6e</span><span class=hljs-selector-pseudo>:73</span><span class=hljs-selector-pseudo>:74</span><span class=hljs-selector-pseudo>:37</span><span class=hljs-selector-pseudo>:e6</span><span class=hljs-selector-pseudo>:c4</span><span class=hljs-selector-pseudo>:36</span><span class=hljs-selector-pseudo>:54</span><span class=hljs-selector-pseudo>:82</span><span class=hljs-selector-pseudo>:02</span><span class=hljs-selector-pseudo>:04</span><span class=hljs-selector-pseudo>:d2</span><span class=hljs-selector-pseudo>:7e</span><span class=hljs-selector-pseudo>:bd</span><span class=hljs-selector-pseudo>:0b</span>\n        <span class=hljs-selector-tag>Signature</span> <span class=hljs-selector-tag>Algorithm</span>: <span class=hljs-selector-tag>sha256WithRSAEncryption</span>\n        <span class=hljs-selector-tag>Issuer</span>: <span class=hljs-selector-tag>CN</span> = <span class=hljs-selector-tag>Fake</span> <span class=hljs-selector-tag>LE</span> <span class=hljs-selector-tag>Intermediate</span> <span class=hljs-selector-tag>X1</span>\n        <span class=hljs-selector-tag>Validity</span>\n            <span class=hljs-selector-tag>Not</span> <span class=hljs-selector-tag>Before</span>: <span class=hljs-selector-tag>Dec</span> <span class=hljs-selector-tag>20</span> <span class=hljs-selector-tag>16</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:40</span> <span class=hljs-selector-tag>2018</span> <span class=hljs-selector-tag>GMT</span>\n            <span class=hljs-selector-tag>Not</span> <span class=hljs-selector-tag>After</span> : <span class=hljs-selector-tag>Mar</span> <span class=hljs-selector-tag>20</span> <span class=hljs-selector-tag>16</span><span class=hljs-selector-pseudo>:45</span><span class=hljs-selector-pseudo>:40</span> <span class=hljs-selector-tag>2019</span> <span class=hljs-selector-tag>GMT</span>\n        <span class=hljs-selector-tag>Subject</span>: <span class=hljs-selector-tag>CN</span> = <span class=hljs-selector-tag>narusejun</span><span class=hljs-selector-class>.com</span>\n        <span class=hljs-selector-tag>X509v3</span> <span class=hljs-selector-tag>extensions</span>:\n            <span class=hljs-selector-tag>X509v3</span> <span class=hljs-selector-tag>Subject</span> <span class=hljs-selector-tag>Alternative</span> <span class=hljs-selector-tag>Name</span>:\n                <span class=hljs-selector-tag>DNS</span>:*<span class=hljs-selector-class>.narusejun</span><span class=hljs-selector-class>.com</span>, <span class=hljs-selector-tag>DNS</span><span class=hljs-selector-pseudo>:narusejun.com</span>\n</code></pre><p>……と、サクッとワイルドカード証明書が取れてしまいました。すごい！便利！<p>上の例はstaging環境から証明書を取得しているので、マネする際はご注意ください！ 詳しくは、例によって<a href=https://github.com/xenolf/lego rel=\"noopener noreferrer\"target=_blank>公式ドキュメント</a>をごらんください。<h3>traefikを使う</h3><p><a href=https://docs.traefik.io/ rel=\"noopener noreferrer\"target=_blank>traefik</a>は強いL7ロードバランサみたいなものです（ざっくりとした説明）。 Let's Encryptから自動で証明書を取る機能がついてるんですが、この機能は内部で先述したlegoを利用しています。<aside><a href=https://docs.traefik.io/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://docs.traefik.io/assets/img/traefik-architecture.png)><div><strong>Traefik</strong><cite>docs.traefik.io</cite><q cite=https://docs.traefik.io/>Traefik Documentation</q></div></a></aside><p>……ということは、<strong>ConoHa DNSに対応</strong>しています！ 詳しい説明は省きますが、<a href=https://docs.traefik.io/configuration/acme/ rel=\"noopener noreferrer\"target=_blank>公式ドキュメント</a>を参考に設定してみてください。 ちゃんとConoHa DNSと連携して動作することを確認済みです。<h2>おわりに</h2><p>紹介したソフトウェア以外にも、LexiconやLegoを内部で使ってる系ソフトが実はConoHaに対応してるパターンがいっぱいあるかもしれません。このソフトでもConoHa DNS使えたよ！とかあったら教えてください。 ちなみに、<a href=https://caddyserver.com/ rel=\"noopener noreferrer\"target=_blank>Caddy</a>というHTTPサーバが<a href=https://caddy.community/t/poll-we-can-end-dns-provider-plugins-should-we/4887 rel=\"noopener noreferrer\"target=_blank>Legoの全DNSプロバイダに対応しそう</a>だったりするので、そしたらConoHaも使えるようになりますね！<hr><p>ConoHaのDNS、めっちゃ便利なので使いましょう。 APIでレコードいじれるし、ゾーン数がいくつあっても無料ってマジ！？神じゃん。<p>あっ、ボクのパソコン見てください。<blockquote class=twitter-tweet><p dir=ltr lang=ja>このはちゃんガチ勢なのでな✋<a href=\"https://twitter.com/hashtag/isucon?src=hash&#38ref_src=twsrc%5Etfw\">#isucon</a> <a href=https://t.co/mgIRDxO6B4>pic.twitter.com/mgIRDxO6B4</a></p>— sekai (@sekai67) <a href=\"https://twitter.com/sekai67/status/1053444090757435392?ref_src=twsrc%5Etfw\">October 20, 2018</a></blockquote><script async charset=utf8 src=https://platform.twitter.com/widgets.js></script><blockquote class=twitter-tweet><p dir=ltr lang=ja>さっきからずっとこのはちゃんとベタベタしてる <a href=https://t.co/FyyDBpZtxe>pic.twitter.com/FyyDBpZtxe</a></p>— sekai (@sekai67) <a href=\"https://twitter.com/sekai67/status/1053598421414596608?ref_src=twsrc%5Etfw\">October 20, 2018</a></blockquote><script async charset=utf8 src=https://platform.twitter.com/widgets.js></script><blockquote class=twitter-tweet><p dir=ltr lang=ja>このはちゃんとツーショット撮れた！！！！嬉しい！！！！<a href=\"https://twitter.com/hashtag/isucon?src=hash&#38ref_src=twsrc%5Etfw\">#isucon</a> <a href=https://t.co/Tb25Fr39lD>pic.twitter.com/Tb25Fr39lD</a></p>— sekai (@sekai67) <a href=\"https://twitter.com/sekai67/status/1053441437126127616?ref_src=twsrc%5Etfw\">October 20, 2018</a></blockquote><script async charset=utf8 src=https://platform.twitter.com/widgets.js></script>"},"__N_SSG":true}