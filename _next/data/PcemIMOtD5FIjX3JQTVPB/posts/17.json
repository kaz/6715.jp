{"pageProps":{"article":{"type":"article","slug":"17","body":"重い\n\n\n# CPCTF\n\nhttps://ctf-no.pro/\n\nこういうのをやりました。\n\n出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです）\n\nhttp://yuinore.net/2017/04/cpctf-writeup-1/\n\nhttp://yuinore.net/2017/04/cpctf-writeup-2/\n\nサーバ周りは全てボクが担当したんですが、ゴミクソ重くて申し訳なさがXDです。\n\n## 構成\n\n問題が60個とかそれくらいありました。多すぎる。\nで、この問題たちとスコアサーバを全て1台のサーバ(cpu:8Core mem:16GB)で動かしました。\n\n全てのアプリはDockerで環境が分離されています。\n自作のソフトウェア（Dockerのラッパみたいな何か）によって、PaaSみたいな使い心地で問題を更新できる仕組みにしてました。\n\n👆のお陰で、出題ミスが見つかっても更新が非常にスムーズでした。\n最終的に100アカウントくらいが登録されてましたが、サーバも落ちたりせずに概ね順調でした。\n\nが、HTTPでのアクセスがクッッッッッソ遅い問題にぶち当たって険しい感じでした。\nなんか変な感じの挙動で、一度繋がるとそれ以後数10分は快適に繋がるが、\n繋がらない人は永遠につながらない（HTTPレスポンスが帰ってこない）感じ。\n\nで、サーバ全体の負荷も大したことなかったし、ネットワーク帯域も余裕っぽかったので、謎かった。\n\n## 重い理由\n\nサーバが1台で、アプリが沢山乗ってる構成なので、HTTPリクエストを捌いてくれるリバースプロキシとして**OpenResty**さんを使っていて、\nHTTPS化を手っ取り早くやるために[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)を採用していました。\n\nhttps://github.com/GUI/lua-resty-auto-ssl\n\n[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)は非常に優秀で、\n**正しく設定すれば**勝手にすべてのページをHTTPS化してくれて便利便利floatです。\n\nでまぁ、結論を言うと重いのはこの人が原因でした。\n\nこの人はOCSP Staplingもやってくれるんですが、コレを正しく動作させるためにはOpenRestyの`resolver`設定をしてあげないとダメです。\nどうダメかというと、遅くなります。おそらくDNSの問い合わせができずにそこでワーカーが止まってしまい永遠にレスポンスが帰ってこないのかな？\n\nエラーログにはOCSPが失敗したよ！っていうログがいっぱい出ていなので、コレが問題なのは間違いないんですが詳しい原因はコレ以上分からずです。\n一旦繋がると以後は素早く繋がるのは多分、一度OCSPで証明書の正当性が確認されるとしばらくは確認しないから……？\nでもOCSP Staplingってサーバ側が能動的に送ってるものな気がするし違うのでしょうか……\n\nそれと、[lua-resty-auto-ssl](https://github.com/GUI/lua-resty-auto-ssl)が内部で使ってるLetsencryptクライアントの\n[dehydrated](https://github.com/lukas2511/dehydrated)は、デフォルトだとRSA **4096bit**の証明書を作成します。\n4096bitは結構遅いです。適当に`ab`で計測したら4096bitは2048bitを比較してリクエスト完了まで10倍くらいの時間がかかってました。\n\n## Dockerの内部DNS\n\nさっきのOpenRestyはDockerコンテナ内で動かしてたんですが、\nDocker内部だとデフォルトゲートウェイがDockerネットワーク内でのホストのアドレスなので、\nDNSのについてもこの人がやってくれてるんだろうな〜〜って勝手に思って勝手にそう指定してたんですが、これが間違いでした。\n\nDockerネットワーク内でのDNSサーバは、`127.0.0.11`が正しいそうです。\nというか、resolve.confを見たらちゃんと書いてあったわ……\n\n## おわり\n\nわからないことが多いです。\n誰か鉞投げて欲しい。\n","title":"新入生向けCTF体験会のスコアサーバが重かった","image":null,"tags":["CTF","DNS","Docker","インフラ","ネットワーク","日記"],"date":"2017-05-17T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"重い CPCTF https://ctf-no.pro/ こういうのをやりました。 出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです） http://yuinore.…","content":"<p>重い<h1>CPCTF</h1><p><a href=https://ctf-no.pro/ rel=\"noopener noreferrer\"target=_blank>https://ctf-no.pro/</a><p>こういうのをやりました。<p>出題された問題の雰囲気はこういうかんじ（参加してくださった方のwriteupです）<aside><a href=http://yuinore.net/2017/04/cpctf-writeup-1/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(http://yuinore.net/wp-content/uploads/2017/04/screenshot_1-1024x703.png)><div><strong>競プロとCTFの体験会 #CPCTF write up その1 | yuinore.net</strong><cite>yuinore.net</cite><q cite=http://yuinore.net/2017/04/cpctf-writeup-1/>はじめに 先日2017年4月19日に開催された、traP主催の競プロとCTFの体験会(#CPCTF)にオンライン参加しました。4人のチームで32個のフラグを取り、無事5位を取ることができました。 他のCTFと比べて初心者向けの問題が多く、また、競プロの問題もあったため、CTF初心者やCTF未経験者でも楽しく参加することができたように思います。また、問題数が多く(59問)、難しい問題もあったため、CTF上級者でも楽しめたのではないでしょうか。 本日の競プロ/CTF体験会は78人もの方々に参加していただきました！Write Upも含めてただいまを以て終了となります！お疲れさまでした！！問題に関し…</q></div></a></aside><aside><a href=http://yuinore.net/2017/04/cpctf-writeup-2/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(http://yuinore.net/wp-content/uploads/2017/04/da881dbd24020b1499ae44487e69f3d5.png)><div><strong>競プロとCTFの体験会 #CPCTF write up その2 | yuinore.net</strong><cite>yuinore.net</cite><q cite=http://yuinore.net/2017/04/cpctf-writeup-2/>前回の記事で、本番での楽しさや部室の盛り上がりが伝わっていれば良いなと思いつつ、残りの問題も勉強のために解いてみたいと思います。解けなかった問題に対する解説をwrite upと言っていいのかどうか、よく知らないのですが、ctf-no.pro が公開終了するまでに書けるだけwrite upしたいと思います。この調子だと残りを全部解くのは無理そうですが、この記事では13問解いています。 Flag Post Service ヒント1を見ると「URLを入力したらPOSTしてくれるサービスのようですね」と書いてありますが、いい方法がわからないので、ヒント3まで見ると、「「request bin」というサ…</q></div></a></aside><p>サーバ周りは全てボクが担当したんですが、ゴミクソ重くて申し訳なさがXDです。<h2>構成</h2><p>問題が60個とかそれくらいありました。多すぎる。 で、この問題たちとスコアサーバを全て1台のサーバ(cpu:8Core mem:16GB)で動かしました。<p>全てのアプリはDockerで環境が分離されています。 自作のソフトウェア（Dockerのラッパみたいな何か）によって、PaaSみたいな使い心地で問題を更新できる仕組みにしてました。<p>👆のお陰で、出題ミスが見つかっても更新が非常にスムーズでした。 最終的に100アカウントくらいが登録されてましたが、サーバも落ちたりせずに概ね順調でした。<p>が、HTTPでのアクセスがクッッッッッソ遅い問題にぶち当たって険しい感じでした。 なんか変な感じの挙動で、一度繋がるとそれ以後数10分は快適に繋がるが、 繋がらない人は永遠につながらない（HTTPレスポンスが帰ってこない）感じ。<p>で、サーバ全体の負荷も大したことなかったし、ネットワーク帯域も余裕っぽかったので、謎かった。<h2>重い理由</h2><p>サーバが1台で、アプリが沢山乗ってる構成なので、HTTPリクエストを捌いてくれるリバースプロキシとして<strong>OpenResty</strong>さんを使っていて、 HTTPS化を手っ取り早くやるために<a href=https://github.com/GUI/lua-resty-auto-ssl rel=\"noopener noreferrer\"target=_blank>lua-resty-auto-ssl</a>を採用していました。<aside><a href=https://github.com/auto-ssl/lua-resty-auto-ssl rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://opengraph.githubassets.com/aaa36e5f2dfcec349374615999f75fbdb3a9075a860b4adf1c00708102bd24c1/auto-ssl/lua-resty-auto-ssl)><div><strong>GitHub - auto-ssl/lua-resty-auto-ssl: On the fly (and free) SSL registration and renewal inside OpenResty/nginx with Let’s Encrypt.</strong><cite>github.com</cite><q cite=https://github.com/auto-ssl/lua-resty-auto-ssl>On the fly (and free) SSL registration and renewal inside OpenResty/nginx with Let&#38#39;s Encrypt. - GitHub - auto-ssl/lua-resty-auto-ssl: On the fly (and free) SSL registration and renewal inside O...</q></div></a></aside><p><a href=https://github.com/GUI/lua-resty-auto-ssl rel=\"noopener noreferrer\"target=_blank>lua-resty-auto-ssl</a>は非常に優秀で、 <strong>正しく設定すれば</strong>勝手にすべてのページをHTTPS化してくれて便利便利floatです。<p>でまぁ、結論を言うと重いのはこの人が原因でした。<p>この人はOCSP Staplingもやってくれるんですが、コレを正しく動作させるためにはOpenRestyの<code>resolver</code>設定をしてあげないとダメです。 どうダメかというと、遅くなります。おそらくDNSの問い合わせができずにそこでワーカーが止まってしまい永遠にレスポンスが帰ってこないのかな？<p>エラーログにはOCSPが失敗したよ！っていうログがいっぱい出ていなので、コレが問題なのは間違いないんですが詳しい原因はコレ以上分からずです。 一旦繋がると以後は素早く繋がるのは多分、一度OCSPで証明書の正当性が確認されるとしばらくは確認しないから……？ でもOCSP Staplingってサーバ側が能動的に送ってるものな気がするし違うのでしょうか……<p>それと、<a href=https://github.com/GUI/lua-resty-auto-ssl rel=\"noopener noreferrer\"target=_blank>lua-resty-auto-ssl</a>が内部で使ってるLetsencryptクライアントの <a href=https://github.com/lukas2511/dehydrated rel=\"noopener noreferrer\"target=_blank>dehydrated</a>は、デフォルトだとRSA <strong>4096bit</strong>の証明書を作成します。 4096bitは結構遅いです。適当に<code>ab</code>で計測したら4096bitは2048bitを比較してリクエスト完了まで10倍くらいの時間がかかってました。<h2>Dockerの内部DNS</h2><p>さっきのOpenRestyはDockerコンテナ内で動かしてたんですが、 Docker内部だとデフォルトゲートウェイがDockerネットワーク内でのホストのアドレスなので、 DNSのについてもこの人がやってくれてるんだろうな〜〜って勝手に思って勝手にそう指定してたんですが、これが間違いでした。<p>Dockerネットワーク内でのDNSサーバは、<code>127.0.0.11</code>が正しいそうです。 というか、resolve.confを見たらちゃんと書いてあったわ……<h2>おわり</h2><p>わからないことが多いです。 誰か鉞投げて欲しい。"},"__N_SSG":true}