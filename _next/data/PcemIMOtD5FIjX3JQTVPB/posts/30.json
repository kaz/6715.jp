{"pageProps":{"article":{"type":"article","slug":"30","body":"NaruseJunチームでISUCON11予選に出ました。\n\n- チームメンバー[^team]\n\t- [@to_hutohu](https://twitter.com/to_hutohu)\n\t- [@takashi_trap](https://twitter.com/takashi_trap)\n\t- [@sekai67](https://twitter.com/sekai67)\n- 結果\n\t- スコア: [919720](https://isucon.net/archives/56021246.html)\n\t- 本戦に行ける！🎉🎉\n\t\t- ココ最近のNaruseJunチームは追試失敗率が高く[^fail]て、2年間本戦に行けていませんでした。悲願達成感があります。\n\n[^team]: 全員が今年出題の[東京工業大学デジタル創作同好会traP](https://trap.jp/)のOBです。\n[^fail]: 運営サイドにも[定評のある](https://twitter.com/sora_h/status/1429334456616189957)失敗率。\n\n## やったこと\n\n- NaruseJunチームは基本的に個々人が勝手に改善を突っ込んていくスタイル\n\t- 担当範囲などはあえて決めておらず、全員アプリを触るしインフラもいじる\n\t- ミドルウェアの設定、アプリコード、デプロイスクリプトが全部入った[リポジトリ](https://github.com/narusejun/isucon11-qualify)を使った\n\t\t- それぞれローカルで作業、ブランチを切ってリモートにプッシュ、サーバ上でプルしてデプロイ、といった動き\n\t\t\t- ローカルではテストしない（環境まわりでハマるのは時間の無駄なので）\n\t\t\t- 3人で別々に動いているので、声掛けでサーバの占有権を取ってベンチを投げ、それで動作確認する感じ\n- 初動だけは担当作業を決めていた\n\t- to_hutohu: マニュアル読み込み\n\t- takashi_trap: リポジトリ、デプロイスクリプト周りの準備\n\t- sekai67: 環境立ち上げ、計測ツール類準備\n\t\t- 細かいツールの導入などはすべてansibleで行う\n\t\t\t- [最初の変更](https://github.com/narusejun/isucon11-qualify/commit/6b74fb20740ca5fa31070d7763437d3867e6f063)をリポジトリに入れてデプロイするまで **17分**\n\t\t\t\t- 最初の動きをよく詰めておいたので、スムーズに改善へ移れた\n- 計測結果を元に改善ポイントを見つけた\n\t- **「推測するな、計測せよ」**\n\t- pprof, [fgprof](https://github.com/felixge/fgprof), [alp](https://github.com/tkuchiki/alp), [pt-query-digest](https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html), [netdata](https://github.com/netdata/netdata) を見ていた\n\t\t- pprofは基本的にFlame Graphだけ見れば大体わかる\n\t- [pprotein](https://github.com/kaz/pprotein)というツールを作って、使った\n\t\t- pprof, alp, pt-query-digestのデータをサーバから収集し、Webブラウザ上で表示できるようにしたもの\n\t\t\t- 過去の計測結果を見れたり、チーム内で計測結果を見ながら相談できたりするので便利\n\t\t- こういうツールを作るのが最近流行ってそう\n\t\t\t- https://twitter.com/_tsuzu_/status/1429064558203731973\n\t\t\t- https://diary.hatenablog.jp/entry/2021/08/22/175403\n\t\t- pproteinはいまのところオープンソースなので、ご活用ください\n\t\t\t- ただしREADMEは書いてない\n- 以下2点の理由から、15時過ぎから新たな改善を入れるのをほぼストップし、追試対策など安全に通過するための戦略に切り替えた（前年の反省）\n\t- 80万点に到達した15時時点で、次点は10万点代、大多数が10万点未達という状況であったこと\n\t- 特定の状況下（http2のGOAWAYハンドリングミス[^goaway]）でベンチマーカーがエラーになり、場合によってはスコアなしになる可能性が残っていたこと\n\t\t- 競技中、これがこちら側のミスであるか、運営側のミスであるかを判断できなかった[^clar]ため、念の為修正を行う判断に至ったが、結果としては不要だった\n\n[^goaway]: 詳細については[予選結果](https://isucon.net/archives/56021237.html)の「不具合について」を参照。\n[^clar]: 競技中に質問を行い「ベンチマーカーのバグである」との回答を頂いてはいましたが、チーム内での議論の結果、必ずしもそうとは言えないのではないかという結論になりました。\n\n### こぼれ話\n\n- 14:30〜15:10まで、コミットするたびに点数が指数関数的に増加した\n\t- あまりにも上がるし、自分たちの想像以上に上がるので、けっこう驚いていた\n\t\t- 運営さんもかなり驚いたたようで、「ベンチマーカーの実装がバグっている可能性がある」として個別で改善方法を確認されました\n\t\t\t- 結果としてバグではなかったのでハッピーエンド\n\t\t- 点数が上がるたびにバグの疑念が強まり、[ベンチマーカー実装担当](https://twitter.com/ryoha000/status/1429097219391574024)の顔がどんどん曇っていったらしい\n\n![](score.png)\n\n### 具体的な改善内容\n\n- だいたい時系列順\n- 初期スコア: 2000くらい\n\t- 改善後スコアは必ずしも当該の改善のみが寄与しているわけではないので注意\n\n#### `isu_condition` テーブルにインデックスを貼る\n\n- 時間: 10:40\n- スコア: 19000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895\n- 根拠\n\t- pt-query-digest結果から。この時点での合計クエリ時間上位2つがこれだった\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp` desc limit ?\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by timestamp desc\n\t```\n\n#### `/api/trend` で返すデータを 0.5 秒ごとに作るようにする\n\n- 時間: 11:10\n- スコア: 26000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0\n- 根拠:\n\t- pprofのFlame Graphから。getTrendで発行してるSELECTに時間がかかっている[^pprof]。\n\n[![](fg1.png)](fg1.png)\n\n[^pprof]: 次項のFlame Graphと見比べるとgetTrendがすっかり見えなくなっていることがわかります。\n\n#### `isu_condition` テーブルを水平分割 + ログを出さない\n\n- 時間: 12:20\n- スコア: 42000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765\n\t\t- UUIDを使って振り分け先のサーバを決定して、そのサーバから読み書きする。\n\t\t- トランザクションが邪魔なので、消す。よく読むと、トランザクションなしでも正常に処理できることが分かる。\n- 根拠\n\t- alpから。POST `^/api/condition/.+$`の合計時間が大きい。GETもそこそこ大きい。\n\t- pprofのFlame Graphから。getIsuConditions/postIsuConditionsが重い。\n\n[![](fg1.png)](fg1.png)\n\n#### iconをDBにつっこむのをやめてファイルに書き出す\n\n- 時間: 12:50\n- スコア: 52000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4\n\n#### 微調整\n\n- 時間: 13:30\n- スコア: 64000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca\n\t\t- あえてtrendを返すのを遅くして、ユーザー数の増加を抑える。\n\t- https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30\n\t\t- DBを3台から2台に減らして、appへよりCPU時間を配分する。\n- 根拠\n\t- netdata等から。appとDBが同居しているサーバでCPU使用率がほぼ100%なのに対して、DBのみが動くサーバではまだ余裕があったため。\n\n#### backendを複数台に\n\n- 時間: 14:00\n- スコア: 72000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7\n\t\t- appを3台にして、postIsuConditionのみを複数台で処理させる。\n- 根拠\n\t- netdata等から。appサーバからDBを剥がしてもまだCPU使用率が100%だったため。\n\n#### getIsuConditionsFromDBの高速化\n\n- 時間: 14:30\n- スコア: 107000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564\n\t\t- Generated Column追加、SQLでLIMITする。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t  ```\n\t  select * from `isu_condition` where `jia_isu_uuid` = ? and `timestamp` < ? order by `timestamp` desc\n\t  ```\n\t- pprofのFlame Graphから。getIsuConditionsFromDBの圧倒的存在感。。。\n\n[![](fg3.png)](fg3.png)\n\n#### `postIsuCondition` バルクインサート + postIsuCondition全受理\n\n- 時間: 14:40\n- スコア: 158000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680\n\t- https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3\n\n#### nginx調整\n\n- 時間: 14:50\n- スコア: 295000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a\n\t\t- getIsuGraphを3台処理に変更、nginx-backend間通信のkeepalive化。\n- 根拠\n\t- netdata等から。1台目のappサーバがキツそうだったのと、その割にほか2つがヒマそうだったので。\n\n#### getTrend調整\n\n- 時間: 15:00\n- スコア: 346000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52\n\t\t- 意図的にtrendを返すのを遅くしていたところを少しだけ早くしてユーザー数を増やす。\n\n#### グラフ作成時の取得データ量を減らす\n\n- 時間: 15:00\n- スコア: 631000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686\n\t\t- WHERE句にtimestampの範囲で絞る条件を追加。\n- 根拠\n\t- pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。\n\t```\n\tselect * from `isu_condition` where `jia_isu_uuid` = ? order by `timestamp`\n\t```\n\n#### nginx調整\n\n- 時間: 15:10\n- スコア: 836000〜932000くらい\n- コミット\n\t- https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a\n\t\t- nginxとappが同居してる場合はnginx-app間通信をunix domain socket経由に\n\t- https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41\n\t\t- nginx-app間のkeepaliveコネクション数調整\n\n#### 微調整\n\n- 時間: 16:00〜17:00\n- スコア: 1010000〜1173984(ベストスコア)\n- パラメータをいろいろ調整してた\n\t- MySQL設定\n\t- nginx設定\n\t- getTrend待ち時間\n\n#### 最終\n\n- 時間: 17:00〜\n- スコア: 988417(最終スコア)\n- http2のGOAWAY問題[^goaway]でベンチマークがまれに失敗する問題の対応\n\t- 安全に追試をパスできるように少し性能を落とした\n\n## おわり\n\n運営の皆さんありがとうございました。\n","title":"ISUCON11予選に参加した","image":null,"tags":["ISUCON","インフラ","参加記"],"date":"2021-08-23T00:00:00.000Z","updated":"2021-08-22T19:00:52.000Z"},"description":"NaruseJunチームでISUCON11予選に出ました。 チームメンバー1 @to_hutohu @takashi_trap @sekai67 結果 スコア: 919720 本戦に行ける！🎉🎉…","content":"<p>NaruseJunチームでISUCON11予選に出ました。<ul><li>チームメンバー<sup id=fnref-team><a href=#fn-team class=footnote-ref>1</a></sup><ul><li><a href=https://twitter.com/to_hutohu rel=\"noopener noreferrer\"target=_blank>@to_hutohu</a><li><a href=https://twitter.com/takashi_trap rel=\"noopener noreferrer\"target=_blank>@takashi_trap</a><li><a href=https://twitter.com/sekai67 rel=\"noopener noreferrer\"target=_blank>@sekai67</a></ul><li>結果<ul><li>スコア: <a href=https://isucon.net/archives/56021246.html rel=\"noopener noreferrer\"target=_blank>919720</a><li>本戦に行ける！🎉🎉<ul><li>ココ最近のNaruseJunチームは追試失敗率が高く<sup id=fnref-fail><a href=#fn-fail class=footnote-ref>2</a></sup>て、2年間本戦に行けていませんでした。悲願達成感があります。</ul></ul></ul><h2>やったこと</h2><ul><li>NaruseJunチームは基本的に個々人が勝手に改善を突っ込んていくスタイル<ul><li>担当範囲などはあえて決めておらず、全員アプリを触るしインフラもいじる<li>ミドルウェアの設定、アプリコード、デプロイスクリプトが全部入った<a href=https://github.com/narusejun/isucon11-qualify rel=\"noopener noreferrer\"target=_blank>リポジトリ</a>を使った<ul><li>それぞれローカルで作業、ブランチを切ってリモートにプッシュ、サーバ上でプルしてデプロイ、といった動き<ul><li>ローカルではテストしない（環境まわりでハマるのは時間の無駄なので）<li>3人で別々に動いているので、声掛けでサーバの占有権を取ってベンチを投げ、それで動作確認する感じ</ul></ul></ul><li>初動だけは担当作業を決めていた<ul><li>to_hutohu: マニュアル読み込み<li>takashi_trap: リポジトリ、デプロイスクリプト周りの準備<li>sekai67: 環境立ち上げ、計測ツール類準備<ul><li>細かいツールの導入などはすべてansibleで行う<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/6b74fb20740ca5fa31070d7763437d3867e6f063 rel=\"noopener noreferrer\"target=_blank>最初の変更</a>をリポジトリに入れてデプロイするまで <strong>17分</strong><ul><li>最初の動きをよく詰めておいたので、スムーズに改善へ移れた</ul></ul></ul></ul><li>計測結果を元に改善ポイントを見つけた<ul><li><strong>「推測するな、計測せよ」</strong><li>pprof, <a href=https://github.com/felixge/fgprof rel=\"noopener noreferrer\"target=_blank>fgprof</a>, <a href=https://github.com/tkuchiki/alp rel=\"noopener noreferrer\"target=_blank>alp</a>, <a href=https://www.percona.com/doc/percona-toolkit/LATEST/pt-query-digest.html rel=\"noopener noreferrer\"target=_blank>pt-query-digest</a>, <a href=https://github.com/netdata/netdata rel=\"noopener noreferrer\"target=_blank>netdata</a> を見ていた<ul><li>pprofは基本的にFlame Graphだけ見れば大体わかる</ul><li><a href=https://github.com/kaz/pprotein rel=\"noopener noreferrer\"target=_blank>pprotein</a>というツールを作って、使った<ul><li>pprof, alp, pt-query-digestのデータをサーバから収集し、Webブラウザ上で表示できるようにしたもの<ul><li>過去の計測結果を見れたり、チーム内で計測結果を見ながら相談できたりするので便利</ul><li>こういうツールを作るのが最近流行ってそう<ul><li><a href=https://twitter.com/_tsuzu_/status/1429064558203731973 rel=\"noopener noreferrer\"target=_blank>https://twitter.com/_tsuzu_/status/1429064558203731973</a><li><a href=https://diary.hatenablog.jp/entry/2021/08/22/175403 rel=\"noopener noreferrer\"target=_blank>https://diary.hatenablog.jp/entry/2021/08/22/175403</a></ul><li>pproteinはいまのところオープンソースなので、ご活用ください<ul><li>ただしREADMEは書いてない</ul></ul></ul><li>以下2点の理由から、15時過ぎから新たな改善を入れるのをほぼストップし、追試対策など安全に通過するための戦略に切り替えた（前年の反省）<ul><li>80万点に到達した15時時点で、次点は10万点代、大多数が10万点未達という状況であったこと<li>特定の状況下（http2のGOAWAYハンドリングミス<sup id=fnref-goaway><a href=#fn-goaway class=footnote-ref>3</a></sup>）でベンチマーカーがエラーになり、場合によってはスコアなしになる可能性が残っていたこと<ul><li>競技中、これがこちら側のミスであるか、運営側のミスであるかを判断できなかった<sup id=fnref-clar><a href=#fn-clar class=footnote-ref>4</a></sup>ため、念の為修正を行う判断に至ったが、結果としては不要だった</ul></ul></ul><h3>こぼれ話</h3><ul><li>14:30〜15:10まで、コミットするたびに点数が指数関数的に増加した<ul><li>あまりにも上がるし、自分たちの想像以上に上がるので、けっこう驚いていた<ul><li>運営さんもかなり驚いたたようで、「ベンチマーカーの実装がバグっている可能性がある」として個別で改善方法を確認されました<ul><li>結果としてバグではなかったのでハッピーエンド</ul><li>点数が上がるたびにバグの疑念が強まり、<a href=https://twitter.com/ryoha000/status/1429097219391574024 rel=\"noopener noreferrer\"target=_blank>ベンチマーカー実装担当</a>の顔がどんどん曇っていったらしい</ul></ul></ul><p><img alt src=score.png><h3>具体的な改善内容</h3><ul><li>だいたい時系列順<li>初期スコア: 2000くらい<ul><li>改善後スコアは必ずしも当該の改善のみが寄与しているわけではないので注意</ul></ul><h4><code>isu_condition</code> テーブルにインデックスを貼る</h4><ul><li>時間: 10:40<li>スコア: 19000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/4132537145c01a54b86207c9e130d3d94b8dc895</a></ul><li>根拠<ul><li>pt-query-digest結果から。この時点での合計クエリ時間上位2つがこれだった</ul><pre><code class=\"hljs language-n1ql\"><span class=hljs-keyword>select</span> * <span class=hljs-keyword>from</span> <span class=hljs-symbol>`isu_condition`</span> <span class=hljs-keyword>where</span> <span class=hljs-symbol>`jia_isu_uuid`</span> = ? <span class=hljs-keyword>order</span> <span class=hljs-keyword>by</span> <span class=hljs-symbol>`timestamp`</span> <span class=hljs-keyword>desc</span> <span class=hljs-keyword>limit</span> ?\n<span class=hljs-keyword>select</span> * <span class=hljs-keyword>from</span> <span class=hljs-symbol>`isu_condition`</span> <span class=hljs-keyword>where</span> <span class=hljs-symbol>`jia_isu_uuid`</span> = ? <span class=hljs-keyword>order</span> <span class=hljs-keyword>by</span> timestamp <span class=hljs-keyword>desc</span>\n</code></pre></ul><h4><code>/api/trend</code> で返すデータを 0.5 秒ごとに作るようにする</h4><ul><li>時間: 11:10<li>スコア: 26000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/1e24895db95c0ce776b8751bcf90a49e37ea17b0</a></ul><li>根拠:<ul><li>pprofのFlame Graphから。getTrendで発行してるSELECTに時間がかかっている<sup id=fnref-pprof><a href=#fn-pprof class=footnote-ref>5</a></sup>。</ul></ul><p><a href=fg1.png><img alt src=fg1.png></a><h4><code>isu_condition</code> テーブルを水平分割 + ログを出さない</h4><ul><li>時間: 12:20<li>スコア: 42000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/fda74ca7e56b70a58a7a49c773cb892d3dae6765</a><ul><li>UUIDを使って振り分け先のサーバを決定して、そのサーバから読み書きする。<li>トランザクションが邪魔なので、消す。よく読むと、トランザクションなしでも正常に処理できることが分かる。</ul></ul><li>根拠<ul><li>alpから。POST <code>^/api/condition/.+$</code>の合計時間が大きい。GETもそこそこ大きい。<li>pprofのFlame Graphから。getIsuConditions/postIsuConditionsが重い。</ul></ul><p><a href=fg1.png><img alt src=fg1.png></a><h4>iconをDBにつっこむのをやめてファイルに書き出す</h4><ul><li>時間: 12:50<li>スコア: 52000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/e3cc31346fb89455a0f0123e9ea08156914e28c4</a></ul></ul><h4>微調整</h4><ul><li>時間: 13:30<li>スコア: 64000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/68f2d06510e6ad147a623bce64dcc0d2b1ab56ca</a><ul><li>あえてtrendを返すのを遅くして、ユーザー数の増加を抑える。</ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/72368dc1582670ccdce6fc2e727bb82da5292b30</a><ul><li>DBを3台から2台に減らして、appへよりCPU時間を配分する。</ul></ul><li>根拠<ul><li>netdata等から。appとDBが同居しているサーバでCPU使用率がほぼ100%なのに対して、DBのみが動くサーバではまだ余裕があったため。</ul></ul><h4>backendを複数台に</h4><ul><li>時間: 14:00<li>スコア: 72000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/99ec56508bb5fc501133f06cc913e20c98de1ec7</a><ul><li>appを3台にして、postIsuConditionのみを複数台で処理させる。</ul></ul><li>根拠<ul><li>netdata等から。appサーバからDBを剥がしてもまだCPU使用率が100%だったため。</ul></ul><h4>getIsuConditionsFromDBの高速化</h4><ul><li>時間: 14:30<li>スコア: 107000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/7981a778309e216b3734d817c3458c15f20d5564</a><ul><li>Generated Column追加、SQLでLIMITする。</ul></ul><li>根拠<ul><li>pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。<pre><code class=\"hljs language-n1ql\"><span class=hljs-keyword>select</span> * <span class=hljs-keyword>from</span> <span class=hljs-symbol>`isu_condition`</span> <span class=hljs-keyword>where</span> <span class=hljs-symbol>`jia_isu_uuid`</span> = ? <span class=hljs-keyword>and</span> <span class=hljs-symbol>`timestamp`</span> &#60 ? <span class=hljs-keyword>order</span> <span class=hljs-keyword>by</span> <span class=hljs-symbol>`timestamp`</span> <span class=hljs-keyword>desc</span>\n</code></pre><li>pprofのFlame Graphから。getIsuConditionsFromDBの圧倒的存在感。。。</ul></ul><p><a href=fg3.png><img alt src=fg3.png></a><h4><code>postIsuCondition</code> バルクインサート + postIsuCondition全受理</h4><ul><li>時間: 14:40<li>スコア: 158000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/d375e46e3d72547b8a3d67a97f26133981264680</a><li><a href=https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/4e2da32e02b079fbe56ed2188dabd5639ef7f2c3</a></ul></ul><h4>nginx調整</h4><ul><li>時間: 14:50<li>スコア: 295000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/9e47a40a1f1af444a07fa93c1cc3a33372904b5a</a><ul><li>getIsuGraphを3台処理に変更、nginx-backend間通信のkeepalive化。</ul></ul><li>根拠<ul><li>netdata等から。1台目のappサーバがキツそうだったのと、その割にほか2つがヒマそうだったので。</ul></ul><h4>getTrend調整</h4><ul><li>時間: 15:00<li>スコア: 346000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/6cc6d718095b0e1d4ffbc3277e53d8ac4966bf52</a><ul><li>意図的にtrendを返すのを遅くしていたところを少しだけ早くしてユーザー数を増やす。</ul></ul></ul><h4>グラフ作成時の取得データ量を減らす</h4><ul><li>時間: 15:00<li>スコア: 631000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/659cb46e1210c56aaabf6f40681bfe705453a686</a><ul><li>WHERE句にtimestampの範囲で絞る条件を追加。</ul></ul><li>根拠<ul><li>pt-query-digestから。以下のクエリが遅い＋Rows_sentが異常に大きい。</ul><pre><code class=\"hljs language-n1ql\"><span class=hljs-keyword>select</span> * <span class=hljs-keyword>from</span> <span class=hljs-symbol>`isu_condition`</span> <span class=hljs-keyword>where</span> <span class=hljs-symbol>`jia_isu_uuid`</span> = ? <span class=hljs-keyword>order</span> <span class=hljs-keyword>by</span> <span class=hljs-symbol>`timestamp`</span>\n</code></pre></ul><h4>nginx調整</h4><ul><li>時間: 15:10<li>スコア: 836000〜932000くらい<li>コミット<ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/3d9f96bfe12f263a0ea8f3aa759b8e73c2659f0a</a><ul><li>nginxとappが同居してる場合はnginx-app間通信をunix domain socket経由に</ul><li><a href=https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41 rel=\"noopener noreferrer\"target=_blank>https://github.com/narusejun/isucon11-qualify/commit/5f4f37918c900ae106da1b54da66d59399da3a41</a><ul><li>nginx-app間のkeepaliveコネクション数調整</ul></ul></ul><h4>微調整</h4><ul><li>時間: 16:00〜17:00<li>スコア: 1010000〜1173984(ベストスコア)<li>パラメータをいろいろ調整してた<ul><li>MySQL設定<li>nginx設定<li>getTrend待ち時間</ul></ul><h4>最終</h4><ul><li>時間: 17:00〜<li>スコア: 988417(最終スコア)<li>http2のGOAWAY問題<sup id=fnref-goaway><a href=#fn-goaway class=footnote-ref>6</a></sup>でベンチマークがまれに失敗する問題の対応<ul><li>安全に追試をパスできるように少し性能を落とした</ul></ul><h2>おわり</h2><p>運営の皆さんありがとうございました。<div class=footnotes><hr><ol><li id=fn-team>全員が今年出題の<a href=https://trap.jp/ rel=\"noopener noreferrer\"target=_blank>東京工業大学デジタル創作同好会traP</a>のOBです。<a href=#fnref-team class=footnote-backref>↩</a><li id=fn-fail>運営サイドにも<a href=https://twitter.com/sora_h/status/1429334456616189957 rel=\"noopener noreferrer\"target=_blank>定評のある</a>失敗率。<a href=#fnref-fail class=footnote-backref>↩</a><li id=fn-goaway>詳細については<a href=https://isucon.net/archives/56021237.html rel=\"noopener noreferrer\"target=_blank>予選結果</a>の「不具合について」を参照。<a href=#fnref-goaway class=footnote-backref>↩</a><li id=fn-clar>競技中に質問を行い「ベンチマーカーのバグである」との回答を頂いてはいましたが、チーム内での議論の結果、必ずしもそうとは言えないのではないかという結論になりました。<a href=#fnref-clar class=footnote-backref>↩</a><li id=fn-pprof>次項のFlame Graphと見比べるとgetTrendがすっかり見えなくなっていることがわかります。<a href=#fnref-pprof class=footnote-backref>↩</a></ol></div>"},"__N_SSG":true}