{"pageProps":{"article":{"type":"article","slug":"12","body":"作ります\n\n## イーサネットコンバータ\n\n無線LANの電波を有線に変換するやつ（適当）\n\n公衆無線LANをイーサネットコンバータで有線ネットワークにつなげると嬉しいね、みたいな。\nてかこれルータじゃないか？\n\n## 準備\n\n突然ですがArchLinuxは神です。\nとりあえずRaspiにArchLinuxARMを入れます。\n\nx86_64の一般的なやつと比べるとインスコ難易度は低めです。\n\nここのInstallationをみましょう\n\nhttps://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3\n\nなんかmacOSでやろうとしたら詰んだので、Linux上でやることをオススメします。\nボクはArchLinux(x86_64) on VirtualBox on macOSでやったんですが、非常に闇だったのでおすすめしません。\nWindowsは知りません。ガンバッテ。\n\nちなみにx86_64版のインストールはこの記事がわかりやすいですね！！１１\n\nhttps://trap.jp/post/39/\n\n## 設定\n\n### IPを固定しよう\n\n先にLAN側をやりましょう。\n\n今回は`10.0.0.0/24`なネットワークを作ってみます。\nArchLinuxは神なので[netctl](https://wiki.archlinuxjp.org/index.php/Netctl)っていう神ツールが入っています。\n\nこの設定ファイル`/etc/netctl/eth0`を書いて、\n```\nInterface=eth0\nConnection=ethernet\nIP=static\nAddress=('10.0.0.1/24')\n```\n\n```sh\n# netctl start eth0\n# netctl enable eth0\n```\n\nこんなかんじ。\n自分のIPアドレスは`10.0.0.1`にしました。\n\n### DHCP/DNSサーバになろう\n\n市販のルーターにはだいたいついてるDHCP/DNS機能ですが、**dnsmasq**ってのがありまして、この人がこの2つを兼任してくれます。\n\nとりあえずインストール\n```sh\n# pacman -S dnsmasq\n```\n\nで、設定ファイル`/etc/dnsmasq.conf`に追記します。\n```\ninterface=eth0\nbind-interfaces\ndhcp-range=10.0.0.2,10.0.0.254,2h\ndhcp-option=option:netmask,255.255.255.0\ndhcp-option=option:router,10.0.0.1\ndhcp-option=option:dns-server,10.0.0.1\n```\n\nそしたらdnsmasqを起動します。\n```sh\n# systemctl start dnsmasq\n# systemctl enable dnsmasq\n```\n\nこれで、このRaspiがデフォルトゲートウェイと化したので、他の人がRaspiにガンガンパケットを送ってくるようになります。\nでもルーティングしてないから死ぬね。\n\n\n### インターネットに繋ごう\n\nそしたらWAN側をなんとかします。\nLAN側にeth0を向けてて、WAN側にはwlan0を使います。\n\nArchLinuxは神なので、**wifi-menu**っていう神ツールがはいってます。（たぶんnetctlの一部）\n\n```sh\n# wifi-menu -o\n```\n\nってやったら後はウィザード形式で設定できてしまいます。\n簡単！！！説明することがない！！\n\n再起動しても自動でつながるようにしておきます。\n```sh\n# netctl list\n* eth0\n* wlan0-Wi2_club\n  wlan0-TokyoTech\n\n# netctl enable wlan0-Wi2_club\n```\n\n今回は公衆無線LANのWi2に繋いでいます。\nnetctlを使えば場所によって手軽にプロファイルを切り替えられる！！便利だ！！！！\n\n### ルーティングしよう\n\nじゃあ、色んな所から届いてるパケットをうまく捌きましょう。\n\nまず、パケット転送を有効にします。\n```sh\n# sysctl net.ipv4.ip_forward=1\n```\n\n再起動後も有効になるように`/etc/sysctl.d/ipforward.conf`を作成します。\n```\nnet.ipv4.ip_forward=1\n```\n\nあとは**iptables**さんが優秀なので、例によって設定を書くだけです。\n\n`/etc/iptables/iptables.rules`を作成します。\n```\n*filter\n:INPUT ACCEPT [231:17979]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [150:14976]\n-A FORWARD -i eth0 -o wlan0 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nCOMMIT\n\n*nat\n:PREROUTING ACCEPT [10:734]\n:INPUT ACCEPT [4:314]\n:OUTPUT ACCEPT [2:134]\n:POSTROUTING ACCEPT [0:0]\n-A PREROUTING -d 10.0.0.1 -i eth0 -j ACCEPT\n-A POSTROUTING -s 10.0.0.0/24 -o wlan0 -j MASQUERADE\nCOMMIT\n```\n\n自分宛てのパケットは受け取って、それ以外はNAPT(IPマスカレード)でうまいこと書き換えて流します。\n\niptablesの設定を有効化します。\n```sh\n# systemctl start iptables\n# systemctl enable iptables\n```\n\n## できあがり！\n\n完成です。\nイーサネットコンバータもといルータと化したRaspberry Pi 3です。\n\nwlan0のMACアドレスをWi2とかの公衆無線LANに登録すれば、無制限に分配できるマンになれます。\n\neth0が100Mbpsまでしか通れないので、ちょっと大きいことをしようとするとかなり辛いです。\nギガビット対応のUSB接続LANアダプタつけたらちょっとだけ速くなります。\nでもUSB2.0なので最大転送速度は理論値480Mbpsくらいが限界です。かなしい。\n","title":"Raspberry Pi 3 で作るイーサネットコンバータというかルータ","image":null,"tags":["Raspberry Pi","ネットワーク"],"date":"2016-10-16T00:00:00.000Z","updated":"2021-01-07T09:09:45.000Z"},"description":"作ります イーサネットコンバータ 無線LANの電波を有線に変換するやつ（適当） 公衆無線LANをイーサネットコンバータで有線ネットワークにつなげると嬉しいね、みたいな。 てかこれルータじゃないか？ …","content":"<p>作ります<h2>イーサネットコンバータ</h2><p>無線LANの電波を有線に変換するやつ（適当）<p>公衆無線LANをイーサネットコンバータで有線ネットワークにつなげると嬉しいね、みたいな。 てかこれルータじゃないか？<h2>準備</h2><p>突然ですがArchLinuxは神です。 とりあえずRaspiにArchLinuxARMを入れます。<p>x86_64の一般的なやつと比べるとインスコ難易度は低めです。<p>ここのInstallationをみましょう<aside><a href=https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3 rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://archlinuxarm.org/public/images/alarm.png)><div><strong>Raspberry Pi 3 | Arch Linux ARM</strong><cite>archlinuxarm.org</cite><q cite=https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3></q></div></a></aside><p>なんかmacOSでやろうとしたら詰んだので、Linux上でやることをオススメします。 ボクはArchLinux(x86_64) on VirtualBox on macOSでやったんですが、非常に闇だったのでおすすめしません。 Windowsは知りません。ガンバッテ。<p>ちなみにx86_64版のインストールはこの記事がわかりやすいですね！！１１<aside><a href=https://trap.jp/post/39/ rel=\"noopener noreferrer\"target=_blank style=background-image:url(https://trap.jp/content/images/2016/02/conoha_1280_720_pop.jpg)><div><strong>ConoHaでArchLinuxを動かすまで</strong><cite>trap.jp</cite><q cite=https://trap.jp/post/39/>traPの鯖管kazです。 ConoHaにArchLinuxをインストールした時の手順をメモしておきます。 アカウントの登録 アカウント登録しましょう。このリンクから登録すると1000円分のクレジットがもらえてお得ですよ。あの……そういうアレです。（許して。） ConoHaは登録時に 電話認証 or SMS認証 が必要なのですが、絶対に電話認証を選択することをおすすめします。なぜなら、電話をとってくれるのがあの美雲このはちゃんだからです。SMS認証で済ます人は10割損してる。 とりあえず、登録が完了したらまず右上のメールアドレスをクリックしてメニューを開き、「アカウント設定 &#38gt; …</q></div></a></aside><h2>設定</h2><h3>IPを固定しよう</h3><p>先にLAN側をやりましょう。<p>今回は<code>10.0.0.0/24</code>なネットワークを作ってみます。 ArchLinuxは神なので<a href=https://wiki.archlinuxjp.org/index.php/Netctl rel=\"noopener noreferrer\"target=_blank>netctl</a>っていう神ツールが入っています。<p>この設定ファイル<code>/etc/netctl/eth0</code>を書いて、<pre><code class=\"hljs language-ini\"><span class=hljs-attr>Interface</span>=eth0\n<span class=hljs-attr>Connection</span>=ethernet\n<span class=hljs-attr>IP</span>=static\n<span class=hljs-attr>Address</span>=(<span class=hljs-string>'10.0.0.1/24'</span>)\n</code></pre><pre><code class=\"hljs language-sh\"><span class=hljs-comment># netctl start eth0</span>\n<span class=hljs-comment># netctl enable eth0</span>\n</code></pre><p>こんなかんじ。 自分のIPアドレスは<code>10.0.0.1</code>にしました。<h3>DHCP/DNSサーバになろう</h3><p>市販のルーターにはだいたいついてるDHCP/DNS機能ですが、<strong>dnsmasq</strong>ってのがありまして、この人がこの2つを兼任してくれます。<p>とりあえずインストール<pre><code class=\"hljs language-sh\"><span class=hljs-comment># pacman -S dnsmasq</span>\n</code></pre><p>で、設定ファイル<code>/etc/dnsmasq.conf</code>に追記します。<pre><code class=\"hljs language-angelscript\"><span class=hljs-keyword>interface</span>=<span class=hljs-symbol>eth0</span>\n<span class=hljs-symbol>bind</span>-<span class=hljs-symbol>interfaces</span>\n<span class=hljs-symbol>dhcp</span>-<span class=hljs-symbol>range</span>=<span class=hljs-symbol>10</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>2</span>,<span class=hljs-symbol>10</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>254</span>,<span class=hljs-symbol>2h</span>\n<span class=hljs-symbol>dhcp</span>-<span class=hljs-symbol>option</span>=<span class=hljs-symbol>option</span>:<span class=hljs-symbol>netmask</span>,<span class=hljs-symbol>255</span>.<span class=hljs-symbol>255</span>.<span class=hljs-symbol>255</span>.<span class=hljs-symbol>0</span>\n<span class=hljs-symbol>dhcp</span>-<span class=hljs-symbol>option</span>=<span class=hljs-symbol>option</span>:<span class=hljs-symbol>router</span>,<span class=hljs-symbol>10</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>1</span>\n<span class=hljs-symbol>dhcp</span>-<span class=hljs-symbol>option</span>=<span class=hljs-symbol>option</span>:<span class=hljs-symbol>dns</span>-<span class=hljs-symbol>server</span>,<span class=hljs-symbol>10</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>0</span>.<span class=hljs-symbol>1</span>\n</code></pre><p>そしたらdnsmasqを起動します。<pre><code class=\"hljs language-sh\"><span class=hljs-comment># systemctl start dnsmasq</span>\n<span class=hljs-comment># systemctl enable dnsmasq</span>\n</code></pre><p>これで、このRaspiがデフォルトゲートウェイと化したので、他の人がRaspiにガンガンパケットを送ってくるようになります。 でもルーティングしてないから死ぬね。<h3>インターネットに繋ごう</h3><p>そしたらWAN側をなんとかします。 LAN側にeth0を向けてて、WAN側にはwlan0を使います。<p>ArchLinuxは神なので、<strong>wifi-menu</strong>っていう神ツールがはいってます。（たぶんnetctlの一部）<pre><code class=\"hljs language-sh\"><span class=hljs-comment># wifi-menu -o</span>\n</code></pre><p>ってやったら後はウィザード形式で設定できてしまいます。 簡単！！！説明することがない！！<p>再起動しても自動でつながるようにしておきます。<pre><code class=\"hljs language-sh\"><span class=hljs-comment># netctl list</span>\n* eth0\n* wlan0-Wi2_club\n  wlan0-TokyoTech\n\n<span class=hljs-comment># netctl enable wlan0-Wi2_club</span>\n</code></pre><p>今回は公衆無線LANのWi2に繋いでいます。 netctlを使えば場所によって手軽にプロファイルを切り替えられる！！便利だ！！！！<h3>ルーティングしよう</h3><p>じゃあ、色んな所から届いてるパケットをうまく捌きましょう。<p>まず、パケット転送を有効にします。<pre><code class=\"hljs language-sh\"><span class=hljs-comment># sysctl net.ipv4.ip_forward=1</span>\n</code></pre><p>再起動後も有効になるように<code>/etc/sysctl.d/ipforward.conf</code>を作成します。<pre><code class=\"hljs language-apache\"><span class=hljs-attribute>net</span>.ipv<span class=hljs-number>4</span>.ip_forward=<span class=hljs-number>1</span>\n</code></pre><p>あとは<strong>iptables</strong>さんが優秀なので、例によって設定を書くだけです。<p><code>/etc/iptables/iptables.rules</code>を作成します。<pre><code class=\"hljs language-asciidoc\">*filter\n<span class=hljs-meta>:INPUT ACCEPT [231:17979]</span>\n<span class=hljs-meta>:FORWARD ACCEPT [0:0]</span>\n<span class=hljs-meta>:OUTPUT ACCEPT [150:14976]</span>\n-A FORWARD -i eth0 -o wlan0 -j ACCEPT\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nCOMMIT\n\n*nat\n<span class=hljs-meta>:PREROUTING ACCEPT [10:734]</span>\n<span class=hljs-meta>:INPUT ACCEPT [4:314]</span>\n<span class=hljs-meta>:OUTPUT ACCEPT [2:134]</span>\n<span class=hljs-meta>:POSTROUTING ACCEPT [0:0]</span>\n-A PREROUTING -d 10.0.0.1 -i eth0 -j ACCEPT\n-A POSTROUTING -s 10.0.0.0/24 -o wlan0 -j MASQUERADE\nCOMMIT\n</code></pre><p>自分宛てのパケットは受け取って、それ以外はNAPT(IPマスカレード)でうまいこと書き換えて流します。<p>iptablesの設定を有効化します。<pre><code class=\"hljs language-sh\"><span class=hljs-comment># systemctl start iptables</span>\n<span class=hljs-comment># systemctl enable iptables</span>\n</code></pre><h2>できあがり！</h2><p>完成です。 イーサネットコンバータもといルータと化したRaspberry Pi 3です。<p>wlan0のMACアドレスをWi2とかの公衆無線LANに登録すれば、無制限に分配できるマンになれます。<p>eth0が100Mbpsまでしか通れないので、ちょっと大きいことをしようとするとかなり辛いです。 ギガビット対応のUSB接続LANアダプタつけたらちょっとだけ速くなります。 でもUSB2.0なので最大転送速度は理論値480Mbpsくらいが限界です。かなしい。"},"__N_SSG":true}